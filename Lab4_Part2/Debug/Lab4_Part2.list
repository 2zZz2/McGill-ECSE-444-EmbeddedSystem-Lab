
Lab4_Part2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a48  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  08003bd0  08003bd0  00013bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004414  08004414  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004414  08004414  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004414  08004414  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004414  08004414  00014414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004418  08004418  00014418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800441c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  20000010  0800442c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  0800442c  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e22  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002029  00000000  00000000  00030e62  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d40  00000000  00000000  00032e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c30  00000000  00000000  00033bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002658d  00000000  00000000  00034800  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b179  00000000  00000000  0005ad8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ef99c  00000000  00000000  00065f06  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  001558a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003768  00000000  00000000  00155994  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000000fa  00000000  00000000  001590fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003bb8 	.word	0x08003bb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003bb8 	.word	0x08003bb8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	0000      	movs	r0, r0
	...

08000a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b087      	sub	sp, #28
 8000a4c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a4e:	f000 fc72 	bl	8001336 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a52:	f000 f951 	bl	8000cf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a56:	f000 fa3f 	bl	8000ed8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a5a:	f000 fa1f 	bl	8000e9c <MX_DMA_Init>
  MX_DAC1_Init();
 8000a5e:	f000 f99d 	bl	8000d9c <MX_DAC1_Init>
  MX_TIM2_Init();
 8000a62:	f000 f9cd 	bl	8000e00 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //HAL_DAC_Start(&hdac1,DAC_CHANNEL_1);
  // define 1khz sine wave
  for(int t = 0; t < 44; t++){
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	e03c      	b.n	8000ae6 <main+0x9e>
	  sinx[t] = (arm_sin_f32(2*pi*t/44)+1)*2048*0.33;
 8000a6c:	68f8      	ldr	r0, [r7, #12]
 8000a6e:	f7ff fcfd 	bl	800046c <__aeabi_i2d>
 8000a72:	a393      	add	r3, pc, #588	; (adr r3, 8000cc0 <main+0x278>)
 8000a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a78:	f7ff fd62 	bl	8000540 <__aeabi_dmul>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	460c      	mov	r4, r1
 8000a80:	4618      	mov	r0, r3
 8000a82:	4621      	mov	r1, r4
 8000a84:	f04f 0200 	mov.w	r2, #0
 8000a88:	4b8f      	ldr	r3, [pc, #572]	; (8000cc8 <main+0x280>)
 8000a8a:	f7ff fe83 	bl	8000794 <__aeabi_ddiv>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	460c      	mov	r4, r1
 8000a92:	4618      	mov	r0, r3
 8000a94:	4621      	mov	r1, r4
 8000a96:	f7ff ff85 	bl	80009a4 <__aeabi_d2f>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	ee00 3a10 	vmov	s0, r3
 8000aa0:	f003 f818 	bl	8003ad4 <arm_sin_f32>
 8000aa4:	eeb0 7a40 	vmov.f32	s14, s0
 8000aa8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000aac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ab0:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8000ccc <main+0x284>
 8000ab4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ab8:	ee17 0a90 	vmov	r0, s15
 8000abc:	f7ff fce8 	bl	8000490 <__aeabi_f2d>
 8000ac0:	a37d      	add	r3, pc, #500	; (adr r3, 8000cb8 <main+0x270>)
 8000ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ac6:	f7ff fd3b 	bl	8000540 <__aeabi_dmul>
 8000aca:	4603      	mov	r3, r0
 8000acc:	460c      	mov	r4, r1
 8000ace:	4618      	mov	r0, r3
 8000ad0:	4621      	mov	r1, r4
 8000ad2:	f7ff ff47 	bl	8000964 <__aeabi_d2uiz>
 8000ad6:	4601      	mov	r1, r0
 8000ad8:	4a7d      	ldr	r2, [pc, #500]	; (8000cd0 <main+0x288>)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int t = 0; t < 44; t++){
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	2b2b      	cmp	r3, #43	; 0x2b
 8000aea:	ddbf      	ble.n	8000a6c <main+0x24>
  }

  for(int i = 0; i < 42; i++){
 8000aec:	2300      	movs	r3, #0
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	e041      	b.n	8000b76 <main+0x12e>
	  C6[i] = 0.33*(1 + arm_sin_f32(2*pi*i/42))*2048;
 8000af2:	68b8      	ldr	r0, [r7, #8]
 8000af4:	f7ff fcba 	bl	800046c <__aeabi_i2d>
 8000af8:	a371      	add	r3, pc, #452	; (adr r3, 8000cc0 <main+0x278>)
 8000afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000afe:	f7ff fd1f 	bl	8000540 <__aeabi_dmul>
 8000b02:	4603      	mov	r3, r0
 8000b04:	460c      	mov	r4, r1
 8000b06:	4618      	mov	r0, r3
 8000b08:	4621      	mov	r1, r4
 8000b0a:	f04f 0200 	mov.w	r2, #0
 8000b0e:	4b71      	ldr	r3, [pc, #452]	; (8000cd4 <main+0x28c>)
 8000b10:	f7ff fe40 	bl	8000794 <__aeabi_ddiv>
 8000b14:	4603      	mov	r3, r0
 8000b16:	460c      	mov	r4, r1
 8000b18:	4618      	mov	r0, r3
 8000b1a:	4621      	mov	r1, r4
 8000b1c:	f7ff ff42 	bl	80009a4 <__aeabi_d2f>
 8000b20:	4603      	mov	r3, r0
 8000b22:	ee00 3a10 	vmov	s0, r3
 8000b26:	f002 ffd5 	bl	8003ad4 <arm_sin_f32>
 8000b2a:	eeb0 7a40 	vmov.f32	s14, s0
 8000b2e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000b32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b36:	ee17 0a90 	vmov	r0, s15
 8000b3a:	f7ff fca9 	bl	8000490 <__aeabi_f2d>
 8000b3e:	a35e      	add	r3, pc, #376	; (adr r3, 8000cb8 <main+0x270>)
 8000b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b44:	f7ff fcfc 	bl	8000540 <__aeabi_dmul>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	460c      	mov	r4, r1
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	4621      	mov	r1, r4
 8000b50:	f04f 0200 	mov.w	r2, #0
 8000b54:	4b60      	ldr	r3, [pc, #384]	; (8000cd8 <main+0x290>)
 8000b56:	f7ff fcf3 	bl	8000540 <__aeabi_dmul>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	460c      	mov	r4, r1
 8000b5e:	4618      	mov	r0, r3
 8000b60:	4621      	mov	r1, r4
 8000b62:	f7ff feff 	bl	8000964 <__aeabi_d2uiz>
 8000b66:	4601      	mov	r1, r0
 8000b68:	4a5c      	ldr	r2, [pc, #368]	; (8000cdc <main+0x294>)
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i = 0; i < 42; i++){
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	3301      	adds	r3, #1
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	2b29      	cmp	r3, #41	; 0x29
 8000b7a:	ddba      	ble.n	8000af2 <main+0xaa>
  }

  for(int i = 0; i < 34; i++){
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	e041      	b.n	8000c06 <main+0x1be>
	  E6[i] = 0.33*(1 + arm_sin_f32(2*pi*i/34))*2048;
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f7ff fc72 	bl	800046c <__aeabi_i2d>
 8000b88:	a34d      	add	r3, pc, #308	; (adr r3, 8000cc0 <main+0x278>)
 8000b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b8e:	f7ff fcd7 	bl	8000540 <__aeabi_dmul>
 8000b92:	4603      	mov	r3, r0
 8000b94:	460c      	mov	r4, r1
 8000b96:	4618      	mov	r0, r3
 8000b98:	4621      	mov	r1, r4
 8000b9a:	f04f 0200 	mov.w	r2, #0
 8000b9e:	4b50      	ldr	r3, [pc, #320]	; (8000ce0 <main+0x298>)
 8000ba0:	f7ff fdf8 	bl	8000794 <__aeabi_ddiv>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	460c      	mov	r4, r1
 8000ba8:	4618      	mov	r0, r3
 8000baa:	4621      	mov	r1, r4
 8000bac:	f7ff fefa 	bl	80009a4 <__aeabi_d2f>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	ee00 3a10 	vmov	s0, r3
 8000bb6:	f002 ff8d 	bl	8003ad4 <arm_sin_f32>
 8000bba:	eeb0 7a40 	vmov.f32	s14, s0
 8000bbe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000bc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bc6:	ee17 0a90 	vmov	r0, s15
 8000bca:	f7ff fc61 	bl	8000490 <__aeabi_f2d>
 8000bce:	a33a      	add	r3, pc, #232	; (adr r3, 8000cb8 <main+0x270>)
 8000bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd4:	f7ff fcb4 	bl	8000540 <__aeabi_dmul>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	460c      	mov	r4, r1
 8000bdc:	4618      	mov	r0, r3
 8000bde:	4621      	mov	r1, r4
 8000be0:	f04f 0200 	mov.w	r2, #0
 8000be4:	4b3c      	ldr	r3, [pc, #240]	; (8000cd8 <main+0x290>)
 8000be6:	f7ff fcab 	bl	8000540 <__aeabi_dmul>
 8000bea:	4603      	mov	r3, r0
 8000bec:	460c      	mov	r4, r1
 8000bee:	4618      	mov	r0, r3
 8000bf0:	4621      	mov	r1, r4
 8000bf2:	f7ff feb7 	bl	8000964 <__aeabi_d2uiz>
 8000bf6:	4601      	mov	r1, r0
 8000bf8:	4a3a      	ldr	r2, [pc, #232]	; (8000ce4 <main+0x29c>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i = 0; i < 34; i++){
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3301      	adds	r3, #1
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b21      	cmp	r3, #33	; 0x21
 8000c0a:	ddba      	ble.n	8000b82 <main+0x13a>
  }

  for(int i = 0; i < 28; i++){
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	e041      	b.n	8000c96 <main+0x24e>
  		G6[i] = 0.33*(1 + arm_sin_f32(2*pi*i/28))*2048;
 8000c12:	6838      	ldr	r0, [r7, #0]
 8000c14:	f7ff fc2a 	bl	800046c <__aeabi_i2d>
 8000c18:	a329      	add	r3, pc, #164	; (adr r3, 8000cc0 <main+0x278>)
 8000c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1e:	f7ff fc8f 	bl	8000540 <__aeabi_dmul>
 8000c22:	4603      	mov	r3, r0
 8000c24:	460c      	mov	r4, r1
 8000c26:	4618      	mov	r0, r3
 8000c28:	4621      	mov	r1, r4
 8000c2a:	f04f 0200 	mov.w	r2, #0
 8000c2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ce8 <main+0x2a0>)
 8000c30:	f7ff fdb0 	bl	8000794 <__aeabi_ddiv>
 8000c34:	4603      	mov	r3, r0
 8000c36:	460c      	mov	r4, r1
 8000c38:	4618      	mov	r0, r3
 8000c3a:	4621      	mov	r1, r4
 8000c3c:	f7ff feb2 	bl	80009a4 <__aeabi_d2f>
 8000c40:	4603      	mov	r3, r0
 8000c42:	ee00 3a10 	vmov	s0, r3
 8000c46:	f002 ff45 	bl	8003ad4 <arm_sin_f32>
 8000c4a:	eeb0 7a40 	vmov.f32	s14, s0
 8000c4e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c56:	ee17 0a90 	vmov	r0, s15
 8000c5a:	f7ff fc19 	bl	8000490 <__aeabi_f2d>
 8000c5e:	a316      	add	r3, pc, #88	; (adr r3, 8000cb8 <main+0x270>)
 8000c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c64:	f7ff fc6c 	bl	8000540 <__aeabi_dmul>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	460c      	mov	r4, r1
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	4621      	mov	r1, r4
 8000c70:	f04f 0200 	mov.w	r2, #0
 8000c74:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <main+0x290>)
 8000c76:	f7ff fc63 	bl	8000540 <__aeabi_dmul>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	460c      	mov	r4, r1
 8000c7e:	4618      	mov	r0, r3
 8000c80:	4621      	mov	r1, r4
 8000c82:	f7ff fe6f 	bl	8000964 <__aeabi_d2uiz>
 8000c86:	4601      	mov	r1, r0
 8000c88:	4a18      	ldr	r2, [pc, #96]	; (8000cec <main+0x2a4>)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i = 0; i < 28; i++){
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	3301      	adds	r3, #1
 8000c94:	603b      	str	r3, [r7, #0]
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	2b1b      	cmp	r3, #27
 8000c9a:	ddba      	ble.n	8000c12 <main+0x1ca>
  }

  HAL_TIM_Base_Start_IT(&htim2);
 8000c9c:	4814      	ldr	r0, [pc, #80]	; (8000cf0 <main+0x2a8>)
 8000c9e:	f002 fac5 	bl	800322c <HAL_TIM_Base_Start_IT>

  HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1, sinx , 44 ,DAC_ALIGN_12B_R);
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	232c      	movs	r3, #44	; 0x2c
 8000ca8:	4a09      	ldr	r2, [pc, #36]	; (8000cd0 <main+0x288>)
 8000caa:	2100      	movs	r1, #0
 8000cac:	4811      	ldr	r0, [pc, #68]	; (8000cf4 <main+0x2ac>)
 8000cae:	f000 fd0d 	bl	80016cc <HAL_DAC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <main+0x26a>
 8000cb4:	f3af 8000 	nop.w
 8000cb8:	51eb851f 	.word	0x51eb851f
 8000cbc:	3fd51eb8 	.word	0x3fd51eb8
 8000cc0:	4d12d84a 	.word	0x4d12d84a
 8000cc4:	401921fb 	.word	0x401921fb
 8000cc8:	40460000 	.word	0x40460000
 8000ccc:	45000000 	.word	0x45000000
 8000cd0:	200001b8 	.word	0x200001b8
 8000cd4:	40450000 	.word	0x40450000
 8000cd8:	40a00000 	.word	0x40a00000
 8000cdc:	20000110 	.word	0x20000110
 8000ce0:	40410000 	.word	0x40410000
 8000ce4:	20000040 	.word	0x20000040
 8000ce8:	403c0000 	.word	0x403c0000
 8000cec:	20000268 	.word	0x20000268
 8000cf0:	200002d8 	.word	0x200002d8
 8000cf4:	2000002c 	.word	0x2000002c

08000cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b096      	sub	sp, #88	; 0x58
 8000cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	2244      	movs	r2, #68	; 0x44
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f002 ff4e 	bl	8003ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d0c:	463b      	mov	r3, r7
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d1a:	2310      	movs	r3, #16
 8000d1c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d26:	2360      	movs	r3, #96	; 0x60
 8000d28:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d32:	2301      	movs	r3, #1
 8000d34:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000d36:	2328      	movs	r3, #40	; 0x28
 8000d38:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d3a:	2307      	movs	r3, #7
 8000d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d42:	2302      	movs	r3, #2
 8000d44:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f001 fc64 	bl	8002618 <HAL_RCC_OscConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000d56:	f000 f977 	bl	8001048 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d5a:	230f      	movs	r3, #15
 8000d5c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d6e:	463b      	mov	r3, r7
 8000d70:	2104      	movs	r1, #4
 8000d72:	4618      	mov	r0, r3
 8000d74:	f002 f836 	bl	8002de4 <HAL_RCC_ClockConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000d7e:	f000 f963 	bl	8001048 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d82:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d86:	f001 fbf1 	bl	800256c <HAL_PWREx_ControlVoltageScaling>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d90:	f000 f95a 	bl	8001048 <Error_Handler>
  }
}
 8000d94:	bf00      	nop
 8000d96:	3758      	adds	r7, #88	; 0x58
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	2224      	movs	r2, #36	; 0x24
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f002 fefd 	bl	8003ba8 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000dae:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <MX_DAC1_Init+0x5c>)
 8000db0:	4a12      	ldr	r2, [pc, #72]	; (8000dfc <MX_DAC1_Init+0x60>)
 8000db2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000db4:	4810      	ldr	r0, [pc, #64]	; (8000df8 <MX_DAC1_Init+0x5c>)
 8000db6:	f000 fc66 	bl	8001686 <HAL_DAC_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000dc0:	f000 f942 	bl	8001048 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000dc8:	2324      	movs	r3, #36	; 0x24
 8000dca:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	2200      	movs	r2, #0
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4806      	ldr	r0, [pc, #24]	; (8000df8 <MX_DAC1_Init+0x5c>)
 8000de0:	f000 fdf9 	bl	80019d6 <HAL_DAC_ConfigChannel>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000dea:	f000 f92d 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	3728      	adds	r7, #40	; 0x28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	2000002c 	.word	0x2000002c
 8000dfc:	40007400 	.word	0x40007400

08000e00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e1e:	4b1e      	ldr	r3, [pc, #120]	; (8000e98 <MX_TIM2_Init+0x98>)
 8000e20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e26:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <MX_TIM2_Init+0x98>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <MX_TIM2_Init+0x98>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <MX_TIM2_Init+0x98>)
 8000e34:	f240 7216 	movw	r2, #1814	; 0x716
 8000e38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3a:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <MX_TIM2_Init+0x98>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e40:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <MX_TIM2_Init+0x98>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e46:	4814      	ldr	r0, [pc, #80]	; (8000e98 <MX_TIM2_Init+0x98>)
 8000e48:	f002 f998 	bl	800317c <HAL_TIM_Base_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e52:	f000 f8f9 	bl	8001048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	4619      	mov	r1, r3
 8000e62:	480d      	ldr	r0, [pc, #52]	; (8000e98 <MX_TIM2_Init+0x98>)
 8000e64:	f002 fb71 	bl	800354a <HAL_TIM_ConfigClockSource>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e6e:	f000 f8eb 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e72:	2320      	movs	r3, #32
 8000e74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4806      	ldr	r0, [pc, #24]	; (8000e98 <MX_TIM2_Init+0x98>)
 8000e80:	f002 fd82 	bl	8003988 <HAL_TIMEx_MasterConfigSynchronization>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e8a:	f000 f8dd 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	3720      	adds	r7, #32
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200002d8 	.word	0x200002d8

08000e9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <MX_DMA_Init+0x38>)
 8000ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ea6:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <MX_DMA_Init+0x38>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6493      	str	r3, [r2, #72]	; 0x48
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <MX_DMA_Init+0x38>)
 8000eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	200c      	movs	r0, #12
 8000ec0:	f000 fbab 	bl	800161a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ec4:	200c      	movs	r0, #12
 8000ec6:	f000 fbc4 	bl	8001652 <HAL_NVIC_EnableIRQ>

}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
 8000eec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eee:	4b29      	ldr	r3, [pc, #164]	; (8000f94 <MX_GPIO_Init+0xbc>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	4a28      	ldr	r2, [pc, #160]	; (8000f94 <MX_GPIO_Init+0xbc>)
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efa:	4b26      	ldr	r3, [pc, #152]	; (8000f94 <MX_GPIO_Init+0xbc>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <MX_GPIO_Init+0xbc>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	4a22      	ldr	r2, [pc, #136]	; (8000f94 <MX_GPIO_Init+0xbc>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f12:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <MX_GPIO_Init+0xbc>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <MX_GPIO_Init+0xbc>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	4a1c      	ldr	r2, [pc, #112]	; (8000f94 <MX_GPIO_Init+0xbc>)
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <MX_GPIO_Init+0xbc>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f3c:	4816      	ldr	r0, [pc, #88]	; (8000f98 <MX_GPIO_Init+0xc0>)
 8000f3e:	f001 fad7 	bl	80024f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <MX_GPIO_Init+0xc4>)
 8000f4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	4619      	mov	r1, r3
 8000f56:	4812      	ldr	r0, [pc, #72]	; (8000fa0 <MX_GPIO_Init+0xc8>)
 8000f58:	f001 f922 	bl	80021a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6e:	f107 030c 	add.w	r3, r7, #12
 8000f72:	4619      	mov	r1, r3
 8000f74:	4808      	ldr	r0, [pc, #32]	; (8000f98 <MX_GPIO_Init+0xc0>)
 8000f76:	f001 f913 	bl	80021a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2028      	movs	r0, #40	; 0x28
 8000f80:	f000 fb4b 	bl	800161a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f84:	2028      	movs	r0, #40	; 0x28
 8000f86:	f000 fb64 	bl	8001652 <HAL_NVIC_EnableIRQ>

}
 8000f8a:	bf00      	nop
 8000f8c:	3720      	adds	r7, #32
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40021000 	.word	0x40021000
 8000f98:	48000400 	.word	0x48000400
 8000f9c:	10110000 	.word	0x10110000
 8000fa0:	48000800 	.word	0x48000800

08000fa4 <HAL_GPIO_EXTI_Callback>:
	}
}

*/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af02      	add	r7, sp, #8
 8000faa:	4603      	mov	r3, r0
 8000fac:	80fb      	strh	r3, [r7, #6]
	if(GPIO_PIN == GPIO_PIN_13){
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fb4:	d13a      	bne.n	800102c <HAL_GPIO_EXTI_Callback+0x88>
		if(pb == 0){
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <HAL_GPIO_EXTI_Callback+0x90>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d10f      	bne.n	8000fde <HAL_GPIO_EXTI_Callback+0x3a>
			pb = 1;
 8000fbe:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <HAL_GPIO_EXTI_Callback+0x90>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	481c      	ldr	r0, [pc, #112]	; (8001038 <HAL_GPIO_EXTI_Callback+0x94>)
 8000fc8:	f000 fc3e 	bl	8001848 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, C6, 42, DAC_ALIGN_12B_R);
 8000fcc:	2300      	movs	r3, #0
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	232a      	movs	r3, #42	; 0x2a
 8000fd2:	4a1a      	ldr	r2, [pc, #104]	; (800103c <HAL_GPIO_EXTI_Callback+0x98>)
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4818      	ldr	r0, [pc, #96]	; (8001038 <HAL_GPIO_EXTI_Callback+0x94>)
 8000fd8:	f000 fb78 	bl	80016cc <HAL_DAC_Start_DMA>
			pb = 0;
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, G6, 28, DAC_ALIGN_12B_R);
		}
	}
}
 8000fdc:	e026      	b.n	800102c <HAL_GPIO_EXTI_Callback+0x88>
		else if(pb == 1){
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <HAL_GPIO_EXTI_Callback+0x90>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d10f      	bne.n	8001006 <HAL_GPIO_EXTI_Callback+0x62>
			pb = 2;
 8000fe6:	4b13      	ldr	r3, [pc, #76]	; (8001034 <HAL_GPIO_EXTI_Callback+0x90>)
 8000fe8:	2202      	movs	r2, #2
 8000fea:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000fec:	2100      	movs	r1, #0
 8000fee:	4812      	ldr	r0, [pc, #72]	; (8001038 <HAL_GPIO_EXTI_Callback+0x94>)
 8000ff0:	f000 fc2a 	bl	8001848 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, E6, 34, DAC_ALIGN_12B_R);
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2322      	movs	r3, #34	; 0x22
 8000ffa:	4a11      	ldr	r2, [pc, #68]	; (8001040 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	480e      	ldr	r0, [pc, #56]	; (8001038 <HAL_GPIO_EXTI_Callback+0x94>)
 8001000:	f000 fb64 	bl	80016cc <HAL_DAC_Start_DMA>
}
 8001004:	e012      	b.n	800102c <HAL_GPIO_EXTI_Callback+0x88>
		else if(pb == 2){
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <HAL_GPIO_EXTI_Callback+0x90>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2b02      	cmp	r3, #2
 800100c:	d10e      	bne.n	800102c <HAL_GPIO_EXTI_Callback+0x88>
			pb = 0;
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <HAL_GPIO_EXTI_Callback+0x90>)
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001014:	2100      	movs	r1, #0
 8001016:	4808      	ldr	r0, [pc, #32]	; (8001038 <HAL_GPIO_EXTI_Callback+0x94>)
 8001018:	f000 fc16 	bl	8001848 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, G6, 28, DAC_ALIGN_12B_R);
 800101c:	2300      	movs	r3, #0
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	231c      	movs	r3, #28
 8001022:	4a08      	ldr	r2, [pc, #32]	; (8001044 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001024:	2100      	movs	r1, #0
 8001026:	4804      	ldr	r0, [pc, #16]	; (8001038 <HAL_GPIO_EXTI_Callback+0x94>)
 8001028:	f000 fb50 	bl	80016cc <HAL_DAC_Start_DMA>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000000 	.word	0x20000000
 8001038:	2000002c 	.word	0x2000002c
 800103c:	20000110 	.word	0x20000110
 8001040:	20000040 	.word	0x20000040
 8001044:	20000268 	.word	0x20000268

08001048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_MspInit+0x44>)
 8001060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001062:	4a0e      	ldr	r2, [pc, #56]	; (800109c <HAL_MspInit+0x44>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6613      	str	r3, [r2, #96]	; 0x60
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <HAL_MspInit+0x44>)
 800106c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_MspInit+0x44>)
 8001078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107a:	4a08      	ldr	r2, [pc, #32]	; (800109c <HAL_MspInit+0x44>)
 800107c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001080:	6593      	str	r3, [r2, #88]	; 0x58
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_MspInit+0x44>)
 8001084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40021000 	.word	0x40021000

080010a0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a19      	ldr	r2, [pc, #100]	; (8001124 <HAL_DAC_MspInit+0x84>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d12c      	bne.n	800111c <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80010c2:	4b19      	ldr	r3, [pc, #100]	; (8001128 <HAL_DAC_MspInit+0x88>)
 80010c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c6:	4a18      	ldr	r2, [pc, #96]	; (8001128 <HAL_DAC_MspInit+0x88>)
 80010c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80010cc:	6593      	str	r3, [r2, #88]	; 0x58
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <HAL_DAC_MspInit+0x88>)
 80010d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <HAL_DAC_MspInit+0x88>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	4a12      	ldr	r2, [pc, #72]	; (8001128 <HAL_DAC_MspInit+0x88>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <HAL_DAC_MspInit+0x88>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010f2:	2310      	movs	r3, #16
 80010f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f6:	2303      	movs	r3, #3
 80010f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001108:	f001 f84a 	bl	80021a0 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	2100      	movs	r1, #0
 8001110:	2036      	movs	r0, #54	; 0x36
 8001112:	f000 fa82 	bl	800161a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001116:	2036      	movs	r0, #54	; 0x36
 8001118:	f000 fa9b 	bl	8001652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800111c:	bf00      	nop
 800111e:	3728      	adds	r7, #40	; 0x28
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40007400 	.word	0x40007400
 8001128:	40021000 	.word	0x40021000

0800112c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800113c:	d13e      	bne.n	80011bc <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800113e:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <HAL_TIM_Base_MspInit+0x98>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001142:	4a20      	ldr	r2, [pc, #128]	; (80011c4 <HAL_TIM_Base_MspInit+0x98>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6593      	str	r3, [r2, #88]	; 0x58
 800114a:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <HAL_TIM_Base_MspInit+0x98>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Channel2;
 8001156:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <HAL_TIM_Base_MspInit+0x9c>)
 8001158:	4a1c      	ldr	r2, [pc, #112]	; (80011cc <HAL_TIM_Base_MspInit+0xa0>)
 800115a:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Request = DMA_REQUEST_4;
 800115c:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <HAL_TIM_Base_MspInit+0x9c>)
 800115e:	2204      	movs	r2, #4
 8001160:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001162:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <HAL_TIM_Base_MspInit+0x9c>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <HAL_TIM_Base_MspInit+0x9c>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <HAL_TIM_Base_MspInit+0x9c>)
 8001170:	2280      	movs	r2, #128	; 0x80
 8001172:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <HAL_TIM_Base_MspInit+0x9c>)
 8001176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800117a:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_TIM_Base_MspInit+0x9c>)
 800117e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001182:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Mode = DMA_CIRCULAR;
 8001184:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <HAL_TIM_Base_MspInit+0x9c>)
 8001186:	2220      	movs	r2, #32
 8001188:	61da      	str	r2, [r3, #28]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_LOW;
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <HAL_TIM_Base_MspInit+0x9c>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 8001190:	480d      	ldr	r0, [pc, #52]	; (80011c8 <HAL_TIM_Base_MspInit+0x9c>)
 8001192:	f000 fdcf 	bl	8001d34 <HAL_DMA_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 800119c:	f7ff ff54 	bl	8001048 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a09      	ldr	r2, [pc, #36]	; (80011c8 <HAL_TIM_Base_MspInit+0x9c>)
 80011a4:	621a      	str	r2, [r3, #32]
 80011a6:	4a08      	ldr	r2, [pc, #32]	; (80011c8 <HAL_TIM_Base_MspInit+0x9c>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2100      	movs	r1, #0
 80011b0:	201c      	movs	r0, #28
 80011b2:	f000 fa32 	bl	800161a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011b6:	201c      	movs	r0, #28
 80011b8:	f000 fa4b 	bl	8001652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011bc:	bf00      	nop
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40021000 	.word	0x40021000
 80011c8:	200000c8 	.word	0x200000c8
 80011cc:	4002001c 	.word	0x4002001c

080011d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e2:	e7fe      	b.n	80011e2 <HardFault_Handler+0x4>

080011e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <MemManage_Handler+0x4>

080011ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ee:	e7fe      	b.n	80011ee <BusFault_Handler+0x4>

080011f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <UsageFault_Handler+0x4>

080011f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001224:	f000 f8dc 	bl	80013e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}

0800122c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 8001230:	4802      	ldr	r0, [pc, #8]	; (800123c <DMA1_Channel2_IRQHandler+0x10>)
 8001232:	f000 fed5 	bl	8001fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200000c8 	.word	0x200000c8

08001240 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001244:	4802      	ldr	r0, [pc, #8]	; (8001250 <TIM2_IRQHandler+0x10>)
 8001246:	f002 f861 	bl	800330c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200002d8 	.word	0x200002d8

08001254 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001258:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800125c:	f001 f960 	bl	8002520 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <TIM6_DAC_IRQHandler+0x10>)
 800126a:	f000 fb32 	bl	80018d2 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000002c 	.word	0x2000002c

08001278 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800127c:	4b17      	ldr	r3, [pc, #92]	; (80012dc <SystemInit+0x64>)
 800127e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001282:	4a16      	ldr	r2, [pc, #88]	; (80012dc <SystemInit+0x64>)
 8001284:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <SystemInit+0x68>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a13      	ldr	r2, [pc, #76]	; (80012e0 <SystemInit+0x68>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <SystemInit+0x68>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <SystemInit+0x68>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a0f      	ldr	r2, [pc, #60]	; (80012e0 <SystemInit+0x68>)
 80012a4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80012a8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80012ac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <SystemInit+0x68>)
 80012b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012b4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <SystemInit+0x68>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a09      	ldr	r2, [pc, #36]	; (80012e0 <SystemInit+0x68>)
 80012bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <SystemInit+0x68>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <SystemInit+0x64>)
 80012ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012ce:	609a      	str	r2, [r3, #8]
#endif
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e000ed00 	.word	0xe000ed00
 80012e0:	40021000 	.word	0x40021000

080012e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800131c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012e8:	f7ff ffc6 	bl	8001278 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80012ec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80012ee:	e003      	b.n	80012f8 <LoopCopyDataInit>

080012f0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80012f2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80012f4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80012f6:	3104      	adds	r1, #4

080012f8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80012f8:	480a      	ldr	r0, [pc, #40]	; (8001324 <LoopForever+0xa>)
	ldr	r3, =_edata
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <LoopForever+0xe>)
	adds	r2, r0, r1
 80012fc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80012fe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001300:	d3f6      	bcc.n	80012f0 <CopyDataInit>
	ldr	r2, =_sbss
 8001302:	4a0a      	ldr	r2, [pc, #40]	; (800132c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001304:	e002      	b.n	800130c <LoopFillZerobss>

08001306 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001306:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001308:	f842 3b04 	str.w	r3, [r2], #4

0800130c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <LoopForever+0x16>)
	cmp	r2, r3
 800130e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001310:	d3f9      	bcc.n	8001306 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001312:	f002 fc25 	bl	8003b60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001316:	f7ff fb97 	bl	8000a48 <main>

0800131a <LoopForever>:

LoopForever:
    b LoopForever
 800131a:	e7fe      	b.n	800131a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800131c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001320:	0800441c 	.word	0x0800441c
	ldr	r0, =_sdata
 8001324:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001328:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 800132c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001330:	20000328 	.word	0x20000328

08001334 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001334:	e7fe      	b.n	8001334 <ADC1_2_IRQHandler>

08001336 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800133c:	2300      	movs	r3, #0
 800133e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001340:	2003      	movs	r0, #3
 8001342:	f000 f95f 	bl	8001604 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001346:	2000      	movs	r0, #0
 8001348:	f000 f80e 	bl	8001368 <HAL_InitTick>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d002      	beq.n	8001358 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	71fb      	strb	r3, [r7, #7]
 8001356:	e001      	b.n	800135c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001358:	f7ff fe7e 	bl	8001058 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800135c:	79fb      	ldrb	r3, [r7, #7]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001374:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <HAL_InitTick+0x6c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d023      	beq.n	80013c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800137c:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <HAL_InitTick+0x70>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <HAL_InitTick+0x6c>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4619      	mov	r1, r3
 8001386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138a:	fbb3 f3f1 	udiv	r3, r3, r1
 800138e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f000 f96b 	bl	800166e <HAL_SYSTICK_Config>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10f      	bne.n	80013be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b0f      	cmp	r3, #15
 80013a2:	d809      	bhi.n	80013b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a4:	2200      	movs	r2, #0
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013ac:	f000 f935 	bl	800161a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013b0:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <HAL_InitTick+0x74>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	e007      	b.n	80013c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	e004      	b.n	80013c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	73fb      	strb	r3, [r7, #15]
 80013c2:	e001      	b.n	80013c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2000000c 	.word	0x2000000c
 80013d8:	20000004 	.word	0x20000004
 80013dc:	20000008 	.word	0x20000008

080013e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_IncTick+0x20>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_IncTick+0x24>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	4a04      	ldr	r2, [pc, #16]	; (8001404 <HAL_IncTick+0x24>)
 80013f2:	6013      	str	r3, [r2, #0]
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	2000000c 	.word	0x2000000c
 8001404:	20000324 	.word	0x20000324

08001408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return uwTick;
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <HAL_GetTick+0x14>)
 800140e:	681b      	ldr	r3, [r3, #0]
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	20000324 	.word	0x20000324

08001420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001428:	f7ff ffee 	bl	8001408 <HAL_GetTick>
 800142c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001438:	d005      	beq.n	8001446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <HAL_Delay+0x40>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	461a      	mov	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4413      	add	r3, r2
 8001444:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001446:	bf00      	nop
 8001448:	f7ff ffde 	bl	8001408 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	429a      	cmp	r2, r3
 8001456:	d8f7      	bhi.n	8001448 <HAL_Delay+0x28>
  {
  }
}
 8001458:	bf00      	nop
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	2000000c 	.word	0x2000000c

08001464 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001480:	4013      	ands	r3, r2
 8001482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800148c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001496:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	60d3      	str	r3, [r2, #12]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b0:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <__NVIC_GetPriorityGrouping+0x18>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	f003 0307 	and.w	r3, r3, #7
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	db0b      	blt.n	80014f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	f003 021f 	and.w	r2, r3, #31
 80014e0:	4907      	ldr	r1, [pc, #28]	; (8001500 <__NVIC_EnableIRQ+0x38>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	095b      	lsrs	r3, r3, #5
 80014e8:	2001      	movs	r0, #1
 80014ea:	fa00 f202 	lsl.w	r2, r0, r2
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000e100 	.word	0xe000e100

08001504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	2b00      	cmp	r3, #0
 8001516:	db0a      	blt.n	800152e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	490c      	ldr	r1, [pc, #48]	; (8001550 <__NVIC_SetPriority+0x4c>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	0112      	lsls	r2, r2, #4
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	440b      	add	r3, r1
 8001528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800152c:	e00a      	b.n	8001544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4908      	ldr	r1, [pc, #32]	; (8001554 <__NVIC_SetPriority+0x50>)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	3b04      	subs	r3, #4
 800153c:	0112      	lsls	r2, r2, #4
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	440b      	add	r3, r1
 8001542:	761a      	strb	r2, [r3, #24]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000e100 	.word	0xe000e100
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	; 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f1c3 0307 	rsb	r3, r3, #7
 8001572:	2b04      	cmp	r3, #4
 8001574:	bf28      	it	cs
 8001576:	2304      	movcs	r3, #4
 8001578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3304      	adds	r3, #4
 800157e:	2b06      	cmp	r3, #6
 8001580:	d902      	bls.n	8001588 <NVIC_EncodePriority+0x30>
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3b03      	subs	r3, #3
 8001586:	e000      	b.n	800158a <NVIC_EncodePriority+0x32>
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43da      	mvns	r2, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	401a      	ands	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	43d9      	mvns	r1, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	4313      	orrs	r3, r2
         );
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3724      	adds	r7, #36	; 0x24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015d0:	d301      	bcc.n	80015d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d2:	2301      	movs	r3, #1
 80015d4:	e00f      	b.n	80015f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d6:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <SysTick_Config+0x40>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015de:	210f      	movs	r1, #15
 80015e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015e4:	f7ff ff8e 	bl	8001504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <SysTick_Config+0x40>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ee:	4b04      	ldr	r3, [pc, #16]	; (8001600 <SysTick_Config+0x40>)
 80015f0:	2207      	movs	r2, #7
 80015f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	e000e010 	.word	0xe000e010

08001604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff29 	bl	8001464 <__NVIC_SetPriorityGrouping>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	4603      	mov	r3, r0
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
 8001626:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800162c:	f7ff ff3e 	bl	80014ac <__NVIC_GetPriorityGrouping>
 8001630:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	68b9      	ldr	r1, [r7, #8]
 8001636:	6978      	ldr	r0, [r7, #20]
 8001638:	f7ff ff8e 	bl	8001558 <NVIC_EncodePriority>
 800163c:	4602      	mov	r2, r0
 800163e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001642:	4611      	mov	r1, r2
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff5d 	bl	8001504 <__NVIC_SetPriority>
}
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	4603      	mov	r3, r0
 800165a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800165c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff31 	bl	80014c8 <__NVIC_EnableIRQ>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff ffa2 	bl	80015c0 <SysTick_Config>
 800167c:	4603      	mov	r3, r0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d101      	bne.n	8001698 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e014      	b.n	80016c2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	791b      	ldrb	r3, [r3, #4]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d105      	bne.n	80016ae <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff fcf9 	bl	80010a0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2202      	movs	r2, #2
 80016b2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
 80016d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	795b      	ldrb	r3, [r3, #5]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d101      	bne.n	80016ea <HAL_DAC_Start_DMA+0x1e>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e09e      	b.n	8001828 <HAL_DAC_Start_DMA+0x15c>
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2201      	movs	r2, #1
 80016ee:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2202      	movs	r2, #2
 80016f4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d12a      	bne.n	8001752 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	4a4b      	ldr	r2, [pc, #300]	; (8001830 <HAL_DAC_Start_DMA+0x164>)
 8001702:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	4a4a      	ldr	r2, [pc, #296]	; (8001834 <HAL_DAC_Start_DMA+0x168>)
 800170a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	4a49      	ldr	r2, [pc, #292]	; (8001838 <HAL_DAC_Start_DMA+0x16c>)
 8001712:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001722:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001724:	6a3b      	ldr	r3, [r7, #32]
 8001726:	2b04      	cmp	r3, #4
 8001728:	d009      	beq.n	800173e <HAL_DAC_Start_DMA+0x72>
 800172a:	2b08      	cmp	r3, #8
 800172c:	d00c      	beq.n	8001748 <HAL_DAC_Start_DMA+0x7c>
 800172e:	2b00      	cmp	r3, #0
 8001730:	d000      	beq.n	8001734 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001732:	e039      	b.n	80017a8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	3308      	adds	r3, #8
 800173a:	613b      	str	r3, [r7, #16]
        break;
 800173c:	e034      	b.n	80017a8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	330c      	adds	r3, #12
 8001744:	613b      	str	r3, [r7, #16]
        break;
 8001746:	e02f      	b.n	80017a8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	3310      	adds	r3, #16
 800174e:	613b      	str	r3, [r7, #16]
        break;
 8001750:	e02a      	b.n	80017a8 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	4a39      	ldr	r2, [pc, #228]	; (800183c <HAL_DAC_Start_DMA+0x170>)
 8001758:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	4a38      	ldr	r2, [pc, #224]	; (8001840 <HAL_DAC_Start_DMA+0x174>)
 8001760:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	4a37      	ldr	r2, [pc, #220]	; (8001844 <HAL_DAC_Start_DMA+0x178>)
 8001768:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001778:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800177a:	6a3b      	ldr	r3, [r7, #32]
 800177c:	2b04      	cmp	r3, #4
 800177e:	d009      	beq.n	8001794 <HAL_DAC_Start_DMA+0xc8>
 8001780:	2b08      	cmp	r3, #8
 8001782:	d00c      	beq.n	800179e <HAL_DAC_Start_DMA+0xd2>
 8001784:	2b00      	cmp	r3, #0
 8001786:	d000      	beq.n	800178a <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001788:	e00e      	b.n	80017a8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	3314      	adds	r3, #20
 8001790:	613b      	str	r3, [r7, #16]
        break;
 8001792:	e009      	b.n	80017a8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	3318      	adds	r3, #24
 800179a:	613b      	str	r3, [r7, #16]
        break;
 800179c:	e004      	b.n	80017a8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	331c      	adds	r3, #28
 80017a4:	613b      	str	r3, [r7, #16]
        break;
 80017a6:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d111      	bne.n	80017d2 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017bc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6898      	ldr	r0, [r3, #8]
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	f000 fb6c 	bl	8001ea4 <HAL_DMA_Start_IT>
 80017cc:	4603      	mov	r3, r0
 80017ce:	75fb      	strb	r3, [r7, #23]
 80017d0:	e010      	b.n	80017f4 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80017e0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	68d8      	ldr	r0, [r3, #12]
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	f000 fb5a 	bl	8001ea4 <HAL_DMA_Start_IT>
 80017f0:	4603      	mov	r3, r0
 80017f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80017fa:	7dfb      	ldrb	r3, [r7, #23]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d10c      	bne.n	800181a <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6819      	ldr	r1, [r3, #0]
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	f003 0310 	and.w	r3, r3, #16
 800180c:	2201      	movs	r2, #1
 800180e:	409a      	lsls	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	430a      	orrs	r2, r1
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	e005      	b.n	8001826 <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	f043 0204 	orr.w	r2, r3, #4
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001826:	7dfb      	ldrb	r3, [r7, #23]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	08001c0b 	.word	0x08001c0b
 8001834:	08001c2d 	.word	0x08001c2d
 8001838:	08001c49 	.word	0x08001c49
 800183c:	08001cc7 	.word	0x08001cc7
 8001840:	08001ce9 	.word	0x08001ce9
 8001844:	08001d05 	.word	0x08001d05

08001848 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6819      	ldr	r1, [r3, #0]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	f003 0310 	and.w	r3, r3, #16
 800185e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43da      	mvns	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	400a      	ands	r2, r1
 800186e:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6819      	ldr	r1, [r3, #0]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	f003 0310 	and.w	r3, r3, #16
 800187c:	2201      	movs	r2, #1
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43da      	mvns	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	400a      	ands	r2, r1
 800188a:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10d      	bne.n	80018ae <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	4618      	mov	r0, r3
 8001898:	f000 fb64 	bl	8001f64 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	e00c      	b.n	80018c8 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 fb56 	bl	8001f64 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80018c6:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018e8:	d120      	bne.n	800192c <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018f8:	d118      	bne.n	800192c <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2204      	movs	r2, #4
 80018fe:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	f043 0201 	orr.w	r2, r3, #1
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001914:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001924:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 f84b 	bl	80019c2 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001936:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800193a:	d120      	bne.n	800197e <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001942:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800194a:	d118      	bne.n	800197e <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2204      	movs	r2, #4
 8001950:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	f043 0202 	orr.w	r2, r3, #2
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001966:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001976:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 f99a 	bl	8001cb2 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b088      	sub	sp, #32
 80019da:	af00      	add	r7, sp, #0
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	795b      	ldrb	r3, [r3, #5]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <HAL_DAC_ConfigChannel+0x1c>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e107      	b.n	8001c02 <HAL_DAC_ConfigChannel+0x22c>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2201      	movs	r2, #1
 80019f6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2202      	movs	r2, #2
 80019fc:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d174      	bne.n	8001af0 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001a06:	f7ff fcff 	bl	8001408 <HAL_GetTick>
 8001a0a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d134      	bne.n	8001a7c <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001a12:	e011      	b.n	8001a38 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001a14:	f7ff fcf8 	bl	8001408 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d90a      	bls.n	8001a38 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	f043 0208 	orr.w	r2, r3, #8
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2203      	movs	r2, #3
 8001a32:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e0e4      	b.n	8001c02 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1e6      	bne.n	8001a14 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001a46:	2001      	movs	r0, #1
 8001a48:	f7ff fcea 	bl	8001420 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	6992      	ldr	r2, [r2, #24]
 8001a54:	641a      	str	r2, [r3, #64]	; 0x40
 8001a56:	e01e      	b.n	8001a96 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001a58:	f7ff fcd6 	bl	8001408 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d90a      	bls.n	8001a7c <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	f043 0208 	orr.w	r2, r3, #8
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2203      	movs	r2, #3
 8001a76:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e0c2      	b.n	8001c02 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	dbe8      	blt.n	8001a58 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001a86:	2001      	movs	r0, #1
 8001a88:	f7ff fcca 	bl	8001420 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68ba      	ldr	r2, [r7, #8]
 8001a92:	6992      	ldr	r2, [r2, #24]
 8001a94:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f003 0310 	and.w	r3, r3, #16
 8001aa2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	ea02 0103 	and.w	r1, r2, r3
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	69da      	ldr	r2, [r3, #28]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f003 0310 	and.w	r3, r3, #16
 8001aba:	409a      	lsls	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f003 0310 	and.w	r3, r3, #16
 8001ad0:	21ff      	movs	r1, #255	; 0xff
 8001ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	ea02 0103 	and.w	r1, r2, r3
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	6a1a      	ldr	r2, [r3, #32]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	409a      	lsls	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d11d      	bne.n	8001b34 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001afe:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f003 0310 	and.w	r3, r3, #16
 8001b06:	221f      	movs	r2, #31
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f003 0310 	and.w	r3, r3, #16
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b3a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	2207      	movs	r2, #7
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f003 0310 	and.w	r3, r3, #16
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6819      	ldr	r1, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f003 0310 	and.w	r3, r3, #16
 8001b88:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43da      	mvns	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	400a      	ands	r2, r1
 8001b98:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f003 0310 	and.w	r3, r3, #16
 8001ba8:	f640 72fc 	movw	r2, #4092	; 0xffc
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f003 0310 	and.w	r3, r3, #16
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6819      	ldr	r1, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f003 0310 	and.w	r3, r3, #16
 8001be4:	22c0      	movs	r2, #192	; 0xc0
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43da      	mvns	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	400a      	ands	r2, r1
 8001bf2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3720      	adds	r7, #32
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b084      	sub	sp, #16
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c16:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f7ff feb4 	bl	8001986 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2201      	movs	r2, #1
 8001c22:	711a      	strb	r2, [r3, #4]
}
 8001c24:	bf00      	nop
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c38:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f7ff fead 	bl	800199a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001c40:	bf00      	nop
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c54:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	f043 0204 	orr.w	r2, r3, #4
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f7ff fea3 	bl	80019ae <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	711a      	strb	r2, [r3, #4]
}
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b084      	sub	sp, #16
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f7ff ffce 	bl	8001c76 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	711a      	strb	r2, [r3, #4]
}
 8001ce0:	bf00      	nop
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf4:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f7ff ffc7 	bl	8001c8a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001cfc:	bf00      	nop
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d10:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	f043 0204 	orr.w	r2, r3, #4
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f7ff ffbd 	bl	8001c9e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2201      	movs	r2, #1
 8001d28:	711a      	strb	r2, [r3, #4]
}
 8001d2a:	bf00      	nop
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e098      	b.n	8001e78 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4b4d      	ldr	r3, [pc, #308]	; (8001e84 <HAL_DMA_Init+0x150>)
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d80f      	bhi.n	8001d72 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	4b4b      	ldr	r3, [pc, #300]	; (8001e88 <HAL_DMA_Init+0x154>)
 8001d5a:	4413      	add	r3, r2
 8001d5c:	4a4b      	ldr	r2, [pc, #300]	; (8001e8c <HAL_DMA_Init+0x158>)
 8001d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d62:	091b      	lsrs	r3, r3, #4
 8001d64:	009a      	lsls	r2, r3, #2
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a48      	ldr	r2, [pc, #288]	; (8001e90 <HAL_DMA_Init+0x15c>)
 8001d6e:	641a      	str	r2, [r3, #64]	; 0x40
 8001d70:	e00e      	b.n	8001d90 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	4b46      	ldr	r3, [pc, #280]	; (8001e94 <HAL_DMA_Init+0x160>)
 8001d7a:	4413      	add	r3, r2
 8001d7c:	4a43      	ldr	r2, [pc, #268]	; (8001e8c <HAL_DMA_Init+0x158>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	091b      	lsrs	r3, r3, #4
 8001d84:	009a      	lsls	r2, r3, #2
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a42      	ldr	r2, [pc, #264]	; (8001e98 <HAL_DMA_Init+0x164>)
 8001d8e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2202      	movs	r2, #2
 8001d94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001daa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001db4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dea:	d039      	beq.n	8001e60 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	4a27      	ldr	r2, [pc, #156]	; (8001e90 <HAL_DMA_Init+0x15c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d11a      	bne.n	8001e2c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001df6:	4b29      	ldr	r3, [pc, #164]	; (8001e9c <HAL_DMA_Init+0x168>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	f003 031c 	and.w	r3, r3, #28
 8001e02:	210f      	movs	r1, #15
 8001e04:	fa01 f303 	lsl.w	r3, r1, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	4924      	ldr	r1, [pc, #144]	; (8001e9c <HAL_DMA_Init+0x168>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001e10:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <HAL_DMA_Init+0x168>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6859      	ldr	r1, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1c:	f003 031c 	and.w	r3, r3, #28
 8001e20:	fa01 f303 	lsl.w	r3, r1, r3
 8001e24:	491d      	ldr	r1, [pc, #116]	; (8001e9c <HAL_DMA_Init+0x168>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]
 8001e2a:	e019      	b.n	8001e60 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001e2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ea0 <HAL_DMA_Init+0x16c>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e34:	f003 031c 	and.w	r3, r3, #28
 8001e38:	210f      	movs	r1, #15
 8001e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	4917      	ldr	r1, [pc, #92]	; (8001ea0 <HAL_DMA_Init+0x16c>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001e46:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <HAL_DMA_Init+0x16c>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6859      	ldr	r1, [r3, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	f003 031c 	and.w	r3, r3, #28
 8001e56:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5a:	4911      	ldr	r1, [pc, #68]	; (8001ea0 <HAL_DMA_Init+0x16c>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	40020407 	.word	0x40020407
 8001e88:	bffdfff8 	.word	0xbffdfff8
 8001e8c:	cccccccd 	.word	0xcccccccd
 8001e90:	40020000 	.word	0x40020000
 8001e94:	bffdfbf8 	.word	0xbffdfbf8
 8001e98:	40020400 	.word	0x40020400
 8001e9c:	400200a8 	.word	0x400200a8
 8001ea0:	400204a8 	.word	0x400204a8

08001ea4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d101      	bne.n	8001ec4 <HAL_DMA_Start_IT+0x20>
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e04b      	b.n	8001f5c <HAL_DMA_Start_IT+0xb8>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d13a      	bne.n	8001f4e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2202      	movs	r2, #2
 8001edc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0201 	bic.w	r2, r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	68b9      	ldr	r1, [r7, #8]
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f000 f91e 	bl	800213e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d008      	beq.n	8001f1c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f042 020e 	orr.w	r2, r2, #14
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	e00f      	b.n	8001f3c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0204 	bic.w	r2, r2, #4
 8001f2a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 020a 	orr.w	r2, r2, #10
 8001f3a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0201 	orr.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	e005      	b.n	8001f5a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f56:	2302      	movs	r3, #2
 8001f58:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d008      	beq.n	8001f8e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2204      	movs	r2, #4
 8001f80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e022      	b.n	8001fd4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 020e 	bic.w	r2, r2, #14
 8001f9c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0201 	bic.w	r2, r2, #1
 8001fac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	f003 021c 	and.w	r2, r3, #28
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	2101      	movs	r1, #1
 8001fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffc:	f003 031c 	and.w	r3, r3, #28
 8002000:	2204      	movs	r2, #4
 8002002:	409a      	lsls	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4013      	ands	r3, r2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d026      	beq.n	800205a <HAL_DMA_IRQHandler+0x7a>
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	2b00      	cmp	r3, #0
 8002014:	d021      	beq.n	800205a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0320 	and.w	r3, r3, #32
 8002020:	2b00      	cmp	r3, #0
 8002022:	d107      	bne.n	8002034 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0204 	bic.w	r2, r2, #4
 8002032:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002038:	f003 021c 	and.w	r2, r3, #28
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	2104      	movs	r1, #4
 8002042:	fa01 f202 	lsl.w	r2, r1, r2
 8002046:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	2b00      	cmp	r3, #0
 800204e:	d071      	beq.n	8002134 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002058:	e06c      	b.n	8002134 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	f003 031c 	and.w	r3, r3, #28
 8002062:	2202      	movs	r2, #2
 8002064:	409a      	lsls	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4013      	ands	r3, r2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d02e      	beq.n	80020cc <HAL_DMA_IRQHandler+0xec>
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d029      	beq.n	80020cc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0320 	and.w	r3, r3, #32
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10b      	bne.n	800209e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 020a 	bic.w	r2, r2, #10
 8002094:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	f003 021c 	and.w	r2, r3, #28
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	2102      	movs	r1, #2
 80020ac:	fa01 f202 	lsl.w	r2, r1, r2
 80020b0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d038      	beq.n	8002134 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80020ca:	e033      	b.n	8002134 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d0:	f003 031c 	and.w	r3, r3, #28
 80020d4:	2208      	movs	r2, #8
 80020d6:	409a      	lsls	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4013      	ands	r3, r2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d02a      	beq.n	8002136 <HAL_DMA_IRQHandler+0x156>
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d025      	beq.n	8002136 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 020e 	bic.w	r2, r2, #14
 80020f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	f003 021c 	and.w	r2, r3, #28
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	2101      	movs	r1, #1
 8002108:	fa01 f202 	lsl.w	r2, r1, r2
 800210c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002128:	2b00      	cmp	r3, #0
 800212a:	d004      	beq.n	8002136 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002134:	bf00      	nop
 8002136:	bf00      	nop
}
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800213e:	b480      	push	{r7}
 8002140:	b085      	sub	sp, #20
 8002142:	af00      	add	r7, sp, #0
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
 800214a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002150:	f003 021c 	and.w	r2, r3, #28
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	2101      	movs	r1, #1
 800215a:	fa01 f202 	lsl.w	r2, r1, r2
 800215e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	2b10      	cmp	r3, #16
 800216e:	d108      	bne.n	8002182 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002180:	e007      	b.n	8002192 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	60da      	str	r2, [r3, #12]
}
 8002192:	bf00      	nop
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b087      	sub	sp, #28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ae:	e17f      	b.n	80024b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	2101      	movs	r1, #1
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	fa01 f303 	lsl.w	r3, r1, r3
 80021bc:	4013      	ands	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 8171 	beq.w	80024aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d00b      	beq.n	80021e8 <HAL_GPIO_Init+0x48>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d007      	beq.n	80021e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021dc:	2b11      	cmp	r3, #17
 80021de:	d003      	beq.n	80021e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b12      	cmp	r3, #18
 80021e6:	d130      	bne.n	800224a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	2203      	movs	r2, #3
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4313      	orrs	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800221e:	2201      	movs	r2, #1
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	4013      	ands	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	091b      	lsrs	r3, r3, #4
 8002234:	f003 0201 	and.w	r2, r3, #1
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	2b03      	cmp	r3, #3
 8002254:	d118      	bne.n	8002288 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800225c:	2201      	movs	r2, #1
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4013      	ands	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	08db      	lsrs	r3, r3, #3
 8002272:	f003 0201 	and.w	r2, r3, #1
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	2203      	movs	r2, #3
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4013      	ands	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_Init+0x128>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b12      	cmp	r3, #18
 80022c6:	d123      	bne.n	8002310 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	08da      	lsrs	r2, r3, #3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3208      	adds	r2, #8
 80022d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	220f      	movs	r2, #15
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4013      	ands	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	691a      	ldr	r2, [r3, #16]
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	08da      	lsrs	r2, r3, #3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3208      	adds	r2, #8
 800230a:	6939      	ldr	r1, [r7, #16]
 800230c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	2203      	movs	r2, #3
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 0203 	and.w	r2, r3, #3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 80ac 	beq.w	80024aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002352:	4b5e      	ldr	r3, [pc, #376]	; (80024cc <HAL_GPIO_Init+0x32c>)
 8002354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002356:	4a5d      	ldr	r2, [pc, #372]	; (80024cc <HAL_GPIO_Init+0x32c>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	6613      	str	r3, [r2, #96]	; 0x60
 800235e:	4b5b      	ldr	r3, [pc, #364]	; (80024cc <HAL_GPIO_Init+0x32c>)
 8002360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800236a:	4a59      	ldr	r2, [pc, #356]	; (80024d0 <HAL_GPIO_Init+0x330>)
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	089b      	lsrs	r3, r3, #2
 8002370:	3302      	adds	r3, #2
 8002372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002376:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	220f      	movs	r2, #15
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4013      	ands	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002394:	d025      	beq.n	80023e2 <HAL_GPIO_Init+0x242>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a4e      	ldr	r2, [pc, #312]	; (80024d4 <HAL_GPIO_Init+0x334>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d01f      	beq.n	80023de <HAL_GPIO_Init+0x23e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a4d      	ldr	r2, [pc, #308]	; (80024d8 <HAL_GPIO_Init+0x338>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d019      	beq.n	80023da <HAL_GPIO_Init+0x23a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a4c      	ldr	r2, [pc, #304]	; (80024dc <HAL_GPIO_Init+0x33c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d013      	beq.n	80023d6 <HAL_GPIO_Init+0x236>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a4b      	ldr	r2, [pc, #300]	; (80024e0 <HAL_GPIO_Init+0x340>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d00d      	beq.n	80023d2 <HAL_GPIO_Init+0x232>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a4a      	ldr	r2, [pc, #296]	; (80024e4 <HAL_GPIO_Init+0x344>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d007      	beq.n	80023ce <HAL_GPIO_Init+0x22e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a49      	ldr	r2, [pc, #292]	; (80024e8 <HAL_GPIO_Init+0x348>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d101      	bne.n	80023ca <HAL_GPIO_Init+0x22a>
 80023c6:	2306      	movs	r3, #6
 80023c8:	e00c      	b.n	80023e4 <HAL_GPIO_Init+0x244>
 80023ca:	2307      	movs	r3, #7
 80023cc:	e00a      	b.n	80023e4 <HAL_GPIO_Init+0x244>
 80023ce:	2305      	movs	r3, #5
 80023d0:	e008      	b.n	80023e4 <HAL_GPIO_Init+0x244>
 80023d2:	2304      	movs	r3, #4
 80023d4:	e006      	b.n	80023e4 <HAL_GPIO_Init+0x244>
 80023d6:	2303      	movs	r3, #3
 80023d8:	e004      	b.n	80023e4 <HAL_GPIO_Init+0x244>
 80023da:	2302      	movs	r3, #2
 80023dc:	e002      	b.n	80023e4 <HAL_GPIO_Init+0x244>
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <HAL_GPIO_Init+0x244>
 80023e2:	2300      	movs	r3, #0
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	f002 0203 	and.w	r2, r2, #3
 80023ea:	0092      	lsls	r2, r2, #2
 80023ec:	4093      	lsls	r3, r2
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023f4:	4936      	ldr	r1, [pc, #216]	; (80024d0 <HAL_GPIO_Init+0x330>)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	089b      	lsrs	r3, r3, #2
 80023fa:	3302      	adds	r3, #2
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002402:	4b3a      	ldr	r3, [pc, #232]	; (80024ec <HAL_GPIO_Init+0x34c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	43db      	mvns	r3, r3
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4013      	ands	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4313      	orrs	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002426:	4a31      	ldr	r2, [pc, #196]	; (80024ec <HAL_GPIO_Init+0x34c>)
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800242c:	4b2f      	ldr	r3, [pc, #188]	; (80024ec <HAL_GPIO_Init+0x34c>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	43db      	mvns	r3, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002450:	4a26      	ldr	r2, [pc, #152]	; (80024ec <HAL_GPIO_Init+0x34c>)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002456:	4b25      	ldr	r3, [pc, #148]	; (80024ec <HAL_GPIO_Init+0x34c>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	43db      	mvns	r3, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800247a:	4a1c      	ldr	r2, [pc, #112]	; (80024ec <HAL_GPIO_Init+0x34c>)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002480:	4b1a      	ldr	r3, [pc, #104]	; (80024ec <HAL_GPIO_Init+0x34c>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	43db      	mvns	r3, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024a4:	4a11      	ldr	r2, [pc, #68]	; (80024ec <HAL_GPIO_Init+0x34c>)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	3301      	adds	r3, #1
 80024ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f47f ae78 	bne.w	80021b0 <HAL_GPIO_Init+0x10>
  }
}
 80024c0:	bf00      	nop
 80024c2:	371c      	adds	r7, #28
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40010000 	.word	0x40010000
 80024d4:	48000400 	.word	0x48000400
 80024d8:	48000800 	.word	0x48000800
 80024dc:	48000c00 	.word	0x48000c00
 80024e0:	48001000 	.word	0x48001000
 80024e4:	48001400 	.word	0x48001400
 80024e8:	48001800 	.word	0x48001800
 80024ec:	40010400 	.word	0x40010400

080024f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	807b      	strh	r3, [r7, #2]
 80024fc:	4613      	mov	r3, r2
 80024fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002500:	787b      	ldrb	r3, [r7, #1]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002506:	887a      	ldrh	r2, [r7, #2]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800250c:	e002      	b.n	8002514 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800250e:	887a      	ldrh	r2, [r7, #2]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800252a:	4b08      	ldr	r3, [pc, #32]	; (800254c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800252c:	695a      	ldr	r2, [r3, #20]
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	4013      	ands	r3, r2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d006      	beq.n	8002544 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002536:	4a05      	ldr	r2, [pc, #20]	; (800254c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800253c:	88fb      	ldrh	r3, [r7, #6]
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe fd30 	bl	8000fa4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002544:	bf00      	nop
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40010400 	.word	0x40010400

08002550 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002554:	4b04      	ldr	r3, [pc, #16]	; (8002568 <HAL_PWREx_GetVoltageRange+0x18>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40007000 	.word	0x40007000

0800256c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800257a:	d130      	bne.n	80025de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800257c:	4b23      	ldr	r3, [pc, #140]	; (800260c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002588:	d038      	beq.n	80025fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800258a:	4b20      	ldr	r3, [pc, #128]	; (800260c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002592:	4a1e      	ldr	r2, [pc, #120]	; (800260c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002594:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002598:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800259a:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2232      	movs	r2, #50	; 0x32
 80025a0:	fb02 f303 	mul.w	r3, r2, r3
 80025a4:	4a1b      	ldr	r2, [pc, #108]	; (8002614 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	0c9b      	lsrs	r3, r3, #18
 80025ac:	3301      	adds	r3, #1
 80025ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025b0:	e002      	b.n	80025b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	3b01      	subs	r3, #1
 80025b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025b8:	4b14      	ldr	r3, [pc, #80]	; (800260c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c4:	d102      	bne.n	80025cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f2      	bne.n	80025b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025cc:	4b0f      	ldr	r3, [pc, #60]	; (800260c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d8:	d110      	bne.n	80025fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e00f      	b.n	80025fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025de:	4b0b      	ldr	r3, [pc, #44]	; (800260c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ea:	d007      	beq.n	80025fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025ec:	4b07      	ldr	r3, [pc, #28]	; (800260c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025f4:	4a05      	ldr	r2, [pc, #20]	; (800260c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40007000 	.word	0x40007000
 8002610:	20000004 	.word	0x20000004
 8002614:	431bde83 	.word	0x431bde83

08002618 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e3d4      	b.n	8002dd4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800262a:	4ba1      	ldr	r3, [pc, #644]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002634:	4b9e      	ldr	r3, [pc, #632]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0310 	and.w	r3, r3, #16
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 80e4 	beq.w	8002814 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d007      	beq.n	8002662 <HAL_RCC_OscConfig+0x4a>
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	2b0c      	cmp	r3, #12
 8002656:	f040 808b 	bne.w	8002770 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	2b01      	cmp	r3, #1
 800265e:	f040 8087 	bne.w	8002770 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002662:	4b93      	ldr	r3, [pc, #588]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d005      	beq.n	800267a <HAL_RCC_OscConfig+0x62>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e3ac      	b.n	8002dd4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1a      	ldr	r2, [r3, #32]
 800267e:	4b8c      	ldr	r3, [pc, #560]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d004      	beq.n	8002694 <HAL_RCC_OscConfig+0x7c>
 800268a:	4b89      	ldr	r3, [pc, #548]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002692:	e005      	b.n	80026a0 <HAL_RCC_OscConfig+0x88>
 8002694:	4b86      	ldr	r3, [pc, #536]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 8002696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800269a:	091b      	lsrs	r3, r3, #4
 800269c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d223      	bcs.n	80026ec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 fd07 	bl	80030bc <RCC_SetFlashLatencyFromMSIRange>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e38d      	b.n	8002dd4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026b8:	4b7d      	ldr	r3, [pc, #500]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a7c      	ldr	r2, [pc, #496]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 80026be:	f043 0308 	orr.w	r3, r3, #8
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	4b7a      	ldr	r3, [pc, #488]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	4977      	ldr	r1, [pc, #476]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026d6:	4b76      	ldr	r3, [pc, #472]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	021b      	lsls	r3, r3, #8
 80026e4:	4972      	ldr	r1, [pc, #456]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	604b      	str	r3, [r1, #4]
 80026ea:	e025      	b.n	8002738 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026ec:	4b70      	ldr	r3, [pc, #448]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a6f      	ldr	r2, [pc, #444]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 80026f2:	f043 0308 	orr.w	r3, r3, #8
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	4b6d      	ldr	r3, [pc, #436]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	496a      	ldr	r1, [pc, #424]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800270a:	4b69      	ldr	r3, [pc, #420]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	021b      	lsls	r3, r3, #8
 8002718:	4965      	ldr	r1, [pc, #404]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 800271a:	4313      	orrs	r3, r2
 800271c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d109      	bne.n	8002738 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	4618      	mov	r0, r3
 800272a:	f000 fcc7 	bl	80030bc <RCC_SetFlashLatencyFromMSIRange>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e34d      	b.n	8002dd4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002738:	f000 fc36 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 800273c:	4601      	mov	r1, r0
 800273e:	4b5c      	ldr	r3, [pc, #368]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	4a5a      	ldr	r2, [pc, #360]	; (80028b4 <HAL_RCC_OscConfig+0x29c>)
 800274a:	5cd3      	ldrb	r3, [r2, r3]
 800274c:	f003 031f 	and.w	r3, r3, #31
 8002750:	fa21 f303 	lsr.w	r3, r1, r3
 8002754:	4a58      	ldr	r2, [pc, #352]	; (80028b8 <HAL_RCC_OscConfig+0x2a0>)
 8002756:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002758:	4b58      	ldr	r3, [pc, #352]	; (80028bc <HAL_RCC_OscConfig+0x2a4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f7fe fe03 	bl	8001368 <HAL_InitTick>
 8002762:	4603      	mov	r3, r0
 8002764:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d052      	beq.n	8002812 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	e331      	b.n	8002dd4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d032      	beq.n	80027de <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002778:	4b4d      	ldr	r3, [pc, #308]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a4c      	ldr	r2, [pc, #304]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002784:	f7fe fe40 	bl	8001408 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800278c:	f7fe fe3c 	bl	8001408 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e31a      	b.n	8002dd4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800279e:	4b44      	ldr	r3, [pc, #272]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027aa:	4b41      	ldr	r3, [pc, #260]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a40      	ldr	r2, [pc, #256]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 80027b0:	f043 0308 	orr.w	r3, r3, #8
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	4b3e      	ldr	r3, [pc, #248]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	493b      	ldr	r1, [pc, #236]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027c8:	4b39      	ldr	r3, [pc, #228]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	021b      	lsls	r3, r3, #8
 80027d6:	4936      	ldr	r1, [pc, #216]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	604b      	str	r3, [r1, #4]
 80027dc:	e01a      	b.n	8002814 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027de:	4b34      	ldr	r3, [pc, #208]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a33      	ldr	r2, [pc, #204]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 80027e4:	f023 0301 	bic.w	r3, r3, #1
 80027e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027ea:	f7fe fe0d 	bl	8001408 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027f2:	f7fe fe09 	bl	8001408 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e2e7      	b.n	8002dd4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002804:	4b2a      	ldr	r3, [pc, #168]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1f0      	bne.n	80027f2 <HAL_RCC_OscConfig+0x1da>
 8002810:	e000      	b.n	8002814 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002812:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b00      	cmp	r3, #0
 800281e:	d074      	beq.n	800290a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	2b08      	cmp	r3, #8
 8002824:	d005      	beq.n	8002832 <HAL_RCC_OscConfig+0x21a>
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	2b0c      	cmp	r3, #12
 800282a:	d10e      	bne.n	800284a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	2b03      	cmp	r3, #3
 8002830:	d10b      	bne.n	800284a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002832:	4b1f      	ldr	r3, [pc, #124]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d064      	beq.n	8002908 <HAL_RCC_OscConfig+0x2f0>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d160      	bne.n	8002908 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e2c4      	b.n	8002dd4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002852:	d106      	bne.n	8002862 <HAL_RCC_OscConfig+0x24a>
 8002854:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a15      	ldr	r2, [pc, #84]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 800285a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	e01d      	b.n	800289e <HAL_RCC_OscConfig+0x286>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800286a:	d10c      	bne.n	8002886 <HAL_RCC_OscConfig+0x26e>
 800286c:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a0f      	ldr	r2, [pc, #60]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 8002872:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	4b0d      	ldr	r3, [pc, #52]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a0c      	ldr	r2, [pc, #48]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 800287e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	e00b      	b.n	800289e <HAL_RCC_OscConfig+0x286>
 8002886:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a09      	ldr	r2, [pc, #36]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 800288c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a06      	ldr	r2, [pc, #24]	; (80028b0 <HAL_RCC_OscConfig+0x298>)
 8002898:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800289c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d01c      	beq.n	80028e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a6:	f7fe fdaf 	bl	8001408 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ac:	e011      	b.n	80028d2 <HAL_RCC_OscConfig+0x2ba>
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000
 80028b4:	08003bd0 	.word	0x08003bd0
 80028b8:	20000004 	.word	0x20000004
 80028bc:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c0:	f7fe fda2 	bl	8001408 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b64      	cmp	r3, #100	; 0x64
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e280      	b.n	8002dd4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028d2:	4baf      	ldr	r3, [pc, #700]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0x2a8>
 80028de:	e014      	b.n	800290a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e0:	f7fe fd92 	bl	8001408 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e8:	f7fe fd8e 	bl	8001408 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b64      	cmp	r3, #100	; 0x64
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e26c      	b.n	8002dd4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028fa:	4ba5      	ldr	r3, [pc, #660]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0x2d0>
 8002906:	e000      	b.n	800290a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d060      	beq.n	80029d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	2b04      	cmp	r3, #4
 800291a:	d005      	beq.n	8002928 <HAL_RCC_OscConfig+0x310>
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	2b0c      	cmp	r3, #12
 8002920:	d119      	bne.n	8002956 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d116      	bne.n	8002956 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002928:	4b99      	ldr	r3, [pc, #612]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <HAL_RCC_OscConfig+0x328>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e249      	b.n	8002dd4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002940:	4b93      	ldr	r3, [pc, #588]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	061b      	lsls	r3, r3, #24
 800294e:	4990      	ldr	r1, [pc, #576]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 8002950:	4313      	orrs	r3, r2
 8002952:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002954:	e040      	b.n	80029d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d023      	beq.n	80029a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800295e:	4b8c      	ldr	r3, [pc, #560]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a8b      	ldr	r2, [pc, #556]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 8002964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296a:	f7fe fd4d 	bl	8001408 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002972:	f7fe fd49 	bl	8001408 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e227      	b.n	8002dd4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002984:	4b82      	ldr	r3, [pc, #520]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0f0      	beq.n	8002972 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002990:	4b7f      	ldr	r3, [pc, #508]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	061b      	lsls	r3, r3, #24
 800299e:	497c      	ldr	r1, [pc, #496]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]
 80029a4:	e018      	b.n	80029d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029a6:	4b7a      	ldr	r3, [pc, #488]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a79      	ldr	r2, [pc, #484]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 80029ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b2:	f7fe fd29 	bl	8001408 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ba:	f7fe fd25 	bl	8001408 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e203      	b.n	8002dd4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029cc:	4b70      	ldr	r3, [pc, #448]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1f0      	bne.n	80029ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d03c      	beq.n	8002a5e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d01c      	beq.n	8002a26 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ec:	4b68      	ldr	r3, [pc, #416]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 80029ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f2:	4a67      	ldr	r2, [pc, #412]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fc:	f7fe fd04 	bl	8001408 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a04:	f7fe fd00 	bl	8001408 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e1de      	b.n	8002dd4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a16:	4b5e      	ldr	r3, [pc, #376]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 8002a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0ef      	beq.n	8002a04 <HAL_RCC_OscConfig+0x3ec>
 8002a24:	e01b      	b.n	8002a5e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a26:	4b5a      	ldr	r3, [pc, #360]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 8002a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a2c:	4a58      	ldr	r2, [pc, #352]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 8002a2e:	f023 0301 	bic.w	r3, r3, #1
 8002a32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a36:	f7fe fce7 	bl	8001408 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a3e:	f7fe fce3 	bl	8001408 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e1c1      	b.n	8002dd4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a50:	4b4f      	ldr	r3, [pc, #316]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 8002a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1ef      	bne.n	8002a3e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 80a6 	beq.w	8002bb8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a70:	4b47      	ldr	r3, [pc, #284]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 8002a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10d      	bne.n	8002a98 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a7c:	4b44      	ldr	r3, [pc, #272]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 8002a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a80:	4a43      	ldr	r2, [pc, #268]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 8002a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a86:	6593      	str	r3, [r2, #88]	; 0x58
 8002a88:	4b41      	ldr	r3, [pc, #260]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 8002a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a94:	2301      	movs	r3, #1
 8002a96:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a98:	4b3e      	ldr	r3, [pc, #248]	; (8002b94 <HAL_RCC_OscConfig+0x57c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d118      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aa4:	4b3b      	ldr	r3, [pc, #236]	; (8002b94 <HAL_RCC_OscConfig+0x57c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a3a      	ldr	r2, [pc, #232]	; (8002b94 <HAL_RCC_OscConfig+0x57c>)
 8002aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab0:	f7fe fcaa 	bl	8001408 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab8:	f7fe fca6 	bl	8001408 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e184      	b.n	8002dd4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aca:	4b32      	ldr	r3, [pc, #200]	; (8002b94 <HAL_RCC_OscConfig+0x57c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d108      	bne.n	8002af0 <HAL_RCC_OscConfig+0x4d8>
 8002ade:	4b2c      	ldr	r3, [pc, #176]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 8002ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae4:	4a2a      	ldr	r2, [pc, #168]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002aee:	e024      	b.n	8002b3a <HAL_RCC_OscConfig+0x522>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2b05      	cmp	r3, #5
 8002af6:	d110      	bne.n	8002b1a <HAL_RCC_OscConfig+0x502>
 8002af8:	4b25      	ldr	r3, [pc, #148]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afe:	4a24      	ldr	r2, [pc, #144]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 8002b00:	f043 0304 	orr.w	r3, r3, #4
 8002b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b08:	4b21      	ldr	r3, [pc, #132]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0e:	4a20      	ldr	r2, [pc, #128]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b18:	e00f      	b.n	8002b3a <HAL_RCC_OscConfig+0x522>
 8002b1a:	4b1d      	ldr	r3, [pc, #116]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 8002b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b20:	4a1b      	ldr	r2, [pc, #108]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 8002b22:	f023 0301 	bic.w	r3, r3, #1
 8002b26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b2a:	4b19      	ldr	r3, [pc, #100]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 8002b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b30:	4a17      	ldr	r2, [pc, #92]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 8002b32:	f023 0304 	bic.w	r3, r3, #4
 8002b36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d016      	beq.n	8002b70 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b42:	f7fe fc61 	bl	8001408 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b48:	e00a      	b.n	8002b60 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b4a:	f7fe fc5d 	bl	8001408 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e139      	b.n	8002dd4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b60:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <HAL_RCC_OscConfig+0x578>)
 8002b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0ed      	beq.n	8002b4a <HAL_RCC_OscConfig+0x532>
 8002b6e:	e01a      	b.n	8002ba6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b70:	f7fe fc4a 	bl	8001408 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b76:	e00f      	b.n	8002b98 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b78:	f7fe fc46 	bl	8001408 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d906      	bls.n	8002b98 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e122      	b.n	8002dd4 <HAL_RCC_OscConfig+0x7bc>
 8002b8e:	bf00      	nop
 8002b90:	40021000 	.word	0x40021000
 8002b94:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b98:	4b90      	ldr	r3, [pc, #576]	; (8002ddc <HAL_RCC_OscConfig+0x7c4>)
 8002b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1e8      	bne.n	8002b78 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ba6:	7ffb      	ldrb	r3, [r7, #31]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d105      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bac:	4b8b      	ldr	r3, [pc, #556]	; (8002ddc <HAL_RCC_OscConfig+0x7c4>)
 8002bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb0:	4a8a      	ldr	r2, [pc, #552]	; (8002ddc <HAL_RCC_OscConfig+0x7c4>)
 8002bb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bb6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 8108 	beq.w	8002dd2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	f040 80d0 	bne.w	8002d6c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002bcc:	4b83      	ldr	r3, [pc, #524]	; (8002ddc <HAL_RCC_OscConfig+0x7c4>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f003 0203 	and.w	r2, r3, #3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d130      	bne.n	8002c42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	3b01      	subs	r3, #1
 8002bec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d127      	bne.n	8002c42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bfc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d11f      	bne.n	8002c42 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c0c:	2a07      	cmp	r2, #7
 8002c0e:	bf14      	ite	ne
 8002c10:	2201      	movne	r2, #1
 8002c12:	2200      	moveq	r2, #0
 8002c14:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d113      	bne.n	8002c42 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c24:	085b      	lsrs	r3, r3, #1
 8002c26:	3b01      	subs	r3, #1
 8002c28:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d109      	bne.n	8002c42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	085b      	lsrs	r3, r3, #1
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d06e      	beq.n	8002d20 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	2b0c      	cmp	r3, #12
 8002c46:	d069      	beq.n	8002d1c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c48:	4b64      	ldr	r3, [pc, #400]	; (8002ddc <HAL_RCC_OscConfig+0x7c4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d105      	bne.n	8002c60 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c54:	4b61      	ldr	r3, [pc, #388]	; (8002ddc <HAL_RCC_OscConfig+0x7c4>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0b7      	b.n	8002dd4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c64:	4b5d      	ldr	r3, [pc, #372]	; (8002ddc <HAL_RCC_OscConfig+0x7c4>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a5c      	ldr	r2, [pc, #368]	; (8002ddc <HAL_RCC_OscConfig+0x7c4>)
 8002c6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c6e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c70:	f7fe fbca 	bl	8001408 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c78:	f7fe fbc6 	bl	8001408 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e0a4      	b.n	8002dd4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c8a:	4b54      	ldr	r3, [pc, #336]	; (8002ddc <HAL_RCC_OscConfig+0x7c4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c96:	4b51      	ldr	r3, [pc, #324]	; (8002ddc <HAL_RCC_OscConfig+0x7c4>)
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	4b51      	ldr	r3, [pc, #324]	; (8002de0 <HAL_RCC_OscConfig+0x7c8>)
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ca6:	3a01      	subs	r2, #1
 8002ca8:	0112      	lsls	r2, r2, #4
 8002caa:	4311      	orrs	r1, r2
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cb0:	0212      	lsls	r2, r2, #8
 8002cb2:	4311      	orrs	r1, r2
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002cb8:	0852      	lsrs	r2, r2, #1
 8002cba:	3a01      	subs	r2, #1
 8002cbc:	0552      	lsls	r2, r2, #21
 8002cbe:	4311      	orrs	r1, r2
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002cc4:	0852      	lsrs	r2, r2, #1
 8002cc6:	3a01      	subs	r2, #1
 8002cc8:	0652      	lsls	r2, r2, #25
 8002cca:	4311      	orrs	r1, r2
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cd0:	0912      	lsrs	r2, r2, #4
 8002cd2:	0452      	lsls	r2, r2, #17
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	4941      	ldr	r1, [pc, #260]	; (8002ddc <HAL_RCC_OscConfig+0x7c4>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cdc:	4b3f      	ldr	r3, [pc, #252]	; (8002ddc <HAL_RCC_OscConfig+0x7c4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a3e      	ldr	r2, [pc, #248]	; (8002ddc <HAL_RCC_OscConfig+0x7c4>)
 8002ce2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ce6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ce8:	4b3c      	ldr	r3, [pc, #240]	; (8002ddc <HAL_RCC_OscConfig+0x7c4>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	4a3b      	ldr	r2, [pc, #236]	; (8002ddc <HAL_RCC_OscConfig+0x7c4>)
 8002cee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cf2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cf4:	f7fe fb88 	bl	8001408 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cfc:	f7fe fb84 	bl	8001408 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e062      	b.n	8002dd4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d0e:	4b33      	ldr	r3, [pc, #204]	; (8002ddc <HAL_RCC_OscConfig+0x7c4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d1a:	e05a      	b.n	8002dd2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e059      	b.n	8002dd4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d20:	4b2e      	ldr	r3, [pc, #184]	; (8002ddc <HAL_RCC_OscConfig+0x7c4>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d152      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d2c:	4b2b      	ldr	r3, [pc, #172]	; (8002ddc <HAL_RCC_OscConfig+0x7c4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a2a      	ldr	r2, [pc, #168]	; (8002ddc <HAL_RCC_OscConfig+0x7c4>)
 8002d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d36:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d38:	4b28      	ldr	r3, [pc, #160]	; (8002ddc <HAL_RCC_OscConfig+0x7c4>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	4a27      	ldr	r2, [pc, #156]	; (8002ddc <HAL_RCC_OscConfig+0x7c4>)
 8002d3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d44:	f7fe fb60 	bl	8001408 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d4c:	f7fe fb5c 	bl	8001408 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e03a      	b.n	8002dd4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d5e:	4b1f      	ldr	r3, [pc, #124]	; (8002ddc <HAL_RCC_OscConfig+0x7c4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0x734>
 8002d6a:	e032      	b.n	8002dd2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	2b0c      	cmp	r3, #12
 8002d70:	d02d      	beq.n	8002dce <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d72:	4b1a      	ldr	r3, [pc, #104]	; (8002ddc <HAL_RCC_OscConfig+0x7c4>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a19      	ldr	r2, [pc, #100]	; (8002ddc <HAL_RCC_OscConfig+0x7c4>)
 8002d78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d7c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002d7e:	4b17      	ldr	r3, [pc, #92]	; (8002ddc <HAL_RCC_OscConfig+0x7c4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d105      	bne.n	8002d96 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d8a:	4b14      	ldr	r3, [pc, #80]	; (8002ddc <HAL_RCC_OscConfig+0x7c4>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	4a13      	ldr	r2, [pc, #76]	; (8002ddc <HAL_RCC_OscConfig+0x7c4>)
 8002d90:	f023 0303 	bic.w	r3, r3, #3
 8002d94:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d96:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <HAL_RCC_OscConfig+0x7c4>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	4a10      	ldr	r2, [pc, #64]	; (8002ddc <HAL_RCC_OscConfig+0x7c4>)
 8002d9c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da6:	f7fe fb2f 	bl	8001408 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dae:	f7fe fb2b 	bl	8001408 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e009      	b.n	8002dd4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dc0:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <HAL_RCC_OscConfig+0x7c4>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1f0      	bne.n	8002dae <HAL_RCC_OscConfig+0x796>
 8002dcc:	e001      	b.n	8002dd2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3720      	adds	r7, #32
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	f99d808c 	.word	0xf99d808c

08002de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e0c8      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002df8:	4b66      	ldr	r3, [pc, #408]	; (8002f94 <HAL_RCC_ClockConfig+0x1b0>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d910      	bls.n	8002e28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e06:	4b63      	ldr	r3, [pc, #396]	; (8002f94 <HAL_RCC_ClockConfig+0x1b0>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f023 0207 	bic.w	r2, r3, #7
 8002e0e:	4961      	ldr	r1, [pc, #388]	; (8002f94 <HAL_RCC_ClockConfig+0x1b0>)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e16:	4b5f      	ldr	r3, [pc, #380]	; (8002f94 <HAL_RCC_ClockConfig+0x1b0>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d001      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e0b0      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d04c      	beq.n	8002ece <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d107      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e3c:	4b56      	ldr	r3, [pc, #344]	; (8002f98 <HAL_RCC_ClockConfig+0x1b4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d121      	bne.n	8002e8c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e09e      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d107      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e54:	4b50      	ldr	r3, [pc, #320]	; (8002f98 <HAL_RCC_ClockConfig+0x1b4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d115      	bne.n	8002e8c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e092      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d107      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e6c:	4b4a      	ldr	r3, [pc, #296]	; (8002f98 <HAL_RCC_ClockConfig+0x1b4>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d109      	bne.n	8002e8c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e086      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e7c:	4b46      	ldr	r3, [pc, #280]	; (8002f98 <HAL_RCC_ClockConfig+0x1b4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e07e      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e8c:	4b42      	ldr	r3, [pc, #264]	; (8002f98 <HAL_RCC_ClockConfig+0x1b4>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f023 0203 	bic.w	r2, r3, #3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	493f      	ldr	r1, [pc, #252]	; (8002f98 <HAL_RCC_ClockConfig+0x1b4>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e9e:	f7fe fab3 	bl	8001408 <HAL_GetTick>
 8002ea2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea4:	e00a      	b.n	8002ebc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea6:	f7fe faaf 	bl	8001408 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e066      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ebc:	4b36      	ldr	r3, [pc, #216]	; (8002f98 <HAL_RCC_ClockConfig+0x1b4>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f003 020c 	and.w	r2, r3, #12
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d1eb      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d008      	beq.n	8002eec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eda:	4b2f      	ldr	r3, [pc, #188]	; (8002f98 <HAL_RCC_ClockConfig+0x1b4>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	492c      	ldr	r1, [pc, #176]	; (8002f98 <HAL_RCC_ClockConfig+0x1b4>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eec:	4b29      	ldr	r3, [pc, #164]	; (8002f94 <HAL_RCC_ClockConfig+0x1b0>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d210      	bcs.n	8002f1c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efa:	4b26      	ldr	r3, [pc, #152]	; (8002f94 <HAL_RCC_ClockConfig+0x1b0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f023 0207 	bic.w	r2, r3, #7
 8002f02:	4924      	ldr	r1, [pc, #144]	; (8002f94 <HAL_RCC_ClockConfig+0x1b0>)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0a:	4b22      	ldr	r3, [pc, #136]	; (8002f94 <HAL_RCC_ClockConfig+0x1b0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e036      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f28:	4b1b      	ldr	r3, [pc, #108]	; (8002f98 <HAL_RCC_ClockConfig+0x1b4>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	4918      	ldr	r1, [pc, #96]	; (8002f98 <HAL_RCC_ClockConfig+0x1b4>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d009      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f46:	4b14      	ldr	r3, [pc, #80]	; (8002f98 <HAL_RCC_ClockConfig+0x1b4>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4910      	ldr	r1, [pc, #64]	; (8002f98 <HAL_RCC_ClockConfig+0x1b4>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f5a:	f000 f825 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8002f5e:	4601      	mov	r1, r0
 8002f60:	4b0d      	ldr	r3, [pc, #52]	; (8002f98 <HAL_RCC_ClockConfig+0x1b4>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	091b      	lsrs	r3, r3, #4
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	4a0c      	ldr	r2, [pc, #48]	; (8002f9c <HAL_RCC_ClockConfig+0x1b8>)
 8002f6c:	5cd3      	ldrb	r3, [r2, r3]
 8002f6e:	f003 031f 	and.w	r3, r3, #31
 8002f72:	fa21 f303 	lsr.w	r3, r1, r3
 8002f76:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f7a:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fe f9f2 	bl	8001368 <HAL_InitTick>
 8002f84:	4603      	mov	r3, r0
 8002f86:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f88:	7afb      	ldrb	r3, [r7, #11]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40022000 	.word	0x40022000
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	08003bd0 	.word	0x08003bd0
 8002fa0:	20000004 	.word	0x20000004
 8002fa4:	20000008 	.word	0x20000008

08002fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	; 0x24
 8002fac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fb6:	4b3d      	ldr	r3, [pc, #244]	; (80030ac <HAL_RCC_GetSysClockFreq+0x104>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fc0:	4b3a      	ldr	r3, [pc, #232]	; (80030ac <HAL_RCC_GetSysClockFreq+0x104>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0x34>
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	2b0c      	cmp	r3, #12
 8002fd4:	d121      	bne.n	800301a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d11e      	bne.n	800301a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fdc:	4b33      	ldr	r3, [pc, #204]	; (80030ac <HAL_RCC_GetSysClockFreq+0x104>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d107      	bne.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fe8:	4b30      	ldr	r3, [pc, #192]	; (80030ac <HAL_RCC_GetSysClockFreq+0x104>)
 8002fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fee:	0a1b      	lsrs	r3, r3, #8
 8002ff0:	f003 030f 	and.w	r3, r3, #15
 8002ff4:	61fb      	str	r3, [r7, #28]
 8002ff6:	e005      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ff8:	4b2c      	ldr	r3, [pc, #176]	; (80030ac <HAL_RCC_GetSysClockFreq+0x104>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003004:	4a2a      	ldr	r2, [pc, #168]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800300c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10d      	bne.n	8003030 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003018:	e00a      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	2b04      	cmp	r3, #4
 800301e:	d102      	bne.n	8003026 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003020:	4b24      	ldr	r3, [pc, #144]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003022:	61bb      	str	r3, [r7, #24]
 8003024:	e004      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	2b08      	cmp	r3, #8
 800302a:	d101      	bne.n	8003030 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800302c:	4b22      	ldr	r3, [pc, #136]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x110>)
 800302e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	2b0c      	cmp	r3, #12
 8003034:	d133      	bne.n	800309e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003036:	4b1d      	ldr	r3, [pc, #116]	; (80030ac <HAL_RCC_GetSysClockFreq+0x104>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d002      	beq.n	800304c <HAL_RCC_GetSysClockFreq+0xa4>
 8003046:	2b03      	cmp	r3, #3
 8003048:	d003      	beq.n	8003052 <HAL_RCC_GetSysClockFreq+0xaa>
 800304a:	e005      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800304c:	4b19      	ldr	r3, [pc, #100]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800304e:	617b      	str	r3, [r7, #20]
      break;
 8003050:	e005      	b.n	800305e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003052:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003054:	617b      	str	r3, [r7, #20]
      break;
 8003056:	e002      	b.n	800305e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	617b      	str	r3, [r7, #20]
      break;
 800305c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800305e:	4b13      	ldr	r3, [pc, #76]	; (80030ac <HAL_RCC_GetSysClockFreq+0x104>)
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	091b      	lsrs	r3, r3, #4
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	3301      	adds	r3, #1
 800306a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800306c:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <HAL_RCC_GetSysClockFreq+0x104>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	0a1b      	lsrs	r3, r3, #8
 8003072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	fb02 f203 	mul.w	r2, r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003082:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003084:	4b09      	ldr	r3, [pc, #36]	; (80030ac <HAL_RCC_GetSysClockFreq+0x104>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	0e5b      	lsrs	r3, r3, #25
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	3301      	adds	r3, #1
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	fbb2 f3f3 	udiv	r3, r2, r3
 800309c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800309e:	69bb      	ldr	r3, [r7, #24]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3724      	adds	r7, #36	; 0x24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	40021000 	.word	0x40021000
 80030b0:	08003be0 	.word	0x08003be0
 80030b4:	00f42400 	.word	0x00f42400
 80030b8:	007a1200 	.word	0x007a1200

080030bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80030c4:	2300      	movs	r3, #0
 80030c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030c8:	4b2a      	ldr	r3, [pc, #168]	; (8003174 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030d4:	f7ff fa3c 	bl	8002550 <HAL_PWREx_GetVoltageRange>
 80030d8:	6178      	str	r0, [r7, #20]
 80030da:	e014      	b.n	8003106 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030dc:	4b25      	ldr	r3, [pc, #148]	; (8003174 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e0:	4a24      	ldr	r2, [pc, #144]	; (8003174 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e6:	6593      	str	r3, [r2, #88]	; 0x58
 80030e8:	4b22      	ldr	r3, [pc, #136]	; (8003174 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030f4:	f7ff fa2c 	bl	8002550 <HAL_PWREx_GetVoltageRange>
 80030f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030fa:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fe:	4a1d      	ldr	r2, [pc, #116]	; (8003174 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003104:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800310c:	d10b      	bne.n	8003126 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b80      	cmp	r3, #128	; 0x80
 8003112:	d919      	bls.n	8003148 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2ba0      	cmp	r3, #160	; 0xa0
 8003118:	d902      	bls.n	8003120 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800311a:	2302      	movs	r3, #2
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	e013      	b.n	8003148 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003120:	2301      	movs	r3, #1
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	e010      	b.n	8003148 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b80      	cmp	r3, #128	; 0x80
 800312a:	d902      	bls.n	8003132 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800312c:	2303      	movs	r3, #3
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	e00a      	b.n	8003148 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b80      	cmp	r3, #128	; 0x80
 8003136:	d102      	bne.n	800313e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003138:	2302      	movs	r3, #2
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	e004      	b.n	8003148 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b70      	cmp	r3, #112	; 0x70
 8003142:	d101      	bne.n	8003148 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003144:	2301      	movs	r3, #1
 8003146:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f023 0207 	bic.w	r2, r3, #7
 8003150:	4909      	ldr	r1, [pc, #36]	; (8003178 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003158:	4b07      	ldr	r3, [pc, #28]	; (8003178 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	429a      	cmp	r2, r3
 8003164:	d001      	beq.n	800316a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40021000 	.word	0x40021000
 8003178:	40022000 	.word	0x40022000

0800317c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e049      	b.n	8003222 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d106      	bne.n	80031a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7fd ffc2 	bl	800112c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2202      	movs	r2, #2
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3304      	adds	r3, #4
 80031b8:	4619      	mov	r1, r3
 80031ba:	4610      	mov	r0, r2
 80031bc:	f000 fab0 	bl	8003720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b01      	cmp	r3, #1
 800323e:	d001      	beq.n	8003244 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e04f      	b.n	80032e4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0201 	orr.w	r2, r2, #1
 800325a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a23      	ldr	r2, [pc, #140]	; (80032f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d01d      	beq.n	80032a2 <HAL_TIM_Base_Start_IT+0x76>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326e:	d018      	beq.n	80032a2 <HAL_TIM_Base_Start_IT+0x76>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a1f      	ldr	r2, [pc, #124]	; (80032f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d013      	beq.n	80032a2 <HAL_TIM_Base_Start_IT+0x76>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a1e      	ldr	r2, [pc, #120]	; (80032f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00e      	beq.n	80032a2 <HAL_TIM_Base_Start_IT+0x76>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a1c      	ldr	r2, [pc, #112]	; (80032fc <HAL_TIM_Base_Start_IT+0xd0>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d009      	beq.n	80032a2 <HAL_TIM_Base_Start_IT+0x76>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a1b      	ldr	r2, [pc, #108]	; (8003300 <HAL_TIM_Base_Start_IT+0xd4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d004      	beq.n	80032a2 <HAL_TIM_Base_Start_IT+0x76>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a19      	ldr	r2, [pc, #100]	; (8003304 <HAL_TIM_Base_Start_IT+0xd8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d115      	bne.n	80032ce <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	4b17      	ldr	r3, [pc, #92]	; (8003308 <HAL_TIM_Base_Start_IT+0xdc>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2b06      	cmp	r3, #6
 80032b2:	d015      	beq.n	80032e0 <HAL_TIM_Base_Start_IT+0xb4>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ba:	d011      	beq.n	80032e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0201 	orr.w	r2, r2, #1
 80032ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032cc:	e008      	b.n	80032e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f042 0201 	orr.w	r2, r2, #1
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	e000      	b.n	80032e2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	40012c00 	.word	0x40012c00
 80032f4:	40000400 	.word	0x40000400
 80032f8:	40000800 	.word	0x40000800
 80032fc:	40000c00 	.word	0x40000c00
 8003300:	40013400 	.word	0x40013400
 8003304:	40014000 	.word	0x40014000
 8003308:	00010007 	.word	0x00010007

0800330c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b02      	cmp	r3, #2
 8003320:	d122      	bne.n	8003368 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b02      	cmp	r3, #2
 800332e:	d11b      	bne.n	8003368 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f06f 0202 	mvn.w	r2, #2
 8003338:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f9c8 	bl	80036e4 <HAL_TIM_IC_CaptureCallback>
 8003354:	e005      	b.n	8003362 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f9ba 	bl	80036d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f9cb 	bl	80036f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b04      	cmp	r3, #4
 8003374:	d122      	bne.n	80033bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b04      	cmp	r3, #4
 8003382:	d11b      	bne.n	80033bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f06f 0204 	mvn.w	r2, #4
 800338c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2202      	movs	r2, #2
 8003392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f99e 	bl	80036e4 <HAL_TIM_IC_CaptureCallback>
 80033a8:	e005      	b.n	80033b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f990 	bl	80036d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f9a1 	bl	80036f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d122      	bne.n	8003410 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d11b      	bne.n	8003410 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f06f 0208 	mvn.w	r2, #8
 80033e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2204      	movs	r2, #4
 80033e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f974 	bl	80036e4 <HAL_TIM_IC_CaptureCallback>
 80033fc:	e005      	b.n	800340a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f966 	bl	80036d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f977 	bl	80036f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f003 0310 	and.w	r3, r3, #16
 800341a:	2b10      	cmp	r3, #16
 800341c:	d122      	bne.n	8003464 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f003 0310 	and.w	r3, r3, #16
 8003428:	2b10      	cmp	r3, #16
 800342a:	d11b      	bne.n	8003464 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f06f 0210 	mvn.w	r2, #16
 8003434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2208      	movs	r2, #8
 800343a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f94a 	bl	80036e4 <HAL_TIM_IC_CaptureCallback>
 8003450:	e005      	b.n	800345e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f93c 	bl	80036d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f94d 	bl	80036f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b01      	cmp	r3, #1
 8003470:	d10e      	bne.n	8003490 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b01      	cmp	r3, #1
 800347e:	d107      	bne.n	8003490 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f06f 0201 	mvn.w	r2, #1
 8003488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f916 	bl	80036bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349a:	2b80      	cmp	r3, #128	; 0x80
 800349c:	d10e      	bne.n	80034bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a8:	2b80      	cmp	r3, #128	; 0x80
 80034aa:	d107      	bne.n	80034bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 faf8 	bl	8003aac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ca:	d10e      	bne.n	80034ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d6:	2b80      	cmp	r3, #128	; 0x80
 80034d8:	d107      	bne.n	80034ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80034e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 faeb 	bl	8003ac0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f4:	2b40      	cmp	r3, #64	; 0x40
 80034f6:	d10e      	bne.n	8003516 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003502:	2b40      	cmp	r3, #64	; 0x40
 8003504:	d107      	bne.n	8003516 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800350e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f8fb 	bl	800370c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	f003 0320 	and.w	r3, r3, #32
 8003520:	2b20      	cmp	r3, #32
 8003522:	d10e      	bne.n	8003542 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	2b20      	cmp	r3, #32
 8003530:	d107      	bne.n	8003542 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f06f 0220 	mvn.w	r2, #32
 800353a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 faab 	bl	8003a98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003542:	bf00      	nop
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800355a:	2b01      	cmp	r3, #1
 800355c:	d101      	bne.n	8003562 <HAL_TIM_ConfigClockSource+0x18>
 800355e:	2302      	movs	r3, #2
 8003560:	e0a8      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x16a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2202      	movs	r2, #2
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003580:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003584:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800358c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b40      	cmp	r3, #64	; 0x40
 800359c:	d067      	beq.n	800366e <HAL_TIM_ConfigClockSource+0x124>
 800359e:	2b40      	cmp	r3, #64	; 0x40
 80035a0:	d80b      	bhi.n	80035ba <HAL_TIM_ConfigClockSource+0x70>
 80035a2:	2b10      	cmp	r3, #16
 80035a4:	d073      	beq.n	800368e <HAL_TIM_ConfigClockSource+0x144>
 80035a6:	2b10      	cmp	r3, #16
 80035a8:	d802      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x66>
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d06f      	beq.n	800368e <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80035ae:	e078      	b.n	80036a2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	d06c      	beq.n	800368e <HAL_TIM_ConfigClockSource+0x144>
 80035b4:	2b30      	cmp	r3, #48	; 0x30
 80035b6:	d06a      	beq.n	800368e <HAL_TIM_ConfigClockSource+0x144>
      break;
 80035b8:	e073      	b.n	80036a2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80035ba:	2b70      	cmp	r3, #112	; 0x70
 80035bc:	d00d      	beq.n	80035da <HAL_TIM_ConfigClockSource+0x90>
 80035be:	2b70      	cmp	r3, #112	; 0x70
 80035c0:	d804      	bhi.n	80035cc <HAL_TIM_ConfigClockSource+0x82>
 80035c2:	2b50      	cmp	r3, #80	; 0x50
 80035c4:	d033      	beq.n	800362e <HAL_TIM_ConfigClockSource+0xe4>
 80035c6:	2b60      	cmp	r3, #96	; 0x60
 80035c8:	d041      	beq.n	800364e <HAL_TIM_ConfigClockSource+0x104>
      break;
 80035ca:	e06a      	b.n	80036a2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80035cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d0:	d066      	beq.n	80036a0 <HAL_TIM_ConfigClockSource+0x156>
 80035d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035d6:	d017      	beq.n	8003608 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80035d8:	e063      	b.n	80036a2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6818      	ldr	r0, [r3, #0]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	6899      	ldr	r1, [r3, #8]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f000 f9ad 	bl	8003948 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	609a      	str	r2, [r3, #8]
      break;
 8003606:	e04c      	b.n	80036a2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6818      	ldr	r0, [r3, #0]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	6899      	ldr	r1, [r3, #8]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f000 f996 	bl	8003948 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800362a:	609a      	str	r2, [r3, #8]
      break;
 800362c:	e039      	b.n	80036a2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6818      	ldr	r0, [r3, #0]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	6859      	ldr	r1, [r3, #4]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	461a      	mov	r2, r3
 800363c:	f000 f90a 	bl	8003854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2150      	movs	r1, #80	; 0x50
 8003646:	4618      	mov	r0, r3
 8003648:	f000 f963 	bl	8003912 <TIM_ITRx_SetConfig>
      break;
 800364c:	e029      	b.n	80036a2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6818      	ldr	r0, [r3, #0]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	6859      	ldr	r1, [r3, #4]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	461a      	mov	r2, r3
 800365c:	f000 f929 	bl	80038b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2160      	movs	r1, #96	; 0x60
 8003666:	4618      	mov	r0, r3
 8003668:	f000 f953 	bl	8003912 <TIM_ITRx_SetConfig>
      break;
 800366c:	e019      	b.n	80036a2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6818      	ldr	r0, [r3, #0]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	6859      	ldr	r1, [r3, #4]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	461a      	mov	r2, r3
 800367c:	f000 f8ea 	bl	8003854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2140      	movs	r1, #64	; 0x40
 8003686:	4618      	mov	r0, r3
 8003688:	f000 f943 	bl	8003912 <TIM_ITRx_SetConfig>
      break;
 800368c:	e009      	b.n	80036a2 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4619      	mov	r1, r3
 8003698:	4610      	mov	r0, r2
 800369a:	f000 f93a 	bl	8003912 <TIM_ITRx_SetConfig>
        break;
 800369e:	e000      	b.n	80036a2 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80036a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a40      	ldr	r2, [pc, #256]	; (8003834 <TIM_Base_SetConfig+0x114>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d013      	beq.n	8003760 <TIM_Base_SetConfig+0x40>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800373e:	d00f      	beq.n	8003760 <TIM_Base_SetConfig+0x40>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a3d      	ldr	r2, [pc, #244]	; (8003838 <TIM_Base_SetConfig+0x118>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d00b      	beq.n	8003760 <TIM_Base_SetConfig+0x40>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a3c      	ldr	r2, [pc, #240]	; (800383c <TIM_Base_SetConfig+0x11c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d007      	beq.n	8003760 <TIM_Base_SetConfig+0x40>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a3b      	ldr	r2, [pc, #236]	; (8003840 <TIM_Base_SetConfig+0x120>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d003      	beq.n	8003760 <TIM_Base_SetConfig+0x40>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a3a      	ldr	r2, [pc, #232]	; (8003844 <TIM_Base_SetConfig+0x124>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d108      	bne.n	8003772 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003766:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a2f      	ldr	r2, [pc, #188]	; (8003834 <TIM_Base_SetConfig+0x114>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d01f      	beq.n	80037ba <TIM_Base_SetConfig+0x9a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003780:	d01b      	beq.n	80037ba <TIM_Base_SetConfig+0x9a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a2c      	ldr	r2, [pc, #176]	; (8003838 <TIM_Base_SetConfig+0x118>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d017      	beq.n	80037ba <TIM_Base_SetConfig+0x9a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a2b      	ldr	r2, [pc, #172]	; (800383c <TIM_Base_SetConfig+0x11c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d013      	beq.n	80037ba <TIM_Base_SetConfig+0x9a>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a2a      	ldr	r2, [pc, #168]	; (8003840 <TIM_Base_SetConfig+0x120>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00f      	beq.n	80037ba <TIM_Base_SetConfig+0x9a>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a29      	ldr	r2, [pc, #164]	; (8003844 <TIM_Base_SetConfig+0x124>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d00b      	beq.n	80037ba <TIM_Base_SetConfig+0x9a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a28      	ldr	r2, [pc, #160]	; (8003848 <TIM_Base_SetConfig+0x128>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d007      	beq.n	80037ba <TIM_Base_SetConfig+0x9a>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a27      	ldr	r2, [pc, #156]	; (800384c <TIM_Base_SetConfig+0x12c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d003      	beq.n	80037ba <TIM_Base_SetConfig+0x9a>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a26      	ldr	r2, [pc, #152]	; (8003850 <TIM_Base_SetConfig+0x130>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d108      	bne.n	80037cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a10      	ldr	r2, [pc, #64]	; (8003834 <TIM_Base_SetConfig+0x114>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d00f      	beq.n	8003818 <TIM_Base_SetConfig+0xf8>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a12      	ldr	r2, [pc, #72]	; (8003844 <TIM_Base_SetConfig+0x124>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d00b      	beq.n	8003818 <TIM_Base_SetConfig+0xf8>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a11      	ldr	r2, [pc, #68]	; (8003848 <TIM_Base_SetConfig+0x128>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d007      	beq.n	8003818 <TIM_Base_SetConfig+0xf8>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a10      	ldr	r2, [pc, #64]	; (800384c <TIM_Base_SetConfig+0x12c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d003      	beq.n	8003818 <TIM_Base_SetConfig+0xf8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a0f      	ldr	r2, [pc, #60]	; (8003850 <TIM_Base_SetConfig+0x130>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d103      	bne.n	8003820 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	615a      	str	r2, [r3, #20]
}
 8003826:	bf00      	nop
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40012c00 	.word	0x40012c00
 8003838:	40000400 	.word	0x40000400
 800383c:	40000800 	.word	0x40000800
 8003840:	40000c00 	.word	0x40000c00
 8003844:	40013400 	.word	0x40013400
 8003848:	40014000 	.word	0x40014000
 800384c:	40014400 	.word	0x40014400
 8003850:	40014800 	.word	0x40014800

08003854 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003854:	b480      	push	{r7}
 8003856:	b087      	sub	sp, #28
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	f023 0201 	bic.w	r2, r3, #1
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800387e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f023 030a 	bic.w	r3, r3, #10
 8003890:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4313      	orrs	r3, r2
 8003898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	621a      	str	r2, [r3, #32]
}
 80038a6:	bf00      	nop
 80038a8:	371c      	adds	r7, #28
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b087      	sub	sp, #28
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	60f8      	str	r0, [r7, #12]
 80038ba:	60b9      	str	r1, [r7, #8]
 80038bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	f023 0210 	bic.w	r2, r3, #16
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	031b      	lsls	r3, r3, #12
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	011b      	lsls	r3, r3, #4
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	621a      	str	r2, [r3, #32]
}
 8003906:	bf00      	nop
 8003908:	371c      	adds	r7, #28
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003912:	b480      	push	{r7}
 8003914:	b085      	sub	sp, #20
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003928:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4313      	orrs	r3, r2
 8003930:	f043 0307 	orr.w	r3, r3, #7
 8003934:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	609a      	str	r2, [r3, #8]
}
 800393c:	bf00      	nop
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003948:	b480      	push	{r7}
 800394a:	b087      	sub	sp, #28
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003962:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	021a      	lsls	r2, r3, #8
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	431a      	orrs	r2, r3
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	4313      	orrs	r3, r2
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	4313      	orrs	r3, r2
 8003974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	609a      	str	r2, [r3, #8]
}
 800397c:	bf00      	nop
 800397e:	371c      	adds	r7, #28
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800399c:	2302      	movs	r3, #2
 800399e:	e068      	b.n	8003a72 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a2e      	ldr	r2, [pc, #184]	; (8003a80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d004      	beq.n	80039d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a2d      	ldr	r2, [pc, #180]	; (8003a84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d108      	bne.n	80039e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80039da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a1e      	ldr	r2, [pc, #120]	; (8003a80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d01d      	beq.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a12:	d018      	beq.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a1b      	ldr	r2, [pc, #108]	; (8003a88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d013      	beq.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a1a      	ldr	r2, [pc, #104]	; (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d00e      	beq.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a18      	ldr	r2, [pc, #96]	; (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d009      	beq.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a13      	ldr	r2, [pc, #76]	; (8003a84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d004      	beq.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a14      	ldr	r2, [pc, #80]	; (8003a94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d10c      	bne.n	8003a60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40012c00 	.word	0x40012c00
 8003a84:	40013400 	.word	0x40013400
 8003a88:	40000400 	.word	0x40000400
 8003a8c:	40000800 	.word	0x40000800
 8003a90:	40000c00 	.word	0x40000c00
 8003a94:	40014000 	.word	0x40014000

08003a98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <arm_sin_f32>:
 8003ad4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003b54 <arm_sin_f32+0x80>
 8003ad8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003adc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003ae8:	d504      	bpl.n	8003af4 <arm_sin_f32+0x20>
 8003aea:	ee17 3a90 	vmov	r3, s15
 8003aee:	3b01      	subs	r3, #1
 8003af0:	ee07 3a90 	vmov	s15, r3
 8003af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003af8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003b58 <arm_sin_f32+0x84>
 8003afc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003b00:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003b04:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8003b08:	ee17 3a90 	vmov	r3, s15
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b12:	d21a      	bcs.n	8003b4a <arm_sin_f32+0x76>
 8003b14:	ee07 3a90 	vmov	s15, r3
 8003b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b1c:	1c59      	adds	r1, r3, #1
 8003b1e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003b22:	4a0e      	ldr	r2, [pc, #56]	; (8003b5c <arm_sin_f32+0x88>)
 8003b24:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003b28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003b2c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8003b30:	ed93 7a00 	vldr	s14, [r3]
 8003b34:	edd2 6a00 	vldr	s13, [r2]
 8003b38:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003b3c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8003b40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b44:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003b48:	4770      	bx	lr
 8003b4a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003b4e:	2101      	movs	r1, #1
 8003b50:	2300      	movs	r3, #0
 8003b52:	e7e6      	b.n	8003b22 <arm_sin_f32+0x4e>
 8003b54:	3e22f983 	.word	0x3e22f983
 8003b58:	44000000 	.word	0x44000000
 8003b5c:	08003c10 	.word	0x08003c10

08003b60 <__libc_init_array>:
 8003b60:	b570      	push	{r4, r5, r6, lr}
 8003b62:	4e0d      	ldr	r6, [pc, #52]	; (8003b98 <__libc_init_array+0x38>)
 8003b64:	4c0d      	ldr	r4, [pc, #52]	; (8003b9c <__libc_init_array+0x3c>)
 8003b66:	1ba4      	subs	r4, r4, r6
 8003b68:	10a4      	asrs	r4, r4, #2
 8003b6a:	2500      	movs	r5, #0
 8003b6c:	42a5      	cmp	r5, r4
 8003b6e:	d109      	bne.n	8003b84 <__libc_init_array+0x24>
 8003b70:	4e0b      	ldr	r6, [pc, #44]	; (8003ba0 <__libc_init_array+0x40>)
 8003b72:	4c0c      	ldr	r4, [pc, #48]	; (8003ba4 <__libc_init_array+0x44>)
 8003b74:	f000 f820 	bl	8003bb8 <_init>
 8003b78:	1ba4      	subs	r4, r4, r6
 8003b7a:	10a4      	asrs	r4, r4, #2
 8003b7c:	2500      	movs	r5, #0
 8003b7e:	42a5      	cmp	r5, r4
 8003b80:	d105      	bne.n	8003b8e <__libc_init_array+0x2e>
 8003b82:	bd70      	pop	{r4, r5, r6, pc}
 8003b84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b88:	4798      	blx	r3
 8003b8a:	3501      	adds	r5, #1
 8003b8c:	e7ee      	b.n	8003b6c <__libc_init_array+0xc>
 8003b8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b92:	4798      	blx	r3
 8003b94:	3501      	adds	r5, #1
 8003b96:	e7f2      	b.n	8003b7e <__libc_init_array+0x1e>
 8003b98:	08004414 	.word	0x08004414
 8003b9c:	08004414 	.word	0x08004414
 8003ba0:	08004414 	.word	0x08004414
 8003ba4:	08004418 	.word	0x08004418

08003ba8 <memset>:
 8003ba8:	4402      	add	r2, r0
 8003baa:	4603      	mov	r3, r0
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d100      	bne.n	8003bb2 <memset+0xa>
 8003bb0:	4770      	bx	lr
 8003bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8003bb6:	e7f9      	b.n	8003bac <memset+0x4>

08003bb8 <_init>:
 8003bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bba:	bf00      	nop
 8003bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bbe:	bc08      	pop	{r3}
 8003bc0:	469e      	mov	lr, r3
 8003bc2:	4770      	bx	lr

08003bc4 <_fini>:
 8003bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc6:	bf00      	nop
 8003bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bca:	bc08      	pop	{r3}
 8003bcc:	469e      	mov	lr, r3
 8003bce:	4770      	bx	lr
