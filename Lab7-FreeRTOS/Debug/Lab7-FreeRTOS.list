
Lab7-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08007664  08007664  00017664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007800  08007800  00020138  2**0
                  CONTENTS
  4 .ARM          00000008  08007800  08007800  00017800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007808  08007808  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007808  08007808  00017808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800780c  0800780c  0001780c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  08007810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011f8  20000138  08007948  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001330  08007948  00021330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e0fb  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f29  00000000  00000000  0003e263  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001960  00000000  00000000  00042190  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001738  00000000  00000000  00043af0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a941  00000000  00000000  00045228  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016ba5  00000000  00000000  0006fb69  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010017e  00000000  00000000  0008670e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018688c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006aa4  00000000  00000000  00186908  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000138 	.word	0x20000138
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800764c 	.word	0x0800764c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000013c 	.word	0x2000013c
 80001cc:	0800764c 	.word	0x0800764c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	; 0x28
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000588:	4b27      	ldr	r3, [pc, #156]	; (8000628 <I2Cx_MspInit+0xa8>)
 800058a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058c:	4a26      	ldr	r2, [pc, #152]	; (8000628 <I2Cx_MspInit+0xa8>)
 800058e:	f043 0302 	orr.w	r3, r3, #2
 8000592:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000594:	4b24      	ldr	r3, [pc, #144]	; (8000628 <I2Cx_MspInit+0xa8>)
 8000596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000598:	f003 0302 	and.w	r3, r3, #2
 800059c:	613b      	str	r3, [r7, #16]
 800059e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80005a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005a4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80005a6:	2312      	movs	r3, #18
 80005a8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80005aa:	2301      	movs	r3, #1
 80005ac:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ae:	2303      	movs	r3, #3
 80005b0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80005b2:	2304      	movs	r3, #4
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4619      	mov	r1, r3
 80005bc:	481b      	ldr	r0, [pc, #108]	; (800062c <I2Cx_MspInit+0xac>)
 80005be:	f001 f969 	bl	8001894 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4619      	mov	r1, r3
 80005c8:	4818      	ldr	r0, [pc, #96]	; (800062c <I2Cx_MspInit+0xac>)
 80005ca:	f001 f963 	bl	8001894 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80005ce:	4b16      	ldr	r3, [pc, #88]	; (8000628 <I2Cx_MspInit+0xa8>)
 80005d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d2:	4a15      	ldr	r2, [pc, #84]	; (8000628 <I2Cx_MspInit+0xa8>)
 80005d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005d8:	6593      	str	r3, [r2, #88]	; 0x58
 80005da:	4b13      	ldr	r3, [pc, #76]	; (8000628 <I2Cx_MspInit+0xa8>)
 80005dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <I2Cx_MspInit+0xa8>)
 80005e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005ea:	4a0f      	ldr	r2, [pc, #60]	; (8000628 <I2Cx_MspInit+0xa8>)
 80005ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005f0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <I2Cx_MspInit+0xa8>)
 80005f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005f6:	4a0c      	ldr	r2, [pc, #48]	; (8000628 <I2Cx_MspInit+0xa8>)
 80005f8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80005fc:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80005fe:	2200      	movs	r2, #0
 8000600:	210f      	movs	r1, #15
 8000602:	2021      	movs	r0, #33	; 0x21
 8000604:	f001 f91c 	bl	8001840 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000608:	2021      	movs	r0, #33	; 0x21
 800060a:	f001 f935 	bl	8001878 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	210f      	movs	r1, #15
 8000612:	2022      	movs	r0, #34	; 0x22
 8000614:	f001 f914 	bl	8001840 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8000618:	2022      	movs	r0, #34	; 0x22
 800061a:	f001 f92d 	bl	8001878 <HAL_NVIC_EnableIRQ>
}
 800061e:	bf00      	nop
 8000620:	3728      	adds	r7, #40	; 0x28
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000
 800062c:	48000400 	.word	0x48000400

08000630 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4a12      	ldr	r2, [pc, #72]	; (8000684 <I2Cx_Init+0x54>)
 800063c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4a11      	ldr	r2, [pc, #68]	; (8000688 <I2Cx_Init+0x58>)
 8000642:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2201      	movs	r2, #1
 800064e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2200      	movs	r2, #0
 8000654:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2200      	movs	r2, #0
 800065a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f7ff ff89 	bl	8000580 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f001 fbff 	bl	8001e72 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8000674:	2100      	movs	r1, #0
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f002 f904 	bl	8002884 <HAL_I2CEx_ConfigAnalogFilter>
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40005800 	.word	0x40005800
 8000688:	00702681 	.word	0x00702681

0800068c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af04      	add	r7, sp, #16
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	4608      	mov	r0, r1
 8000696:	4611      	mov	r1, r2
 8000698:	461a      	mov	r2, r3
 800069a:	4603      	mov	r3, r0
 800069c:	72fb      	strb	r3, [r7, #11]
 800069e:	460b      	mov	r3, r1
 80006a0:	813b      	strh	r3, [r7, #8]
 80006a2:	4613      	mov	r3, r2
 80006a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80006a6:	2300      	movs	r3, #0
 80006a8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80006aa:	7afb      	ldrb	r3, [r7, #11]
 80006ac:	b299      	uxth	r1, r3
 80006ae:	88f8      	ldrh	r0, [r7, #6]
 80006b0:	893a      	ldrh	r2, [r7, #8]
 80006b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b6:	9302      	str	r3, [sp, #8]
 80006b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	6a3b      	ldr	r3, [r7, #32]
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	4603      	mov	r3, r0
 80006c2:	68f8      	ldr	r0, [r7, #12]
 80006c4:	f001 fda8 	bl	8002218 <HAL_I2C_Mem_Read>
 80006c8:	4603      	mov	r3, r0
 80006ca:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80006cc:	7dfb      	ldrb	r3, [r7, #23]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d004      	beq.n	80006dc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 80006d2:	7afb      	ldrb	r3, [r7, #11]
 80006d4:	4619      	mov	r1, r3
 80006d6:	68f8      	ldr	r0, [r7, #12]
 80006d8:	f000 f832 	bl	8000740 <I2Cx_Error>
  }
  return status;
 80006dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3718      	adds	r7, #24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b08a      	sub	sp, #40	; 0x28
 80006ea:	af04      	add	r7, sp, #16
 80006ec:	60f8      	str	r0, [r7, #12]
 80006ee:	4608      	mov	r0, r1
 80006f0:	4611      	mov	r1, r2
 80006f2:	461a      	mov	r2, r3
 80006f4:	4603      	mov	r3, r0
 80006f6:	72fb      	strb	r3, [r7, #11]
 80006f8:	460b      	mov	r3, r1
 80006fa:	813b      	strh	r3, [r7, #8]
 80006fc:	4613      	mov	r3, r2
 80006fe:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000700:	2300      	movs	r3, #0
 8000702:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000704:	7afb      	ldrb	r3, [r7, #11]
 8000706:	b299      	uxth	r1, r3
 8000708:	88f8      	ldrh	r0, [r7, #6]
 800070a:	893a      	ldrh	r2, [r7, #8]
 800070c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000710:	9302      	str	r3, [sp, #8]
 8000712:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000714:	9301      	str	r3, [sp, #4]
 8000716:	6a3b      	ldr	r3, [r7, #32]
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	4603      	mov	r3, r0
 800071c:	68f8      	ldr	r0, [r7, #12]
 800071e:	f001 fc67 	bl	8001ff0 <HAL_I2C_Mem_Write>
 8000722:	4603      	mov	r3, r0
 8000724:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000726:	7dfb      	ldrb	r3, [r7, #23]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d004      	beq.n	8000736 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800072c:	7afb      	ldrb	r3, [r7, #11]
 800072e:	4619      	mov	r1, r3
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f000 f805 	bl	8000740 <I2Cx_Error>
  }
  return status;
 8000736:	7dfb      	ldrb	r3, [r7, #23]
}
 8000738:	4618      	mov	r0, r3
 800073a:	3718      	adds	r7, #24
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	460b      	mov	r3, r1
 800074a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f001 fc1f 	bl	8001f90 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f7ff ff6c 	bl	8000630 <I2Cx_Init>
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8000764:	4802      	ldr	r0, [pc, #8]	; (8000770 <SENSOR_IO_Init+0x10>)
 8000766:	f7ff ff63 	bl	8000630 <I2Cx_Init>
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200011b8 	.word	0x200011b8

08000774 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af02      	add	r7, sp, #8
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
 800077e:	460b      	mov	r3, r1
 8000780:	71bb      	strb	r3, [r7, #6]
 8000782:	4613      	mov	r3, r2
 8000784:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8000786:	79bb      	ldrb	r3, [r7, #6]
 8000788:	b29a      	uxth	r2, r3
 800078a:	79f9      	ldrb	r1, [r7, #7]
 800078c:	2301      	movs	r3, #1
 800078e:	9301      	str	r3, [sp, #4]
 8000790:	1d7b      	adds	r3, r7, #5
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	2301      	movs	r3, #1
 8000796:	4803      	ldr	r0, [pc, #12]	; (80007a4 <SENSOR_IO_Write+0x30>)
 8000798:	f7ff ffa5 	bl	80006e6 <I2Cx_WriteMultiple>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200011b8 	.word	0x200011b8

080007a8 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af02      	add	r7, sp, #8
 80007ae:	4603      	mov	r3, r0
 80007b0:	460a      	mov	r2, r1
 80007b2:	71fb      	strb	r3, [r7, #7]
 80007b4:	4613      	mov	r3, r2
 80007b6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80007bc:	79bb      	ldrb	r3, [r7, #6]
 80007be:	b29a      	uxth	r2, r3
 80007c0:	79f9      	ldrb	r1, [r7, #7]
 80007c2:	2301      	movs	r3, #1
 80007c4:	9301      	str	r3, [sp, #4]
 80007c6:	f107 030f 	add.w	r3, r7, #15
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	2301      	movs	r3, #1
 80007ce:	4804      	ldr	r0, [pc, #16]	; (80007e0 <SENSOR_IO_Read+0x38>)
 80007d0:	f7ff ff5c 	bl	800068c <I2Cx_ReadMultiple>

  return read_value;
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200011b8 	.word	0x200011b8

080007e4 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af02      	add	r7, sp, #8
 80007ea:	603a      	str	r2, [r7, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
 80007f2:	460b      	mov	r3, r1
 80007f4:	71bb      	strb	r3, [r7, #6]
 80007f6:	4613      	mov	r3, r2
 80007f8:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	79f9      	ldrb	r1, [r7, #7]
 8000800:	88bb      	ldrh	r3, [r7, #4]
 8000802:	9301      	str	r3, [sp, #4]
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2301      	movs	r3, #1
 800080a:	4804      	ldr	r0, [pc, #16]	; (800081c <SENSOR_IO_ReadMultiple+0x38>)
 800080c:	f7ff ff3e 	bl	800068c <I2Cx_ReadMultiple>
 8000810:	4603      	mov	r3, r0
 8000812:	b29b      	uxth	r3, r3
}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200011b8 	.word	0x200011b8

08000820 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8000826:	2300      	movs	r3, #0
 8000828:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800082a:	2300      	movs	r3, #0
 800082c:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800082e:	4b19      	ldr	r3, [pc, #100]	; (8000894 <BSP_ACCELERO_Init+0x74>)
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	4798      	blx	r3
 8000834:	4603      	mov	r3, r0
 8000836:	2b6a      	cmp	r3, #106	; 0x6a
 8000838:	d002      	beq.n	8000840 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800083a:	2301      	movs	r3, #1
 800083c:	73fb      	strb	r3, [r7, #15]
 800083e:	e024      	b.n	800088a <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8000840:	4b15      	ldr	r3, [pc, #84]	; (8000898 <BSP_ACCELERO_Init+0x78>)
 8000842:	4a14      	ldr	r2, [pc, #80]	; (8000894 <BSP_ACCELERO_Init+0x74>)
 8000844:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8000846:	2330      	movs	r3, #48	; 0x30
 8000848:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800084e:	2300      	movs	r3, #0
 8000850:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8000852:	2340      	movs	r3, #64	; 0x40
 8000854:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800085e:	797a      	ldrb	r2, [r7, #5]
 8000860:	7abb      	ldrb	r3, [r7, #10]
 8000862:	4313      	orrs	r3, r2
 8000864:	b2db      	uxtb	r3, r3
 8000866:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8000868:	7a3b      	ldrb	r3, [r7, #8]
 800086a:	f043 0304 	orr.w	r3, r3, #4
 800086e:	b2db      	uxtb	r3, r3
 8000870:	021b      	lsls	r3, r3, #8
 8000872:	b21a      	sxth	r2, r3
 8000874:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000878:	4313      	orrs	r3, r2
 800087a:	b21b      	sxth	r3, r3
 800087c:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <BSP_ACCELERO_Init+0x78>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	89ba      	ldrh	r2, [r7, #12]
 8000886:	4610      	mov	r0, r2
 8000888:	4798      	blx	r3
  }  

  return ret;
 800088a:	7bfb      	ldrb	r3, [r7, #15]
}
 800088c:	4618      	mov	r0, r3
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	2000005c 	.word	0x2000005c
 8000898:	20000154 	.word	0x20000154

0800089c <BSP_ACCELERO_LowPower>:
  * @brief  Set/Unset the ACCELERO in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  * @retval None
  */
void BSP_ACCELERO_LowPower(uint16_t status)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	80fb      	strh	r3, [r7, #6]
  /* Set/Unset the ACCELERO in low power mode */
  if(AccelerometerDrv != NULL)
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <BSP_ACCELERO_LowPower+0x30>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d00a      	beq.n	80008c4 <BSP_ACCELERO_LowPower+0x28>
  {
    if(AccelerometerDrv->LowPower != NULL)
 80008ae:	4b07      	ldr	r3, [pc, #28]	; (80008cc <BSP_ACCELERO_LowPower+0x30>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	691b      	ldr	r3, [r3, #16]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d005      	beq.n	80008c4 <BSP_ACCELERO_LowPower+0x28>
    {
      AccelerometerDrv->LowPower(status);
 80008b8:	4b04      	ldr	r3, [pc, #16]	; (80008cc <BSP_ACCELERO_LowPower+0x30>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	691b      	ldr	r3, [r3, #16]
 80008be:	88fa      	ldrh	r2, [r7, #6]
 80008c0:	4610      	mov	r0, r2
 80008c2:	4798      	blx	r3
    }
  }
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000154 	.word	0x20000154

080008d0 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80008da:	2300      	movs	r3, #0
 80008dc:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80008de:	4b1b      	ldr	r3, [pc, #108]	; (800094c <BSP_GYRO_Init+0x7c>)
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	4798      	blx	r3
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b6a      	cmp	r3, #106	; 0x6a
 80008e8:	d002      	beq.n	80008f0 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	73fb      	strb	r3, [r7, #15]
 80008ee:	e028      	b.n	8000942 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <BSP_GYRO_Init+0x80>)
 80008f2:	4a16      	ldr	r2, [pc, #88]	; (800094c <BSP_GYRO_Init+0x7c>)
 80008f4:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 80008fa:	2330      	movs	r3, #48	; 0x30
 80008fc:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8000906:	2340      	movs	r3, #64	; 0x40
 8000908:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 800090e:	230c      	movs	r3, #12
 8000910:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8000912:	7aba      	ldrb	r2, [r7, #10]
 8000914:	797b      	ldrb	r3, [r7, #5]
 8000916:	4313      	orrs	r3, r2
 8000918:	b2db      	uxtb	r3, r3
 800091a:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800091c:	7a3b      	ldrb	r3, [r7, #8]
 800091e:	f043 0304 	orr.w	r3, r3, #4
 8000922:	b2db      	uxtb	r3, r3
 8000924:	021b      	lsls	r3, r3, #8
 8000926:	b21a      	sxth	r2, r3
 8000928:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800092c:	4313      	orrs	r3, r2
 800092e:	b21b      	sxth	r3, r3
 8000930:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8000932:	4b07      	ldr	r3, [pc, #28]	; (8000950 <BSP_GYRO_Init+0x80>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	89ba      	ldrh	r2, [r7, #12]
 800093a:	4610      	mov	r0, r2
 800093c:	4798      	blx	r3
    
    ret = GYRO_OK;
 800093e:	2300      	movs	r3, #0
 8000940:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8000942:	7bfb      	ldrb	r3, [r7, #15]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000090 	.word	0x20000090
 8000950:	20000158 	.word	0x20000158

08000954 <BSP_GYRO_LowPower>:
/**
  * @brief  Set/Unset Gyroscope in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void BSP_GYRO_LowPower(uint16_t status)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	80fb      	strh	r3, [r7, #6]
  /* Set/Unset component in low-power mode */
  if(GyroscopeDrv != NULL)
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <BSP_GYRO_LowPower+0x30>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d00a      	beq.n	800097c <BSP_GYRO_LowPower+0x28>
  {
    if(GyroscopeDrv->LowPower!= NULL)
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <BSP_GYRO_LowPower+0x30>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	691b      	ldr	r3, [r3, #16]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d005      	beq.n	800097c <BSP_GYRO_LowPower+0x28>
    {
      GyroscopeDrv->LowPower(status);
 8000970:	4b04      	ldr	r3, [pc, #16]	; (8000984 <BSP_GYRO_LowPower+0x30>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	691b      	ldr	r3, [r3, #16]
 8000976:	88fa      	ldrh	r2, [r7, #6]
 8000978:	4610      	mov	r0, r2
 800097a:	4798      	blx	r3
    }
  }
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000158 	.word	0x20000158

08000988 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <BSP_GYRO_GetXYZ+0x2c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d009      	beq.n	80009ac <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <BSP_GYRO_GetXYZ+0x2c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d004      	beq.n	80009ac <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 80009a2:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <BSP_GYRO_GetXYZ+0x2c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	4798      	blx	r3
    }
  }
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000158 	.word	0x20000158

080009b8 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <BSP_HSENSOR_Init+0x38>)
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	20be      	movs	r0, #190	; 0xbe
 80009c4:	4798      	blx	r3
 80009c6:	4603      	mov	r3, r0
 80009c8:	2bbc      	cmp	r3, #188	; 0xbc
 80009ca:	d002      	beq.n	80009d2 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80009cc:	2301      	movs	r3, #1
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	e009      	b.n	80009e6 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <BSP_HSENSOR_Init+0x3c>)
 80009d4:	4a06      	ldr	r2, [pc, #24]	; (80009f0 <BSP_HSENSOR_Init+0x38>)
 80009d6:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <BSP_HSENSOR_Init+0x3c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	20be      	movs	r0, #190	; 0xbe
 80009e0:	4798      	blx	r3
    ret = HSENSOR_OK;
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80009e6:	687b      	ldr	r3, [r7, #4]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000000 	.word	0x20000000
 80009f4:	2000015c 	.word	0x2000015c

080009f8 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80009fc:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <BSP_HSENSOR_ReadHumidity+0x18>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	689b      	ldr	r3, [r3, #8]
 8000a02:	20be      	movs	r0, #190	; 0xbe
 8000a04:	4798      	blx	r3
 8000a06:	eef0 7a40 	vmov.f32	s15, s0
}
 8000a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	2000015c 	.word	0x2000015c

08000a14 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <BSP_MAGNETO_Init+0x50>)
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	4798      	blx	r3
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b3d      	cmp	r3, #61	; 0x3d
 8000a28:	d002      	beq.n	8000a30 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	71fb      	strb	r3, [r7, #7]
 8000a2e:	e013      	b.n	8000a58 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8000a30:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <BSP_MAGNETO_Init+0x54>)
 8000a32:	4a0c      	ldr	r2, [pc, #48]	; (8000a64 <BSP_MAGNETO_Init+0x50>)
 8000a34:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8000a36:	2358      	movs	r3, #88	; 0x58
 8000a38:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8000a42:	2308      	movs	r3, #8
 8000a44:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8000a46:	2340      	movs	r3, #64	; 0x40
 8000a48:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8000a4a:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <BSP_MAGNETO_Init+0x54>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	463a      	mov	r2, r7
 8000a52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a56:	4798      	blx	r3
  } 

  return ret;  
 8000a58:	79fb      	ldrb	r3, [r7, #7]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000001c 	.word	0x2000001c
 8000a68:	20000160 	.word	0x20000160

08000a6c <BSP_MAGNETO_LowPower>:

/**
  * @brief  Set/Unset the MAGNETO in low power mode.
  */
void BSP_MAGNETO_LowPower(uint16_t status)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	80fb      	strh	r3, [r7, #6]
  /* Put the magnetometer in low power mode */
  if(MagnetoDrv != NULL)
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <BSP_MAGNETO_LowPower+0x30>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d00a      	beq.n	8000a94 <BSP_MAGNETO_LowPower+0x28>
  {
    if(MagnetoDrv->LowPower != NULL)
 8000a7e:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <BSP_MAGNETO_LowPower+0x30>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	691b      	ldr	r3, [r3, #16]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d005      	beq.n	8000a94 <BSP_MAGNETO_LowPower+0x28>
    {
      MagnetoDrv->LowPower(status);
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <BSP_MAGNETO_LowPower+0x30>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	691b      	ldr	r3, [r3, #16]
 8000a8e:	88fa      	ldrh	r2, [r7, #6]
 8000a90:	4610      	mov	r0, r2
 8000a92:	4798      	blx	r3
    }
  }
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000160 	.word	0x20000160

08000aa0 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <BSP_MAGNETO_GetXYZ+0x2c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d009      	beq.n	8000ac4 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <BSP_MAGNETO_GetXYZ+0x2c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d004      	beq.n	8000ac4 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8000aba:	4b04      	ldr	r3, [pc, #16]	; (8000acc <BSP_MAGNETO_GetXYZ+0x2c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	4798      	blx	r3
    }
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000160 	.word	0x20000160

08000ad0 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <BSP_PSENSOR_Init+0x38>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	20ba      	movs	r0, #186	; 0xba
 8000adc:	4798      	blx	r3
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2bb1      	cmp	r3, #177	; 0xb1
 8000ae2:	d002      	beq.n	8000aea <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	e009      	b.n	8000afe <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <BSP_PSENSOR_Init+0x3c>)
 8000aec:	4a06      	ldr	r2, [pc, #24]	; (8000b08 <BSP_PSENSOR_Init+0x38>)
 8000aee:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <BSP_PSENSOR_Init+0x3c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	20ba      	movs	r0, #186	; 0xba
 8000af8:	4798      	blx	r3
    ret = PSENSOR_OK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8000afe:	687b      	ldr	r3, [r7, #4]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000050 	.word	0x20000050
 8000b0c:	20000164 	.word	0x20000164

08000b10 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <BSP_PSENSOR_ReadPressure+0x18>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	20ba      	movs	r0, #186	; 0xba
 8000b1c:	4798      	blx	r3
 8000b1e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000b22:	eeb0 0a67 	vmov.f32	s0, s15
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000164 	.word	0x20000164

08000b2c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <BSP_TSENSOR_Init+0x30>)
 8000b38:	4a09      	ldr	r2, [pc, #36]	; (8000b60 <BSP_TSENSOR_Init+0x34>)
 8000b3a:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8000b3c:	f7ff fe10 	bl	8000760 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <BSP_TSENSOR_Init+0x30>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2100      	movs	r1, #0
 8000b48:	20be      	movs	r0, #190	; 0xbe
 8000b4a:	4798      	blx	r3

  ret = TSENSOR_OK;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8000b50:	79fb      	ldrb	r3, [r7, #7]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000168 	.word	0x20000168
 8000b60:	2000000c 	.word	0x2000000c

08000b64 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8000b6e:	88fb      	ldrh	r3, [r7, #6]
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2120      	movs	r1, #32
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fe17 	bl	80007a8 <SENSOR_IO_Read>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	f023 0304 	bic.w	r3, r3, #4
 8000b84:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8000b8e:	7bfb      	ldrb	r3, [r7, #15]
 8000b90:	f023 0303 	bic.w	r3, r3, #3
 8000b94:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ba0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ba4:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8000ba6:	88fb      	ldrh	r3, [r7, #6]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	7bfa      	ldrb	r2, [r7, #15]
 8000bac:	2120      	movs	r1, #32
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fde0 	bl	8000774 <SENSOR_IO_Write>
}
 8000bb4:	bf00      	nop
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8000bca:	f7ff fdc9 	bl	8000760 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	210f      	movs	r1, #15
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fde7 	bl	80007a8 <SENSOR_IO_Read>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	b2d8      	uxtb	r0, r3
 8000bf6:	f107 020c 	add.w	r2, r7, #12
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	21b0      	movs	r1, #176	; 0xb0
 8000bfe:	f7ff fdf1 	bl	80007e4 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8000c02:	7b3b      	ldrb	r3, [r7, #12]
 8000c04:	085b      	lsrs	r3, r3, #1
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8000c0a:	7b7b      	ldrb	r3, [r7, #13]
 8000c0c:	085b      	lsrs	r3, r3, #1
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	b2d8      	uxtb	r0, r3
 8000c16:	f107 020c 	add.w	r2, r7, #12
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	21b6      	movs	r1, #182	; 0xb6
 8000c1e:	f7ff fde1 	bl	80007e4 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000c22:	7b7b      	ldrb	r3, [r7, #13]
 8000c24:	021b      	lsls	r3, r3, #8
 8000c26:	b21a      	sxth	r2, r3
 8000c28:	7b3b      	ldrb	r3, [r7, #12]
 8000c2a:	b21b      	sxth	r3, r3
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8000c30:	88fb      	ldrh	r3, [r7, #6]
 8000c32:	b2d8      	uxtb	r0, r3
 8000c34:	f107 020c 	add.w	r2, r7, #12
 8000c38:	2302      	movs	r3, #2
 8000c3a:	21ba      	movs	r1, #186	; 0xba
 8000c3c:	f7ff fdd2 	bl	80007e4 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000c40:	7b7b      	ldrb	r3, [r7, #13]
 8000c42:	021b      	lsls	r3, r3, #8
 8000c44:	b21a      	sxth	r2, r3
 8000c46:	7b3b      	ldrb	r3, [r7, #12]
 8000c48:	b21b      	sxth	r3, r3
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8000c4e:	88fb      	ldrh	r3, [r7, #6]
 8000c50:	b2d8      	uxtb	r0, r3
 8000c52:	f107 020c 	add.w	r2, r7, #12
 8000c56:	2302      	movs	r3, #2
 8000c58:	21a8      	movs	r1, #168	; 0xa8
 8000c5a:	f7ff fdc3 	bl	80007e4 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000c5e:	7b7b      	ldrb	r3, [r7, #13]
 8000c60:	021b      	lsls	r3, r3, #8
 8000c62:	b21a      	sxth	r2, r3
 8000c64:	7b3b      	ldrb	r3, [r7, #12]
 8000c66:	b21b      	sxth	r3, r3
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8000c6c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000c70:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	ee07 3a90 	vmov	s15, r3
 8000c7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c7e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000c82:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	ee07 3a90 	vmov	s15, r3
 8000c8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c90:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000c94:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000c98:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	ee07 3a90 	vmov	s15, r3
 8000ca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000caa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000cae:	ee07 3a90 	vmov	s15, r3
 8000cb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cba:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8000cbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cc2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000cc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cca:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8000cce:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cd2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000d18 <HTS221_H_ReadHumidity+0x130>
 8000cd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cde:	dd01      	ble.n	8000ce4 <HTS221_H_ReadHumidity+0xfc>
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <HTS221_H_ReadHumidity+0x134>)
 8000ce2:	e00a      	b.n	8000cfa <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8000ce4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ce8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cf0:	d502      	bpl.n	8000cf8 <HTS221_H_ReadHumidity+0x110>
 8000cf2:	f04f 0300 	mov.w	r3, #0
 8000cf6:	e000      	b.n	8000cfa <HTS221_H_ReadHumidity+0x112>
 8000cf8:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8000cfa:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8000cfc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d00:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000d04:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000d08:	eef0 7a66 	vmov.f32	s15, s13
}
 8000d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8000d10:	3720      	adds	r7, #32
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	447a0000 	.word	0x447a0000
 8000d1c:	447a0000 	.word	0x447a0000

08000d20 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	6039      	str	r1, [r7, #0]
 8000d2a:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8000d2c:	88fb      	ldrh	r3, [r7, #6]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2120      	movs	r1, #32
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fd38 	bl	80007a8 <SENSOR_IO_Read>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
 8000d3e:	f023 0304 	bic.w	r3, r3, #4
 8000d42:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	f023 0303 	bic.w	r3, r3, #3
 8000d52:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d62:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	7bfa      	ldrb	r2, [r7, #15]
 8000d6a:	2120      	movs	r1, #32
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fd01 	bl	8000774 <SENSOR_IO_Write>
}
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b088      	sub	sp, #32
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8000d84:	88fb      	ldrh	r3, [r7, #6]
 8000d86:	b2d8      	uxtb	r0, r3
 8000d88:	f107 0208 	add.w	r2, r7, #8
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	21b2      	movs	r1, #178	; 0xb2
 8000d90:	f7ff fd28 	bl	80007e4 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8000d94:	88fb      	ldrh	r3, [r7, #6]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2135      	movs	r1, #53	; 0x35
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fd04 	bl	80007a8 <SENSOR_IO_Read>
 8000da0:	4603      	mov	r3, r0
 8000da2:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8000da4:	7ffb      	ldrb	r3, [r7, #31]
 8000da6:	021b      	lsls	r3, r3, #8
 8000da8:	b21b      	sxth	r3, r3
 8000daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000dae:	b21a      	sxth	r2, r3
 8000db0:	7a3b      	ldrb	r3, [r7, #8]
 8000db2:	b21b      	sxth	r3, r3
 8000db4:	4313      	orrs	r3, r2
 8000db6:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8000db8:	7ffb      	ldrb	r3, [r7, #31]
 8000dba:	019b      	lsls	r3, r3, #6
 8000dbc:	b21b      	sxth	r3, r3
 8000dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000dc2:	b21a      	sxth	r2, r3
 8000dc4:	7a7b      	ldrb	r3, [r7, #9]
 8000dc6:	b21b      	sxth	r3, r3
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8000dcc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000dd0:	10db      	asrs	r3, r3, #3
 8000dd2:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8000dd4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000dd8:	10db      	asrs	r3, r3, #3
 8000dda:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	b2d8      	uxtb	r0, r3
 8000de0:	f107 0208 	add.w	r2, r7, #8
 8000de4:	2304      	movs	r3, #4
 8000de6:	21bc      	movs	r1, #188	; 0xbc
 8000de8:	f7ff fcfc 	bl	80007e4 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000dec:	7a7b      	ldrb	r3, [r7, #9]
 8000dee:	021b      	lsls	r3, r3, #8
 8000df0:	b21a      	sxth	r2, r3
 8000df2:	7a3b      	ldrb	r3, [r7, #8]
 8000df4:	b21b      	sxth	r3, r3
 8000df6:	4313      	orrs	r3, r2
 8000df8:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8000dfa:	7afb      	ldrb	r3, [r7, #11]
 8000dfc:	021b      	lsls	r3, r3, #8
 8000dfe:	b21a      	sxth	r2, r3
 8000e00:	7abb      	ldrb	r3, [r7, #10]
 8000e02:	b21b      	sxth	r3, r3
 8000e04:	4313      	orrs	r3, r2
 8000e06:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	b2d8      	uxtb	r0, r3
 8000e0c:	f107 0208 	add.w	r2, r7, #8
 8000e10:	2302      	movs	r3, #2
 8000e12:	21aa      	movs	r1, #170	; 0xaa
 8000e14:	f7ff fce6 	bl	80007e4 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000e18:	7a7b      	ldrb	r3, [r7, #9]
 8000e1a:	021b      	lsls	r3, r3, #8
 8000e1c:	b21a      	sxth	r2, r3
 8000e1e:	7a3b      	ldrb	r3, [r7, #8]
 8000e20:	b21b      	sxth	r3, r3
 8000e22:	4313      	orrs	r3, r2
 8000e24:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8000e26:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000e2a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	ee07 3a90 	vmov	s15, r3
 8000e34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000e3c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	ee07 3a90 	vmov	s15, r3
 8000e46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e4a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000e4e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000e52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	ee07 3a90 	vmov	s15, r3
 8000e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000e64:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000e68:	ee07 3a90 	vmov	s15, r3
 8000e6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e74:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	ee07 3a90 	vmov	s15, r3
}
 8000e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8000e82:	3720      	adds	r7, #32
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	463b      	mov	r3, r7
 8000e90:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8000e94:	783b      	ldrb	r3, [r7, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	2120      	movs	r1, #32
 8000e9a:	203c      	movs	r0, #60	; 0x3c
 8000e9c:	f7ff fc6a 	bl	8000774 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8000ea0:	787b      	ldrb	r3, [r7, #1]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	2121      	movs	r1, #33	; 0x21
 8000ea6:	203c      	movs	r0, #60	; 0x3c
 8000ea8:	f7ff fc64 	bl	8000774 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8000eac:	78bb      	ldrb	r3, [r7, #2]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	2122      	movs	r1, #34	; 0x22
 8000eb2:	203c      	movs	r0, #60	; 0x3c
 8000eb4:	f7ff fc5e 	bl	8000774 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8000eb8:	78fb      	ldrb	r3, [r7, #3]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	2123      	movs	r1, #35	; 0x23
 8000ebe:	203c      	movs	r0, #60	; 0x3c
 8000ec0:	f7ff fc58 	bl	8000774 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8000ec4:	793b      	ldrb	r3, [r7, #4]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	2124      	movs	r1, #36	; 0x24
 8000eca:	203c      	movs	r0, #60	; 0x3c
 8000ecc:	f7ff fc52 	bl	8000774 <SENSOR_IO_Write>
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8000ee2:	2122      	movs	r1, #34	; 0x22
 8000ee4:	203c      	movs	r0, #60	; 0x3c
 8000ee6:	f7ff fc5f 	bl	80007a8 <SENSOR_IO_Read>
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f023 0303 	bic.w	r3, r3, #3
 8000ef4:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	f043 0303 	orr.w	r3, r3, #3
 8000efc:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	461a      	mov	r2, r3
 8000f02:	2122      	movs	r1, #34	; 0x22
 8000f04:	203c      	movs	r0, #60	; 0x3c
 8000f06:	f7ff fc35 	bl	8000774 <SENSOR_IO_Write>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8000f16:	f7ff fc23 	bl	8000760 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	203c      	movs	r0, #60	; 0x3c
 8000f1e:	f7ff fc43 	bl	80007a8 <SENSOR_IO_Read>
 8000f22:	4603      	mov	r3, r0
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8000f36:	2122      	movs	r1, #34	; 0x22
 8000f38:	203c      	movs	r0, #60	; 0x3c
 8000f3a:	f7ff fc35 	bl	80007a8 <SENSOR_IO_Read>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	f023 0320 	bic.w	r3, r3, #32
 8000f48:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	f043 0320 	orr.w	r3, r3, #32
 8000f56:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	2122      	movs	r1, #34	; 0x22
 8000f5e:	203c      	movs	r0, #60	; 0x3c
 8000f60:	f7ff fc08 	bl	8000774 <SENSOR_IO_Write>
}
 8000f64:	bf00      	nop
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8000f7c:	f04f 0300 	mov.w	r3, #0
 8000f80:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8000f82:	2121      	movs	r1, #33	; 0x21
 8000f84:	203c      	movs	r0, #60	; 0x3c
 8000f86:	f7ff fc0f 	bl	80007a8 <SENSOR_IO_Read>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8000f8e:	f107 0208 	add.w	r2, r7, #8
 8000f92:	2306      	movs	r3, #6
 8000f94:	21a8      	movs	r1, #168	; 0xa8
 8000f96:	203c      	movs	r0, #60	; 0x3c
 8000f98:	f7ff fc24 	bl	80007e4 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	77fb      	strb	r3, [r7, #31]
 8000fa0:	e01f      	b.n	8000fe2 <LIS3MDL_MagReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8000fa2:	7ffb      	ldrb	r3, [r7, #31]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	f107 0220 	add.w	r2, r7, #32
 8000fac:	4413      	add	r3, r2
 8000fae:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	7ffb      	ldrb	r3, [r7, #31]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	f107 0120 	add.w	r1, r7, #32
 8000fc0:	440b      	add	r3, r1
 8000fc2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	4413      	add	r3, r2
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	7ffb      	ldrb	r3, [r7, #31]
 8000fce:	b212      	sxth	r2, r2
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	f107 0120 	add.w	r1, r7, #32
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8000fdc:	7ffb      	ldrb	r3, [r7, #31]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	77fb      	strb	r3, [r7, #31]
 8000fe2:	7ffb      	ldrb	r3, [r7, #31]
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d9dc      	bls.n	8000fa2 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8000fe8:	7dfb      	ldrb	r3, [r7, #23]
 8000fea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8000fee:	2b20      	cmp	r3, #32
 8000ff0:	d00c      	beq.n	800100c <LIS3MDL_MagReadXYZ+0xa0>
 8000ff2:	2b20      	cmp	r3, #32
 8000ff4:	dc02      	bgt.n	8000ffc <LIS3MDL_MagReadXYZ+0x90>
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d005      	beq.n	8001006 <LIS3MDL_MagReadXYZ+0x9a>
 8000ffa:	e010      	b.n	800101e <LIS3MDL_MagReadXYZ+0xb2>
 8000ffc:	2b40      	cmp	r3, #64	; 0x40
 8000ffe:	d008      	beq.n	8001012 <LIS3MDL_MagReadXYZ+0xa6>
 8001000:	2b60      	cmp	r3, #96	; 0x60
 8001002:	d009      	beq.n	8001018 <LIS3MDL_MagReadXYZ+0xac>
 8001004:	e00b      	b.n	800101e <LIS3MDL_MagReadXYZ+0xb2>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <LIS3MDL_MagReadXYZ+0x100>)
 8001008:	61bb      	str	r3, [r7, #24]
    break;
 800100a:	e008      	b.n	800101e <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <LIS3MDL_MagReadXYZ+0x104>)
 800100e:	61bb      	str	r3, [r7, #24]
    break;
 8001010:	e005      	b.n	800101e <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8001012:	4b18      	ldr	r3, [pc, #96]	; (8001074 <LIS3MDL_MagReadXYZ+0x108>)
 8001014:	61bb      	str	r3, [r7, #24]
    break;
 8001016:	e002      	b.n	800101e <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8001018:	4b17      	ldr	r3, [pc, #92]	; (8001078 <LIS3MDL_MagReadXYZ+0x10c>)
 800101a:	61bb      	str	r3, [r7, #24]
    break;    
 800101c:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 800101e:	2300      	movs	r3, #0
 8001020:	77fb      	strb	r3, [r7, #31]
 8001022:	e01b      	b.n	800105c <LIS3MDL_MagReadXYZ+0xf0>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001024:	7ffb      	ldrb	r3, [r7, #31]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	f107 0220 	add.w	r2, r7, #32
 800102c:	4413      	add	r3, r2
 800102e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001032:	ee07 3a90 	vmov	s15, r3
 8001036:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800103a:	edd7 7a06 	vldr	s15, [r7, #24]
 800103e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001042:	7ffb      	ldrb	r3, [r7, #31]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800104e:	ee17 2a90 	vmov	r2, s15
 8001052:	b212      	sxth	r2, r2
 8001054:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001056:	7ffb      	ldrb	r3, [r7, #31]
 8001058:	3301      	adds	r3, #1
 800105a:	77fb      	strb	r3, [r7, #31]
 800105c:	7ffb      	ldrb	r3, [r7, #31]
 800105e:	2b02      	cmp	r3, #2
 8001060:	d9e0      	bls.n	8001024 <LIS3MDL_MagReadXYZ+0xb8>
  }
}
 8001062:	bf00      	nop
 8001064:	3720      	adds	r7, #32
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	3e0f5c29 	.word	0x3e0f5c29
 8001070:	3e947ae1 	.word	0x3e947ae1
 8001074:	3edc28f6 	.word	0x3edc28f6
 8001078:	3f147ae1 	.word	0x3f147ae1

0800107c <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	4618      	mov	r0, r3
 800108a:	f000 f87b 	bl	8001184 <LPS22HB_Init>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8001096:	b580      	push	{r7, lr}
 8001098:	b084      	sub	sp, #16
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80010a0:	2300      	movs	r3, #0
 80010a2:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 80010a4:	f7ff fb5c 	bl	8000760 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	210f      	movs	r1, #15
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fb7a 	bl	80007a8 <SENSOR_IO_Read>
 80010b4:	4603      	mov	r3, r0
 80010b6:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	74fb      	strb	r3, [r7, #19]
 80010d6:	e013      	b.n	8001100 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	7cfb      	ldrb	r3, [r7, #19]
 80010de:	3328      	adds	r3, #40	; 0x28
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	7cfc      	ldrb	r4, [r7, #19]
 80010e4:	4619      	mov	r1, r3
 80010e6:	4610      	mov	r0, r2
 80010e8:	f7ff fb5e 	bl	80007a8 <SENSOR_IO_Read>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	f107 0318 	add.w	r3, r7, #24
 80010f4:	4423      	add	r3, r4
 80010f6:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80010fa:	7cfb      	ldrb	r3, [r7, #19]
 80010fc:	3301      	adds	r3, #1
 80010fe:	74fb      	strb	r3, [r7, #19]
 8001100:	7cfb      	ldrb	r3, [r7, #19]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d9e8      	bls.n	80010d8 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8001106:	2300      	movs	r3, #0
 8001108:	74fb      	strb	r3, [r7, #19]
 800110a:	e010      	b.n	800112e <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 800110c:	7cfb      	ldrb	r3, [r7, #19]
 800110e:	f107 0218 	add.w	r2, r7, #24
 8001112:	4413      	add	r3, r2
 8001114:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001118:	461a      	mov	r2, r3
 800111a:	7cfb      	ldrb	r3, [r7, #19]
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4313      	orrs	r3, r2
 8001126:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8001128:	7cfb      	ldrb	r3, [r7, #19]
 800112a:	3301      	adds	r3, #1
 800112c:	74fb      	strb	r3, [r7, #19]
 800112e:	7cfb      	ldrb	r3, [r7, #19]
 8001130:	2b02      	cmp	r3, #2
 8001132:	d9eb      	bls.n	800110c <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001144:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2264      	movs	r2, #100	; 0x64
 800114e:	fb02 f303 	mul.w	r3, r2, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	da01      	bge.n	800115a <LPS22HB_P_ReadPressure+0x96>
 8001156:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800115a:	131b      	asrs	r3, r3, #12
 800115c:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	ee07 3a90 	vmov	s15, r3
 8001164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001168:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001180 <LPS22HB_P_ReadPressure+0xbc>
 800116c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001170:	eef0 7a66 	vmov.f32	s15, s13
}
 8001174:	eeb0 0a67 	vmov.f32	s0, s15
 8001178:	371c      	adds	r7, #28
 800117a:	46bd      	mov	sp, r7
 800117c:	bd90      	pop	{r4, r7, pc}
 800117e:	bf00      	nop
 8001180:	42c80000 	.word	0x42c80000

08001184 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	b2db      	uxtb	r3, r3
 8001192:	211a      	movs	r1, #26
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fb07 	bl	80007a8 <SENSOR_IO_Read>
 800119a:	4603      	mov	r3, r0
 800119c:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	f023 0301 	bic.w	r3, r3, #1
 80011a4:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	7bfa      	ldrb	r2, [r7, #15]
 80011b4:	211a      	movs	r1, #26
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fadc 	bl	8000774 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2110      	movs	r1, #16
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff faf0 	bl	80007a8 <SENSOR_IO_Read>
 80011c8:	4603      	mov	r3, r0
 80011ca:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011d2:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80011da:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	f023 0302 	bic.w	r3, r3, #2
 80011e2:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	f043 0302 	orr.w	r3, r3, #2
 80011ea:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80011ec:	88fb      	ldrh	r3, [r7, #6]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	7bfa      	ldrb	r2, [r7, #15]
 80011f2:	2110      	movs	r1, #16
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fabd 	bl	8000774 <SENSOR_IO_Write>
}  
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8001202:	b580      	push	{r7, lr}
 8001204:	b084      	sub	sp, #16
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800120c:	2300      	movs	r3, #0
 800120e:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001210:	2110      	movs	r1, #16
 8001212:	20d4      	movs	r0, #212	; 0xd4
 8001214:	f7ff fac8 	bl	80007a8 <SENSOR_IO_Read>
 8001218:	4603      	mov	r3, r0
 800121a:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001220:	7bbb      	ldrb	r3, [r7, #14]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001228:	7bba      	ldrb	r2, [r7, #14]
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	4313      	orrs	r3, r2
 800122e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8001230:	7bbb      	ldrb	r3, [r7, #14]
 8001232:	461a      	mov	r2, r3
 8001234:	2110      	movs	r1, #16
 8001236:	20d4      	movs	r0, #212	; 0xd4
 8001238:	f7ff fa9c 	bl	8000774 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800123c:	2112      	movs	r1, #18
 800123e:	20d4      	movs	r0, #212	; 0xd4
 8001240:	f7ff fab2 	bl	80007a8 <SENSOR_IO_Read>
 8001244:	4603      	mov	r3, r0
 8001246:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	0a1b      	lsrs	r3, r3, #8
 800124c:	b29b      	uxth	r3, r3
 800124e:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001250:	7bbb      	ldrb	r3, [r7, #14]
 8001252:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8001256:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001258:	7bba      	ldrb	r2, [r7, #14]
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	4313      	orrs	r3, r2
 800125e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001260:	7bbb      	ldrb	r3, [r7, #14]
 8001262:	461a      	mov	r2, r3
 8001264:	2112      	movs	r1, #18
 8001266:	20d4      	movs	r0, #212	; 0xd4
 8001268:	f7ff fa84 	bl	8000774 <SENSOR_IO_Write>
}
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800127a:	2300      	movs	r3, #0
 800127c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800127e:	2110      	movs	r1, #16
 8001280:	20d4      	movs	r0, #212	; 0xd4
 8001282:	f7ff fa91 	bl	80007a8 <SENSOR_IO_Read>
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	f003 030f 	and.w	r3, r3, #15
 8001290:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	461a      	mov	r2, r3
 8001296:	2110      	movs	r1, #16
 8001298:	20d4      	movs	r0, #212	; 0xd4
 800129a:	f7ff fa6b 	bl	8000774 <SENSOR_IO_Write>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80012a6:	b580      	push	{r7, lr}
 80012a8:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80012aa:	f7ff fa59 	bl	8000760 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80012ae:	210f      	movs	r1, #15
 80012b0:	20d4      	movs	r0, #212	; 0xd4
 80012b2:	f7ff fa79 	bl	80007a8 <SENSOR_IO_Read>
 80012b6:	4603      	mov	r3, r0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	bd80      	pop	{r7, pc}

080012bc <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80012c6:	2300      	movs	r3, #0
 80012c8:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80012ca:	2115      	movs	r1, #21
 80012cc:	20d4      	movs	r0, #212	; 0xd4
 80012ce:	f7ff fa6b 	bl	80007a8 <SENSOR_IO_Read>
 80012d2:	4603      	mov	r3, r0
 80012d4:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	f023 0310 	bic.w	r3, r3, #16
 80012dc:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	f043 0310 	orr.w	r3, r3, #16
 80012ea:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	461a      	mov	r2, r3
 80012f0:	2115      	movs	r1, #21
 80012f2:	20d4      	movs	r0, #212	; 0xd4
 80012f4:	f7ff fa3e 	bl	8000774 <SENSOR_IO_Write>
}
 80012f8:	bf00      	nop
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8001308:	2300      	movs	r3, #0
 800130a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001310:	f04f 0300 	mov.w	r3, #0
 8001314:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001316:	2110      	movs	r1, #16
 8001318:	20d4      	movs	r0, #212	; 0xd4
 800131a:	f7ff fa45 	bl	80007a8 <SENSOR_IO_Read>
 800131e:	4603      	mov	r3, r0
 8001320:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8001322:	f107 0208 	add.w	r2, r7, #8
 8001326:	2306      	movs	r3, #6
 8001328:	2128      	movs	r1, #40	; 0x28
 800132a:	20d4      	movs	r0, #212	; 0xd4
 800132c:	f7ff fa5a 	bl	80007e4 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001330:	2300      	movs	r3, #0
 8001332:	77fb      	strb	r3, [r7, #31]
 8001334:	e01f      	b.n	8001376 <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001336:	7ffb      	ldrb	r3, [r7, #31]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	3301      	adds	r3, #1
 800133c:	f107 0220 	add.w	r2, r7, #32
 8001340:	4413      	add	r3, r2
 8001342:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001346:	b29b      	uxth	r3, r3
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	b29a      	uxth	r2, r3
 800134c:	7ffb      	ldrb	r3, [r7, #31]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	f107 0120 	add.w	r1, r7, #32
 8001354:	440b      	add	r3, r1
 8001356:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800135a:	b29b      	uxth	r3, r3
 800135c:	4413      	add	r3, r2
 800135e:	b29a      	uxth	r2, r3
 8001360:	7ffb      	ldrb	r3, [r7, #31]
 8001362:	b212      	sxth	r2, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	f107 0120 	add.w	r1, r7, #32
 800136a:	440b      	add	r3, r1
 800136c:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001370:	7ffb      	ldrb	r3, [r7, #31]
 8001372:	3301      	adds	r3, #1
 8001374:	77fb      	strb	r3, [r7, #31]
 8001376:	7ffb      	ldrb	r3, [r7, #31]
 8001378:	2b02      	cmp	r3, #2
 800137a:	d9dc      	bls.n	8001336 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800137c:	7dfb      	ldrb	r3, [r7, #23]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	2b0c      	cmp	r3, #12
 8001384:	d828      	bhi.n	80013d8 <LSM6DSL_AccReadXYZ+0xd8>
 8001386:	a201      	add	r2, pc, #4	; (adr r2, 800138c <LSM6DSL_AccReadXYZ+0x8c>)
 8001388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138c:	080013c1 	.word	0x080013c1
 8001390:	080013d9 	.word	0x080013d9
 8001394:	080013d9 	.word	0x080013d9
 8001398:	080013d9 	.word	0x080013d9
 800139c:	080013d3 	.word	0x080013d3
 80013a0:	080013d9 	.word	0x080013d9
 80013a4:	080013d9 	.word	0x080013d9
 80013a8:	080013d9 	.word	0x080013d9
 80013ac:	080013c7 	.word	0x080013c7
 80013b0:	080013d9 	.word	0x080013d9
 80013b4:	080013d9 	.word	0x080013d9
 80013b8:	080013d9 	.word	0x080013d9
 80013bc:	080013cd 	.word	0x080013cd
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80013c0:	4b18      	ldr	r3, [pc, #96]	; (8001424 <LSM6DSL_AccReadXYZ+0x124>)
 80013c2:	61bb      	str	r3, [r7, #24]
    break;
 80013c4:	e008      	b.n	80013d8 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80013c6:	4b18      	ldr	r3, [pc, #96]	; (8001428 <LSM6DSL_AccReadXYZ+0x128>)
 80013c8:	61bb      	str	r3, [r7, #24]
    break;
 80013ca:	e005      	b.n	80013d8 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80013cc:	4b17      	ldr	r3, [pc, #92]	; (800142c <LSM6DSL_AccReadXYZ+0x12c>)
 80013ce:	61bb      	str	r3, [r7, #24]
    break;
 80013d0:	e002      	b.n	80013d8 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <LSM6DSL_AccReadXYZ+0x130>)
 80013d4:	61bb      	str	r3, [r7, #24]
    break;    
 80013d6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80013d8:	2300      	movs	r3, #0
 80013da:	77fb      	strb	r3, [r7, #31]
 80013dc:	e01b      	b.n	8001416 <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80013de:	7ffb      	ldrb	r3, [r7, #31]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	f107 0220 	add.w	r2, r7, #32
 80013e6:	4413      	add	r3, r2
 80013e8:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80013ec:	ee07 3a90 	vmov	s15, r3
 80013f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80013f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013fc:	7ffb      	ldrb	r3, [r7, #31]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	4413      	add	r3, r2
 8001404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001408:	ee17 2a90 	vmov	r2, s15
 800140c:	b212      	sxth	r2, r2
 800140e:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001410:	7ffb      	ldrb	r3, [r7, #31]
 8001412:	3301      	adds	r3, #1
 8001414:	77fb      	strb	r3, [r7, #31]
 8001416:	7ffb      	ldrb	r3, [r7, #31]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d9e0      	bls.n	80013de <LSM6DSL_AccReadXYZ+0xde>
  }
}
 800141c:	bf00      	nop
 800141e:	3720      	adds	r7, #32
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	3d79db23 	.word	0x3d79db23
 8001428:	3df9db23 	.word	0x3df9db23
 800142c:	3e79db23 	.word	0x3e79db23
 8001430:	3ef9db23 	.word	0x3ef9db23

08001434 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800143e:	2300      	movs	r3, #0
 8001440:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001442:	2111      	movs	r1, #17
 8001444:	20d4      	movs	r0, #212	; 0xd4
 8001446:	f7ff f9af 	bl	80007a8 <SENSOR_IO_Read>
 800144a:	4603      	mov	r3, r0
 800144c:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001452:	7bbb      	ldrb	r3, [r7, #14]
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800145a:	7bba      	ldrb	r2, [r7, #14]
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	4313      	orrs	r3, r2
 8001460:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8001462:	7bbb      	ldrb	r3, [r7, #14]
 8001464:	461a      	mov	r2, r3
 8001466:	2111      	movs	r1, #17
 8001468:	20d4      	movs	r0, #212	; 0xd4
 800146a:	f7ff f983 	bl	8000774 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800146e:	2112      	movs	r1, #18
 8001470:	20d4      	movs	r0, #212	; 0xd4
 8001472:	f7ff f999 	bl	80007a8 <SENSOR_IO_Read>
 8001476:	4603      	mov	r3, r0
 8001478:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	0a1b      	lsrs	r3, r3, #8
 800147e:	b29b      	uxth	r3, r3
 8001480:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001482:	7bbb      	ldrb	r3, [r7, #14]
 8001484:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8001488:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800148a:	7bba      	ldrb	r2, [r7, #14]
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	4313      	orrs	r3, r2
 8001490:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001492:	7bbb      	ldrb	r3, [r7, #14]
 8001494:	461a      	mov	r2, r3
 8001496:	2112      	movs	r1, #18
 8001498:	20d4      	movs	r0, #212	; 0xd4
 800149a:	f7ff f96b 	bl	8000774 <SENSOR_IO_Write>
}
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80014ac:	2300      	movs	r3, #0
 80014ae:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80014b0:	2111      	movs	r1, #17
 80014b2:	20d4      	movs	r0, #212	; 0xd4
 80014b4:	f7ff f978 	bl	80007a8 <SENSOR_IO_Read>
 80014b8:	4603      	mov	r3, r0
 80014ba:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	461a      	mov	r2, r3
 80014c8:	2111      	movs	r1, #17
 80014ca:	20d4      	movs	r0, #212	; 0xd4
 80014cc:	f7ff f952 	bl	8000774 <SENSOR_IO_Write>
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80014dc:	f7ff f940 	bl	8000760 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 80014e0:	210f      	movs	r1, #15
 80014e2:	20d4      	movs	r0, #212	; 0xd4
 80014e4:	f7ff f960 	bl	80007a8 <SENSOR_IO_Read>
 80014e8:	4603      	mov	r3, r0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	bd80      	pop	{r7, pc}

080014ee <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b084      	sub	sp, #16
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80014f8:	2300      	movs	r3, #0
 80014fa:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80014fc:	2116      	movs	r1, #22
 80014fe:	20d4      	movs	r0, #212	; 0xd4
 8001500:	f7ff f952 	bl	80007a8 <SENSOR_IO_Read>
 8001504:	4603      	mov	r3, r0
 8001506:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800150e:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001510:	88fb      	ldrh	r3, [r7, #6]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800151c:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	461a      	mov	r2, r3
 8001522:	2116      	movs	r1, #22
 8001524:	20d4      	movs	r0, #212	; 0xd4
 8001526:	f7ff f925 	bl	8000774 <SENSOR_IO_Write>
}
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 800153c:	2300      	movs	r3, #0
 800153e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001544:	f04f 0300 	mov.w	r3, #0
 8001548:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800154a:	2111      	movs	r1, #17
 800154c:	20d4      	movs	r0, #212	; 0xd4
 800154e:	f7ff f92b 	bl	80007a8 <SENSOR_IO_Read>
 8001552:	4603      	mov	r3, r0
 8001554:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8001556:	f107 0208 	add.w	r2, r7, #8
 800155a:	2306      	movs	r3, #6
 800155c:	2122      	movs	r1, #34	; 0x22
 800155e:	20d4      	movs	r0, #212	; 0xd4
 8001560:	f7ff f940 	bl	80007e4 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001564:	2300      	movs	r3, #0
 8001566:	77fb      	strb	r3, [r7, #31]
 8001568:	e01f      	b.n	80015aa <LSM6DSL_GyroReadXYZAngRate+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800156a:	7ffb      	ldrb	r3, [r7, #31]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	3301      	adds	r3, #1
 8001570:	f107 0220 	add.w	r2, r7, #32
 8001574:	4413      	add	r3, r2
 8001576:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800157a:	b29b      	uxth	r3, r3
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	b29a      	uxth	r2, r3
 8001580:	7ffb      	ldrb	r3, [r7, #31]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	f107 0120 	add.w	r1, r7, #32
 8001588:	440b      	add	r3, r1
 800158a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800158e:	b29b      	uxth	r3, r3
 8001590:	4413      	add	r3, r2
 8001592:	b29a      	uxth	r2, r3
 8001594:	7ffb      	ldrb	r3, [r7, #31]
 8001596:	b212      	sxth	r2, r2
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	f107 0120 	add.w	r1, r7, #32
 800159e:	440b      	add	r3, r1
 80015a0:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80015a4:	7ffb      	ldrb	r3, [r7, #31]
 80015a6:	3301      	adds	r3, #1
 80015a8:	77fb      	strb	r3, [r7, #31]
 80015aa:	7ffb      	ldrb	r3, [r7, #31]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d9dc      	bls.n	800156a <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
 80015b2:	f003 030c 	and.w	r3, r3, #12
 80015b6:	2b0c      	cmp	r3, #12
 80015b8:	d828      	bhi.n	800160c <LSM6DSL_GyroReadXYZAngRate+0xd8>
 80015ba:	a201      	add	r2, pc, #4	; (adr r2, 80015c0 <LSM6DSL_GyroReadXYZAngRate+0x8c>)
 80015bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c0:	080015f5 	.word	0x080015f5
 80015c4:	0800160d 	.word	0x0800160d
 80015c8:	0800160d 	.word	0x0800160d
 80015cc:	0800160d 	.word	0x0800160d
 80015d0:	080015fb 	.word	0x080015fb
 80015d4:	0800160d 	.word	0x0800160d
 80015d8:	0800160d 	.word	0x0800160d
 80015dc:	0800160d 	.word	0x0800160d
 80015e0:	08001601 	.word	0x08001601
 80015e4:	0800160d 	.word	0x0800160d
 80015e8:	0800160d 	.word	0x0800160d
 80015ec:	0800160d 	.word	0x0800160d
 80015f0:	08001607 	.word	0x08001607
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 80015f4:	4b16      	ldr	r3, [pc, #88]	; (8001650 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 80015f6:	61bb      	str	r3, [r7, #24]
    break;
 80015f8:	e008      	b.n	800160c <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 80015fc:	61bb      	str	r3, [r7, #24]
    break;
 80015fe:	e005      	b.n	800160c <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8001602:	61bb      	str	r3, [r7, #24]
    break;
 8001604:	e002      	b.n	800160c <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <LSM6DSL_GyroReadXYZAngRate+0x128>)
 8001608:	61bb      	str	r3, [r7, #24]
    break;    
 800160a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800160c:	2300      	movs	r3, #0
 800160e:	77fb      	strb	r3, [r7, #31]
 8001610:	e017      	b.n	8001642 <LSM6DSL_GyroReadXYZAngRate+0x10e>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8001612:	7ffb      	ldrb	r3, [r7, #31]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	f107 0220 	add.w	r2, r7, #32
 800161a:	4413      	add	r3, r2
 800161c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001620:	ee07 3a90 	vmov	s15, r3
 8001624:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001628:	7ffb      	ldrb	r3, [r7, #31]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	4413      	add	r3, r2
 8001630:	edd7 7a06 	vldr	s15, [r7, #24]
 8001634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001638:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800163c:	7ffb      	ldrb	r3, [r7, #31]
 800163e:	3301      	adds	r3, #1
 8001640:	77fb      	strb	r3, [r7, #31]
 8001642:	7ffb      	ldrb	r3, [r7, #31]
 8001644:	2b02      	cmp	r3, #2
 8001646:	d9e4      	bls.n	8001612 <LSM6DSL_GyroReadXYZAngRate+0xde>
  }
}
 8001648:	bf00      	nop
 800164a:	3720      	adds	r7, #32
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	410c0000 	.word	0x410c0000
 8001654:	418c0000 	.word	0x418c0000
 8001658:	420c0000 	.word	0x420c0000
 800165c:	428c0000 	.word	0x428c0000

08001660 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001666:	2300      	movs	r3, #0
 8001668:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166a:	2003      	movs	r0, #3
 800166c:	f000 f8dd 	bl	800182a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001670:	2000      	movs	r0, #0
 8001672:	f005 fa89 	bl	8006b88 <HAL_InitTick>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d002      	beq.n	8001682 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	71fb      	strb	r3, [r7, #7]
 8001680:	e001      	b.n	8001686 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001682:	f005 f9b1 	bl	80069e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001686:	79fb      	ldrb	r3, [r7, #7]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_IncTick+0x20>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	461a      	mov	r2, r3
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_IncTick+0x24>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4413      	add	r3, r2
 80016a0:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <HAL_IncTick+0x24>)
 80016a2:	6013      	str	r3, [r2, #0]
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	200000c8 	.word	0x200000c8
 80016b4:	20001204 	.word	0x20001204

080016b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return uwTick;
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <HAL_GetTick+0x14>)
 80016be:	681b      	ldr	r3, [r3, #0]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	20001204 	.word	0x20001204

080016d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016ec:	4013      	ands	r3, r2
 80016ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001702:	4a04      	ldr	r2, [pc, #16]	; (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	60d3      	str	r3, [r2, #12]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <__NVIC_GetPriorityGrouping+0x18>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	0a1b      	lsrs	r3, r3, #8
 8001722:	f003 0307 	and.w	r3, r3, #7
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	2b00      	cmp	r3, #0
 8001744:	db0b      	blt.n	800175e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	f003 021f 	and.w	r2, r3, #31
 800174c:	4907      	ldr	r1, [pc, #28]	; (800176c <__NVIC_EnableIRQ+0x38>)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	095b      	lsrs	r3, r3, #5
 8001754:	2001      	movs	r0, #1
 8001756:	fa00 f202 	lsl.w	r2, r0, r2
 800175a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000e100 	.word	0xe000e100

08001770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	6039      	str	r1, [r7, #0]
 800177a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	2b00      	cmp	r3, #0
 8001782:	db0a      	blt.n	800179a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	490c      	ldr	r1, [pc, #48]	; (80017bc <__NVIC_SetPriority+0x4c>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	0112      	lsls	r2, r2, #4
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	440b      	add	r3, r1
 8001794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001798:	e00a      	b.n	80017b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4908      	ldr	r1, [pc, #32]	; (80017c0 <__NVIC_SetPriority+0x50>)
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	3b04      	subs	r3, #4
 80017a8:	0112      	lsls	r2, r2, #4
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	440b      	add	r3, r1
 80017ae:	761a      	strb	r2, [r3, #24]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000e100 	.word	0xe000e100
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	; 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f1c3 0307 	rsb	r3, r3, #7
 80017de:	2b04      	cmp	r3, #4
 80017e0:	bf28      	it	cs
 80017e2:	2304      	movcs	r3, #4
 80017e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3304      	adds	r3, #4
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d902      	bls.n	80017f4 <NVIC_EncodePriority+0x30>
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3b03      	subs	r3, #3
 80017f2:	e000      	b.n	80017f6 <NVIC_EncodePriority+0x32>
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43da      	mvns	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	401a      	ands	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800180c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43d9      	mvns	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	4313      	orrs	r3, r2
         );
}
 800181e:	4618      	mov	r0, r3
 8001820:	3724      	adds	r7, #36	; 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ff4c 	bl	80016d0 <__NVIC_SetPriorityGrouping>
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
 800184c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001852:	f7ff ff61 	bl	8001718 <__NVIC_GetPriorityGrouping>
 8001856:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	68b9      	ldr	r1, [r7, #8]
 800185c:	6978      	ldr	r0, [r7, #20]
 800185e:	f7ff ffb1 	bl	80017c4 <NVIC_EncodePriority>
 8001862:	4602      	mov	r2, r0
 8001864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001868:	4611      	mov	r1, r2
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ff80 	bl	8001770 <__NVIC_SetPriority>
}
 8001870:	bf00      	nop
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff ff54 	bl	8001734 <__NVIC_EnableIRQ>
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001894:	b480      	push	{r7}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a2:	e17f      	b.n	8001ba4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	2101      	movs	r1, #1
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	fa01 f303 	lsl.w	r3, r1, r3
 80018b0:	4013      	ands	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 8171 	beq.w	8001b9e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d00b      	beq.n	80018dc <HAL_GPIO_Init+0x48>
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d007      	beq.n	80018dc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018d0:	2b11      	cmp	r3, #17
 80018d2:	d003      	beq.n	80018dc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b12      	cmp	r3, #18
 80018da:	d130      	bne.n	800193e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	2203      	movs	r2, #3
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	68da      	ldr	r2, [r3, #12]
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001912:	2201      	movs	r2, #1
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	091b      	lsrs	r3, r3, #4
 8001928:	f003 0201 	and.w	r2, r3, #1
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	2b03      	cmp	r3, #3
 8001948:	d118      	bne.n	800197c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001950:	2201      	movs	r2, #1
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	08db      	lsrs	r3, r3, #3
 8001966:	f003 0201 	and.w	r2, r3, #1
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4313      	orrs	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	2203      	movs	r2, #3
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d003      	beq.n	80019bc <HAL_GPIO_Init+0x128>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b12      	cmp	r3, #18
 80019ba:	d123      	bne.n	8001a04 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	08da      	lsrs	r2, r3, #3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3208      	adds	r2, #8
 80019c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	220f      	movs	r2, #15
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	691a      	ldr	r2, [r3, #16]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	08da      	lsrs	r2, r3, #3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3208      	adds	r2, #8
 80019fe:	6939      	ldr	r1, [r7, #16]
 8001a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	2203      	movs	r2, #3
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0203 	and.w	r2, r3, #3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 80ac 	beq.w	8001b9e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a46:	4b5e      	ldr	r3, [pc, #376]	; (8001bc0 <HAL_GPIO_Init+0x32c>)
 8001a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a4a:	4a5d      	ldr	r2, [pc, #372]	; (8001bc0 <HAL_GPIO_Init+0x32c>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6613      	str	r3, [r2, #96]	; 0x60
 8001a52:	4b5b      	ldr	r3, [pc, #364]	; (8001bc0 <HAL_GPIO_Init+0x32c>)
 8001a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a5e:	4a59      	ldr	r2, [pc, #356]	; (8001bc4 <HAL_GPIO_Init+0x330>)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	089b      	lsrs	r3, r3, #2
 8001a64:	3302      	adds	r3, #2
 8001a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	220f      	movs	r2, #15
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a88:	d025      	beq.n	8001ad6 <HAL_GPIO_Init+0x242>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4e      	ldr	r2, [pc, #312]	; (8001bc8 <HAL_GPIO_Init+0x334>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d01f      	beq.n	8001ad2 <HAL_GPIO_Init+0x23e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4d      	ldr	r2, [pc, #308]	; (8001bcc <HAL_GPIO_Init+0x338>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d019      	beq.n	8001ace <HAL_GPIO_Init+0x23a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a4c      	ldr	r2, [pc, #304]	; (8001bd0 <HAL_GPIO_Init+0x33c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d013      	beq.n	8001aca <HAL_GPIO_Init+0x236>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a4b      	ldr	r2, [pc, #300]	; (8001bd4 <HAL_GPIO_Init+0x340>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d00d      	beq.n	8001ac6 <HAL_GPIO_Init+0x232>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4a      	ldr	r2, [pc, #296]	; (8001bd8 <HAL_GPIO_Init+0x344>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d007      	beq.n	8001ac2 <HAL_GPIO_Init+0x22e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a49      	ldr	r2, [pc, #292]	; (8001bdc <HAL_GPIO_Init+0x348>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d101      	bne.n	8001abe <HAL_GPIO_Init+0x22a>
 8001aba:	2306      	movs	r3, #6
 8001abc:	e00c      	b.n	8001ad8 <HAL_GPIO_Init+0x244>
 8001abe:	2307      	movs	r3, #7
 8001ac0:	e00a      	b.n	8001ad8 <HAL_GPIO_Init+0x244>
 8001ac2:	2305      	movs	r3, #5
 8001ac4:	e008      	b.n	8001ad8 <HAL_GPIO_Init+0x244>
 8001ac6:	2304      	movs	r3, #4
 8001ac8:	e006      	b.n	8001ad8 <HAL_GPIO_Init+0x244>
 8001aca:	2303      	movs	r3, #3
 8001acc:	e004      	b.n	8001ad8 <HAL_GPIO_Init+0x244>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e002      	b.n	8001ad8 <HAL_GPIO_Init+0x244>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_GPIO_Init+0x244>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	f002 0203 	and.w	r2, r2, #3
 8001ade:	0092      	lsls	r2, r2, #2
 8001ae0:	4093      	lsls	r3, r2
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ae8:	4936      	ldr	r1, [pc, #216]	; (8001bc4 <HAL_GPIO_Init+0x330>)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	089b      	lsrs	r3, r3, #2
 8001aee:	3302      	adds	r3, #2
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001af6:	4b3a      	ldr	r3, [pc, #232]	; (8001be0 <HAL_GPIO_Init+0x34c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	4013      	ands	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b1a:	4a31      	ldr	r2, [pc, #196]	; (8001be0 <HAL_GPIO_Init+0x34c>)
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001b20:	4b2f      	ldr	r3, [pc, #188]	; (8001be0 <HAL_GPIO_Init+0x34c>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b44:	4a26      	ldr	r2, [pc, #152]	; (8001be0 <HAL_GPIO_Init+0x34c>)
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b4a:	4b25      	ldr	r3, [pc, #148]	; (8001be0 <HAL_GPIO_Init+0x34c>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4013      	ands	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b6e:	4a1c      	ldr	r2, [pc, #112]	; (8001be0 <HAL_GPIO_Init+0x34c>)
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b74:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <HAL_GPIO_Init+0x34c>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b98:	4a11      	ldr	r2, [pc, #68]	; (8001be0 <HAL_GPIO_Init+0x34c>)
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f47f ae78 	bne.w	80018a4 <HAL_GPIO_Init+0x10>
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	371c      	adds	r7, #28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40010000 	.word	0x40010000
 8001bc8:	48000400 	.word	0x48000400
 8001bcc:	48000800 	.word	0x48000800
 8001bd0:	48000c00 	.word	0x48000c00
 8001bd4:	48001000 	.word	0x48001000
 8001bd8:	48001400 	.word	0x48001400
 8001bdc:	48001800 	.word	0x48001800
 8001be0:	40010400 	.word	0x40010400

08001be4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001bf2:	e0cd      	b.n	8001d90 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 80c0 	beq.w	8001d8a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001c0a:	4a68      	ldr	r2, [pc, #416]	; (8001dac <HAL_GPIO_DeInit+0x1c8>)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	089b      	lsrs	r3, r3, #2
 8001c10:	3302      	adds	r3, #2
 8001c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c16:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	220f      	movs	r2, #15
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c32:	d025      	beq.n	8001c80 <HAL_GPIO_DeInit+0x9c>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a5e      	ldr	r2, [pc, #376]	; (8001db0 <HAL_GPIO_DeInit+0x1cc>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d01f      	beq.n	8001c7c <HAL_GPIO_DeInit+0x98>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a5d      	ldr	r2, [pc, #372]	; (8001db4 <HAL_GPIO_DeInit+0x1d0>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d019      	beq.n	8001c78 <HAL_GPIO_DeInit+0x94>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a5c      	ldr	r2, [pc, #368]	; (8001db8 <HAL_GPIO_DeInit+0x1d4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d013      	beq.n	8001c74 <HAL_GPIO_DeInit+0x90>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a5b      	ldr	r2, [pc, #364]	; (8001dbc <HAL_GPIO_DeInit+0x1d8>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d00d      	beq.n	8001c70 <HAL_GPIO_DeInit+0x8c>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a5a      	ldr	r2, [pc, #360]	; (8001dc0 <HAL_GPIO_DeInit+0x1dc>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d007      	beq.n	8001c6c <HAL_GPIO_DeInit+0x88>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a59      	ldr	r2, [pc, #356]	; (8001dc4 <HAL_GPIO_DeInit+0x1e0>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d101      	bne.n	8001c68 <HAL_GPIO_DeInit+0x84>
 8001c64:	2306      	movs	r3, #6
 8001c66:	e00c      	b.n	8001c82 <HAL_GPIO_DeInit+0x9e>
 8001c68:	2307      	movs	r3, #7
 8001c6a:	e00a      	b.n	8001c82 <HAL_GPIO_DeInit+0x9e>
 8001c6c:	2305      	movs	r3, #5
 8001c6e:	e008      	b.n	8001c82 <HAL_GPIO_DeInit+0x9e>
 8001c70:	2304      	movs	r3, #4
 8001c72:	e006      	b.n	8001c82 <HAL_GPIO_DeInit+0x9e>
 8001c74:	2303      	movs	r3, #3
 8001c76:	e004      	b.n	8001c82 <HAL_GPIO_DeInit+0x9e>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e002      	b.n	8001c82 <HAL_GPIO_DeInit+0x9e>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <HAL_GPIO_DeInit+0x9e>
 8001c80:	2300      	movs	r3, #0
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	f002 0203 	and.w	r2, r2, #3
 8001c88:	0092      	lsls	r2, r2, #2
 8001c8a:	4093      	lsls	r3, r2
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d132      	bne.n	8001cf8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001c92:	4b4d      	ldr	r3, [pc, #308]	; (8001dc8 <HAL_GPIO_DeInit+0x1e4>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	494b      	ldr	r1, [pc, #300]	; (8001dc8 <HAL_GPIO_DeInit+0x1e4>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001ca0:	4b49      	ldr	r3, [pc, #292]	; (8001dc8 <HAL_GPIO_DeInit+0x1e4>)
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	4947      	ldr	r1, [pc, #284]	; (8001dc8 <HAL_GPIO_DeInit+0x1e4>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001cae:	4b46      	ldr	r3, [pc, #280]	; (8001dc8 <HAL_GPIO_DeInit+0x1e4>)
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	4944      	ldr	r1, [pc, #272]	; (8001dc8 <HAL_GPIO_DeInit+0x1e4>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001cbc:	4b42      	ldr	r3, [pc, #264]	; (8001dc8 <HAL_GPIO_DeInit+0x1e4>)
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	4940      	ldr	r1, [pc, #256]	; (8001dc8 <HAL_GPIO_DeInit+0x1e4>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	220f      	movs	r2, #15
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001cda:	4a34      	ldr	r2, [pc, #208]	; (8001dac <HAL_GPIO_DeInit+0x1c8>)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	089b      	lsrs	r3, r3, #2
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	43da      	mvns	r2, r3
 8001cea:	4830      	ldr	r0, [pc, #192]	; (8001dac <HAL_GPIO_DeInit+0x1c8>)
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	089b      	lsrs	r3, r3, #2
 8001cf0:	400a      	ands	r2, r1
 8001cf2:	3302      	adds	r3, #2
 8001cf4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	2103      	movs	r1, #3
 8001d02:	fa01 f303 	lsl.w	r3, r1, r3
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	08da      	lsrs	r2, r3, #3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3208      	adds	r2, #8
 8001d14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	220f      	movs	r2, #15
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	08d2      	lsrs	r2, r2, #3
 8001d2c:	4019      	ands	r1, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3208      	adds	r2, #8
 8001d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	2103      	movs	r1, #3
 8001d40:	fa01 f303 	lsl.w	r3, r1, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	401a      	ands	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	2101      	movs	r1, #1
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	fa01 f303 	lsl.w	r3, r1, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	2103      	movs	r1, #3
 8001d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	401a      	ands	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	401a      	ands	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	fa22 f303 	lsr.w	r3, r2, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f47f af2b 	bne.w	8001bf4 <HAL_GPIO_DeInit+0x10>
  }
}
 8001d9e:	bf00      	nop
 8001da0:	371c      	adds	r7, #28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40010000 	.word	0x40010000
 8001db0:	48000400 	.word	0x48000400
 8001db4:	48000800 	.word	0x48000800
 8001db8:	48000c00 	.word	0x48000c00
 8001dbc:	48001000 	.word	0x48001000
 8001dc0:	48001400 	.word	0x48001400
 8001dc4:	48001800 	.word	0x48001800
 8001dc8:	40010400 	.word	0x40010400

08001dcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	887b      	ldrh	r3, [r7, #2]
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d002      	beq.n	8001dea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001de4:	2301      	movs	r3, #1
 8001de6:	73fb      	strb	r3, [r7, #15]
 8001de8:	e001      	b.n	8001dee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	807b      	strh	r3, [r7, #2]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e0c:	787b      	ldrb	r3, [r7, #1]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e12:	887a      	ldrh	r2, [r7, #2]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e18:	e002      	b.n	8001e20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e1a:	887a      	ldrh	r2, [r7, #2]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e36:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e38:	695a      	ldr	r2, [r3, #20]
 8001e3a:	88fb      	ldrh	r3, [r7, #6]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d006      	beq.n	8001e50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e42:	4a05      	ldr	r2, [pc, #20]	; (8001e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e44:	88fb      	ldrh	r3, [r7, #6]
 8001e46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e48:	88fb      	ldrh	r3, [r7, #6]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 f806 	bl	8001e5c <HAL_GPIO_EXTI_Callback>
  }
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40010400 	.word	0x40010400

08001e5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e081      	b.n	8001f88 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d106      	bne.n	8001e9e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f004 fdc9 	bl	8006a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2224      	movs	r2, #36	; 0x24
 8001ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0201 	bic.w	r2, r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ec2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ed2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d107      	bne.n	8001eec <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	e006      	b.n	8001efa <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ef8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d104      	bne.n	8001f0c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f0a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f1e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f2e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	ea42 0103 	orr.w	r1, r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	021a      	lsls	r2, r3, #8
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69d9      	ldr	r1, [r3, #28]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1a      	ldr	r2, [r3, #32]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f042 0201 	orr.w	r2, r2, #1
 8001f68:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2220      	movs	r2, #32
 8001f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e021      	b.n	8001fe6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2224      	movs	r2, #36	; 0x24
 8001fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0201 	bic.w	r2, r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f004 fd7c 	bl	8006ab8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b088      	sub	sp, #32
 8001ff4:	af02      	add	r7, sp, #8
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	4608      	mov	r0, r1
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4603      	mov	r3, r0
 8002000:	817b      	strh	r3, [r7, #10]
 8002002:	460b      	mov	r3, r1
 8002004:	813b      	strh	r3, [r7, #8]
 8002006:	4613      	mov	r3, r2
 8002008:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b20      	cmp	r3, #32
 8002014:	f040 80f9 	bne.w	800220a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <HAL_I2C_Mem_Write+0x34>
 800201e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002020:	2b00      	cmp	r3, #0
 8002022:	d105      	bne.n	8002030 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f44f 7200 	mov.w	r2, #512	; 0x200
 800202a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0ed      	b.n	800220c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_I2C_Mem_Write+0x4e>
 800203a:	2302      	movs	r3, #2
 800203c:	e0e6      	b.n	800220c <HAL_I2C_Mem_Write+0x21c>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002046:	f7ff fb37 	bl	80016b8 <HAL_GetTick>
 800204a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	2319      	movs	r3, #25
 8002052:	2201      	movs	r2, #1
 8002054:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f000 fac3 	bl	80025e4 <I2C_WaitOnFlagUntilTimeout>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0d1      	b.n	800220c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2221      	movs	r2, #33	; 0x21
 800206c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2240      	movs	r2, #64	; 0x40
 8002074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a3a      	ldr	r2, [r7, #32]
 8002082:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002088:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002090:	88f8      	ldrh	r0, [r7, #6]
 8002092:	893a      	ldrh	r2, [r7, #8]
 8002094:	8979      	ldrh	r1, [r7, #10]
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	9301      	str	r3, [sp, #4]
 800209a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	4603      	mov	r3, r0
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 f9d3 	bl	800244c <I2C_RequestMemoryWrite>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0a9      	b.n	800220c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020bc:	b29b      	uxth	r3, r3
 80020be:	2bff      	cmp	r3, #255	; 0xff
 80020c0:	d90e      	bls.n	80020e0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	22ff      	movs	r2, #255	; 0xff
 80020c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	8979      	ldrh	r1, [r7, #10]
 80020d0:	2300      	movs	r3, #0
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f000 fba5 	bl	8002828 <I2C_TransferConfig>
 80020de:	e00f      	b.n	8002100 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	8979      	ldrh	r1, [r7, #10]
 80020f2:	2300      	movs	r3, #0
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 fb94 	bl	8002828 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f000 faad 	bl	8002664 <I2C_WaitOnTXISFlagUntilTimeout>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e07b      	b.n	800220c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	781a      	ldrb	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800212e:	b29b      	uxth	r3, r3
 8002130:	3b01      	subs	r3, #1
 8002132:	b29a      	uxth	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002148:	b29b      	uxth	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d034      	beq.n	80021b8 <HAL_I2C_Mem_Write+0x1c8>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002152:	2b00      	cmp	r3, #0
 8002154:	d130      	bne.n	80021b8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215c:	2200      	movs	r2, #0
 800215e:	2180      	movs	r1, #128	; 0x80
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 fa3f 	bl	80025e4 <I2C_WaitOnFlagUntilTimeout>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e04d      	b.n	800220c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002174:	b29b      	uxth	r3, r3
 8002176:	2bff      	cmp	r3, #255	; 0xff
 8002178:	d90e      	bls.n	8002198 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	22ff      	movs	r2, #255	; 0xff
 800217e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002184:	b2da      	uxtb	r2, r3
 8002186:	8979      	ldrh	r1, [r7, #10]
 8002188:	2300      	movs	r3, #0
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 fb49 	bl	8002828 <I2C_TransferConfig>
 8002196:	e00f      	b.n	80021b8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219c:	b29a      	uxth	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	8979      	ldrh	r1, [r7, #10]
 80021aa:	2300      	movs	r3, #0
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 fb38 	bl	8002828 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021bc:	b29b      	uxth	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d19e      	bne.n	8002100 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 fa8c 	bl	80026e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e01a      	b.n	800220c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2220      	movs	r2, #32
 80021dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6859      	ldr	r1, [r3, #4]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <HAL_I2C_Mem_Write+0x224>)
 80021ea:	400b      	ands	r3, r1
 80021ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2220      	movs	r2, #32
 80021f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	e000      	b.n	800220c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800220a:	2302      	movs	r3, #2
  }
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	fe00e800 	.word	0xfe00e800

08002218 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b088      	sub	sp, #32
 800221c:	af02      	add	r7, sp, #8
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	4608      	mov	r0, r1
 8002222:	4611      	mov	r1, r2
 8002224:	461a      	mov	r2, r3
 8002226:	4603      	mov	r3, r0
 8002228:	817b      	strh	r3, [r7, #10]
 800222a:	460b      	mov	r3, r1
 800222c:	813b      	strh	r3, [r7, #8]
 800222e:	4613      	mov	r3, r2
 8002230:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b20      	cmp	r3, #32
 800223c:	f040 80fd 	bne.w	800243a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002240:	6a3b      	ldr	r3, [r7, #32]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d002      	beq.n	800224c <HAL_I2C_Mem_Read+0x34>
 8002246:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002248:	2b00      	cmp	r3, #0
 800224a:	d105      	bne.n	8002258 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002252:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e0f1      	b.n	800243c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800225e:	2b01      	cmp	r3, #1
 8002260:	d101      	bne.n	8002266 <HAL_I2C_Mem_Read+0x4e>
 8002262:	2302      	movs	r3, #2
 8002264:	e0ea      	b.n	800243c <HAL_I2C_Mem_Read+0x224>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800226e:	f7ff fa23 	bl	80016b8 <HAL_GetTick>
 8002272:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	2319      	movs	r3, #25
 800227a:	2201      	movs	r2, #1
 800227c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f000 f9af 	bl	80025e4 <I2C_WaitOnFlagUntilTimeout>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0d5      	b.n	800243c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2222      	movs	r2, #34	; 0x22
 8002294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2240      	movs	r2, #64	; 0x40
 800229c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a3a      	ldr	r2, [r7, #32]
 80022aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80022b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022b8:	88f8      	ldrh	r0, [r7, #6]
 80022ba:	893a      	ldrh	r2, [r7, #8]
 80022bc:	8979      	ldrh	r1, [r7, #10]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	9301      	str	r3, [sp, #4]
 80022c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	4603      	mov	r3, r0
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f000 f913 	bl	80024f4 <I2C_RequestMemoryRead>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0ad      	b.n	800243c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	2bff      	cmp	r3, #255	; 0xff
 80022e8:	d90e      	bls.n	8002308 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	22ff      	movs	r2, #255	; 0xff
 80022ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	8979      	ldrh	r1, [r7, #10]
 80022f8:	4b52      	ldr	r3, [pc, #328]	; (8002444 <HAL_I2C_Mem_Read+0x22c>)
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 fa91 	bl	8002828 <I2C_TransferConfig>
 8002306:	e00f      	b.n	8002328 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230c:	b29a      	uxth	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002316:	b2da      	uxtb	r2, r3
 8002318:	8979      	ldrh	r1, [r7, #10]
 800231a:	4b4a      	ldr	r3, [pc, #296]	; (8002444 <HAL_I2C_Mem_Read+0x22c>)
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 fa80 	bl	8002828 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232e:	2200      	movs	r2, #0
 8002330:	2104      	movs	r1, #4
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 f956 	bl	80025e4 <I2C_WaitOnFlagUntilTimeout>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e07c      	b.n	800243c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235e:	3b01      	subs	r3, #1
 8002360:	b29a      	uxth	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236a:	b29b      	uxth	r3, r3
 800236c:	3b01      	subs	r3, #1
 800236e:	b29a      	uxth	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002378:	b29b      	uxth	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d034      	beq.n	80023e8 <HAL_I2C_Mem_Read+0x1d0>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002382:	2b00      	cmp	r3, #0
 8002384:	d130      	bne.n	80023e8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238c:	2200      	movs	r2, #0
 800238e:	2180      	movs	r1, #128	; 0x80
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 f927 	bl	80025e4 <I2C_WaitOnFlagUntilTimeout>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e04d      	b.n	800243c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	2bff      	cmp	r3, #255	; 0xff
 80023a8:	d90e      	bls.n	80023c8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	22ff      	movs	r2, #255	; 0xff
 80023ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	8979      	ldrh	r1, [r7, #10]
 80023b8:	2300      	movs	r3, #0
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 fa31 	bl	8002828 <I2C_TransferConfig>
 80023c6:	e00f      	b.n	80023e8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	8979      	ldrh	r1, [r7, #10]
 80023da:	2300      	movs	r3, #0
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 fa20 	bl	8002828 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d19a      	bne.n	8002328 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f974 	bl	80026e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e01a      	b.n	800243c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2220      	movs	r2, #32
 800240c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6859      	ldr	r1, [r3, #4]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <HAL_I2C_Mem_Read+0x230>)
 800241a:	400b      	ands	r3, r1
 800241c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2220      	movs	r2, #32
 8002422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	e000      	b.n	800243c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800243a:	2302      	movs	r3, #2
  }
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	80002400 	.word	0x80002400
 8002448:	fe00e800 	.word	0xfe00e800

0800244c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af02      	add	r7, sp, #8
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	4608      	mov	r0, r1
 8002456:	4611      	mov	r1, r2
 8002458:	461a      	mov	r2, r3
 800245a:	4603      	mov	r3, r0
 800245c:	817b      	strh	r3, [r7, #10]
 800245e:	460b      	mov	r3, r1
 8002460:	813b      	strh	r3, [r7, #8]
 8002462:	4613      	mov	r3, r2
 8002464:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002466:	88fb      	ldrh	r3, [r7, #6]
 8002468:	b2da      	uxtb	r2, r3
 800246a:	8979      	ldrh	r1, [r7, #10]
 800246c:	4b20      	ldr	r3, [pc, #128]	; (80024f0 <I2C_RequestMemoryWrite+0xa4>)
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 f9d7 	bl	8002828 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800247a:	69fa      	ldr	r2, [r7, #28]
 800247c:	69b9      	ldr	r1, [r7, #24]
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 f8f0 	bl	8002664 <I2C_WaitOnTXISFlagUntilTimeout>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e02c      	b.n	80024e8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d105      	bne.n	80024a0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002494:	893b      	ldrh	r3, [r7, #8]
 8002496:	b2da      	uxtb	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	629a      	str	r2, [r3, #40]	; 0x28
 800249e:	e015      	b.n	80024cc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80024a0:	893b      	ldrh	r3, [r7, #8]
 80024a2:	0a1b      	lsrs	r3, r3, #8
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024ae:	69fa      	ldr	r2, [r7, #28]
 80024b0:	69b9      	ldr	r1, [r7, #24]
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 f8d6 	bl	8002664 <I2C_WaitOnTXISFlagUntilTimeout>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e012      	b.n	80024e8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024c2:	893b      	ldrh	r3, [r7, #8]
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2200      	movs	r2, #0
 80024d4:	2180      	movs	r1, #128	; 0x80
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 f884 	bl	80025e4 <I2C_WaitOnFlagUntilTimeout>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	80002000 	.word	0x80002000

080024f4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af02      	add	r7, sp, #8
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	4608      	mov	r0, r1
 80024fe:	4611      	mov	r1, r2
 8002500:	461a      	mov	r2, r3
 8002502:	4603      	mov	r3, r0
 8002504:	817b      	strh	r3, [r7, #10]
 8002506:	460b      	mov	r3, r1
 8002508:	813b      	strh	r3, [r7, #8]
 800250a:	4613      	mov	r3, r2
 800250c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800250e:	88fb      	ldrh	r3, [r7, #6]
 8002510:	b2da      	uxtb	r2, r3
 8002512:	8979      	ldrh	r1, [r7, #10]
 8002514:	4b20      	ldr	r3, [pc, #128]	; (8002598 <I2C_RequestMemoryRead+0xa4>)
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	2300      	movs	r3, #0
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f984 	bl	8002828 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002520:	69fa      	ldr	r2, [r7, #28]
 8002522:	69b9      	ldr	r1, [r7, #24]
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f000 f89d 	bl	8002664 <I2C_WaitOnTXISFlagUntilTimeout>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e02c      	b.n	800258e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002534:	88fb      	ldrh	r3, [r7, #6]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d105      	bne.n	8002546 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800253a:	893b      	ldrh	r3, [r7, #8]
 800253c:	b2da      	uxtb	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	629a      	str	r2, [r3, #40]	; 0x28
 8002544:	e015      	b.n	8002572 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002546:	893b      	ldrh	r3, [r7, #8]
 8002548:	0a1b      	lsrs	r3, r3, #8
 800254a:	b29b      	uxth	r3, r3
 800254c:	b2da      	uxtb	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002554:	69fa      	ldr	r2, [r7, #28]
 8002556:	69b9      	ldr	r1, [r7, #24]
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 f883 	bl	8002664 <I2C_WaitOnTXISFlagUntilTimeout>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e012      	b.n	800258e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002568:	893b      	ldrh	r3, [r7, #8]
 800256a:	b2da      	uxtb	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	2200      	movs	r2, #0
 800257a:	2140      	movs	r1, #64	; 0x40
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 f831 	bl	80025e4 <I2C_WaitOnFlagUntilTimeout>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e000      	b.n	800258e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	80002000 	.word	0x80002000

0800259c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d103      	bne.n	80025ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2200      	movs	r2, #0
 80025b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d007      	beq.n	80025d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699a      	ldr	r2, [r3, #24]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0201 	orr.w	r2, r2, #1
 80025d6:	619a      	str	r2, [r3, #24]
  }
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	4613      	mov	r3, r2
 80025f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025f4:	e022      	b.n	800263c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025fc:	d01e      	beq.n	800263c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025fe:	f7ff f85b 	bl	80016b8 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d302      	bcc.n	8002614 <I2C_WaitOnFlagUntilTimeout+0x30>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d113      	bne.n	800263c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002618:	f043 0220 	orr.w	r2, r3, #32
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2220      	movs	r2, #32
 8002624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e00f      	b.n	800265c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699a      	ldr	r2, [r3, #24]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	4013      	ands	r3, r2
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	429a      	cmp	r2, r3
 800264a:	bf0c      	ite	eq
 800264c:	2301      	moveq	r3, #1
 800264e:	2300      	movne	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	461a      	mov	r2, r3
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	429a      	cmp	r2, r3
 8002658:	d0cd      	beq.n	80025f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002670:	e02c      	b.n	80026cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 f870 	bl	800275c <I2C_IsAcknowledgeFailed>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e02a      	b.n	80026dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800268c:	d01e      	beq.n	80026cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800268e:	f7ff f813 	bl	80016b8 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	429a      	cmp	r2, r3
 800269c:	d302      	bcc.n	80026a4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d113      	bne.n	80026cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a8:	f043 0220 	orr.w	r2, r3, #32
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e007      	b.n	80026dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d1cb      	bne.n	8002672 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026f0:	e028      	b.n	8002744 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 f830 	bl	800275c <I2C_IsAcknowledgeFailed>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e026      	b.n	8002754 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002706:	f7fe ffd7 	bl	80016b8 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	429a      	cmp	r2, r3
 8002714:	d302      	bcc.n	800271c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d113      	bne.n	8002744 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002720:	f043 0220 	orr.w	r2, r3, #32
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2220      	movs	r2, #32
 800272c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e007      	b.n	8002754 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	f003 0320 	and.w	r3, r3, #32
 800274e:	2b20      	cmp	r3, #32
 8002750:	d1cf      	bne.n	80026f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	f003 0310 	and.w	r3, r3, #16
 8002772:	2b10      	cmp	r3, #16
 8002774:	d151      	bne.n	800281a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002776:	e022      	b.n	80027be <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800277e:	d01e      	beq.n	80027be <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002780:	f7fe ff9a 	bl	80016b8 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	429a      	cmp	r2, r3
 800278e:	d302      	bcc.n	8002796 <I2C_IsAcknowledgeFailed+0x3a>
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d113      	bne.n	80027be <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	f043 0220 	orr.w	r2, r3, #32
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2220      	movs	r2, #32
 80027a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e02e      	b.n	800281c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	f003 0320 	and.w	r3, r3, #32
 80027c8:	2b20      	cmp	r3, #32
 80027ca:	d1d5      	bne.n	8002778 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2210      	movs	r2, #16
 80027d2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2220      	movs	r2, #32
 80027da:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f7ff fedd 	bl	800259c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6859      	ldr	r1, [r3, #4]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <I2C_IsAcknowledgeFailed+0xc8>)
 80027ee:	400b      	ands	r3, r1
 80027f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	f043 0204 	orr.w	r2, r3, #4
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2220      	movs	r2, #32
 8002802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	fe00e800 	.word	0xfe00e800

08002828 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	607b      	str	r3, [r7, #4]
 8002832:	460b      	mov	r3, r1
 8002834:	817b      	strh	r3, [r7, #10]
 8002836:	4613      	mov	r3, r2
 8002838:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	0d5b      	lsrs	r3, r3, #21
 8002844:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002848:	4b0d      	ldr	r3, [pc, #52]	; (8002880 <I2C_TransferConfig+0x58>)
 800284a:	430b      	orrs	r3, r1
 800284c:	43db      	mvns	r3, r3
 800284e:	ea02 0103 	and.w	r1, r2, r3
 8002852:	897b      	ldrh	r3, [r7, #10]
 8002854:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002858:	7a7b      	ldrb	r3, [r7, #9]
 800285a:	041b      	lsls	r3, r3, #16
 800285c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002860:	431a      	orrs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	431a      	orrs	r2, r3
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	431a      	orrs	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	03ff63ff 	.word	0x03ff63ff

08002884 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b20      	cmp	r3, #32
 8002898:	d138      	bne.n	800290c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d101      	bne.n	80028a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028a4:	2302      	movs	r3, #2
 80028a6:	e032      	b.n	800290e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2224      	movs	r2, #36	; 0x24
 80028b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0201 	bic.w	r2, r2, #1
 80028c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6819      	ldr	r1, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2220      	movs	r2, #32
 80028fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	e000      	b.n	800290e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800290c:	2302      	movs	r3, #2
  }
}
 800290e:	4618      	mov	r0, r3
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800291a:	b480      	push	{r7}
 800291c:	b085      	sub	sp, #20
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
 8002922:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b20      	cmp	r3, #32
 800292e:	d139      	bne.n	80029a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800293a:	2302      	movs	r3, #2
 800293c:	e033      	b.n	80029a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2224      	movs	r2, #36	; 0x24
 800294a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0201 	bic.w	r2, r2, #1
 800295c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800296c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	021b      	lsls	r3, r3, #8
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	4313      	orrs	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2220      	movs	r2, #32
 8002994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029a0:	2300      	movs	r3, #0
 80029a2:	e000      	b.n	80029a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029a4:	2302      	movs	r3, #2
  }
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80029b8:	4b04      	ldr	r3, [pc, #16]	; (80029cc <HAL_PWREx_GetVoltageRange+0x18>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40007000 	.word	0x40007000

080029d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029de:	d130      	bne.n	8002a42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80029e0:	4b23      	ldr	r3, [pc, #140]	; (8002a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029ec:	d038      	beq.n	8002a60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029ee:	4b20      	ldr	r3, [pc, #128]	; (8002a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029f6:	4a1e      	ldr	r2, [pc, #120]	; (8002a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029fe:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2232      	movs	r2, #50	; 0x32
 8002a04:	fb02 f303 	mul.w	r3, r2, r3
 8002a08:	4a1b      	ldr	r2, [pc, #108]	; (8002a78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0e:	0c9b      	lsrs	r3, r3, #18
 8002a10:	3301      	adds	r3, #1
 8002a12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a14:	e002      	b.n	8002a1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a1c:	4b14      	ldr	r3, [pc, #80]	; (8002a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a28:	d102      	bne.n	8002a30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1f2      	bne.n	8002a16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a30:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a3c:	d110      	bne.n	8002a60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e00f      	b.n	8002a62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a42:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a4e:	d007      	beq.n	8002a60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a50:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a58:	4a05      	ldr	r2, [pc, #20]	; (8002a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	40007000 	.word	0x40007000
 8002a74:	200000d0 	.word	0x200000d0
 8002a78:	431bde83 	.word	0x431bde83

08002a7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e3d4      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a8e:	4ba1      	ldr	r3, [pc, #644]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 030c 	and.w	r3, r3, #12
 8002a96:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a98:	4b9e      	ldr	r3, [pc, #632]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0310 	and.w	r3, r3, #16
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 80e4 	beq.w	8002c78 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d007      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x4a>
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	2b0c      	cmp	r3, #12
 8002aba:	f040 808b 	bne.w	8002bd4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	f040 8087 	bne.w	8002bd4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ac6:	4b93      	ldr	r3, [pc, #588]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <HAL_RCC_OscConfig+0x62>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e3ac      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1a      	ldr	r2, [r3, #32]
 8002ae2:	4b8c      	ldr	r3, [pc, #560]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d004      	beq.n	8002af8 <HAL_RCC_OscConfig+0x7c>
 8002aee:	4b89      	ldr	r3, [pc, #548]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002af6:	e005      	b.n	8002b04 <HAL_RCC_OscConfig+0x88>
 8002af8:	4b86      	ldr	r3, [pc, #536]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002afe:	091b      	lsrs	r3, r3, #4
 8002b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d223      	bcs.n	8002b50 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 fd71 	bl	80035f4 <RCC_SetFlashLatencyFromMSIRange>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e38d      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b1c:	4b7d      	ldr	r3, [pc, #500]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a7c      	ldr	r2, [pc, #496]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b22:	f043 0308 	orr.w	r3, r3, #8
 8002b26:	6013      	str	r3, [r2, #0]
 8002b28:	4b7a      	ldr	r3, [pc, #488]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	4977      	ldr	r1, [pc, #476]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b3a:	4b76      	ldr	r3, [pc, #472]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	021b      	lsls	r3, r3, #8
 8002b48:	4972      	ldr	r1, [pc, #456]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	604b      	str	r3, [r1, #4]
 8002b4e:	e025      	b.n	8002b9c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b50:	4b70      	ldr	r3, [pc, #448]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a6f      	ldr	r2, [pc, #444]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b56:	f043 0308 	orr.w	r3, r3, #8
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	4b6d      	ldr	r3, [pc, #436]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	496a      	ldr	r1, [pc, #424]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b6e:	4b69      	ldr	r3, [pc, #420]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	4965      	ldr	r1, [pc, #404]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d109      	bne.n	8002b9c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 fd31 	bl	80035f4 <RCC_SetFlashLatencyFromMSIRange>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e34d      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b9c:	f000 fc36 	bl	800340c <HAL_RCC_GetSysClockFreq>
 8002ba0:	4601      	mov	r1, r0
 8002ba2:	4b5c      	ldr	r3, [pc, #368]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	091b      	lsrs	r3, r3, #4
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	4a5a      	ldr	r2, [pc, #360]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002bae:	5cd3      	ldrb	r3, [r2, r3]
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	fa21 f303 	lsr.w	r3, r1, r3
 8002bb8:	4a58      	ldr	r2, [pc, #352]	; (8002d1c <HAL_RCC_OscConfig+0x2a0>)
 8002bba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002bbc:	4b58      	ldr	r3, [pc, #352]	; (8002d20 <HAL_RCC_OscConfig+0x2a4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f003 ffe1 	bl	8006b88 <HAL_InitTick>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d052      	beq.n	8002c76 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
 8002bd2:	e331      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d032      	beq.n	8002c42 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bdc:	4b4d      	ldr	r3, [pc, #308]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a4c      	ldr	r2, [pc, #304]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002be8:	f7fe fd66 	bl	80016b8 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bf0:	f7fe fd62 	bl	80016b8 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e31a      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c02:	4b44      	ldr	r3, [pc, #272]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c0e:	4b41      	ldr	r3, [pc, #260]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a40      	ldr	r2, [pc, #256]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c14:	f043 0308 	orr.w	r3, r3, #8
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	4b3e      	ldr	r3, [pc, #248]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	493b      	ldr	r1, [pc, #236]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c2c:	4b39      	ldr	r3, [pc, #228]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	021b      	lsls	r3, r3, #8
 8002c3a:	4936      	ldr	r1, [pc, #216]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	604b      	str	r3, [r1, #4]
 8002c40:	e01a      	b.n	8002c78 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c42:	4b34      	ldr	r3, [pc, #208]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a33      	ldr	r2, [pc, #204]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c48:	f023 0301 	bic.w	r3, r3, #1
 8002c4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c4e:	f7fe fd33 	bl	80016b8 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c56:	f7fe fd2f 	bl	80016b8 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e2e7      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c68:	4b2a      	ldr	r3, [pc, #168]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1f0      	bne.n	8002c56 <HAL_RCC_OscConfig+0x1da>
 8002c74:	e000      	b.n	8002c78 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c76:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d074      	beq.n	8002d6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d005      	beq.n	8002c96 <HAL_RCC_OscConfig+0x21a>
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	2b0c      	cmp	r3, #12
 8002c8e:	d10e      	bne.n	8002cae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d10b      	bne.n	8002cae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c96:	4b1f      	ldr	r3, [pc, #124]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d064      	beq.n	8002d6c <HAL_RCC_OscConfig+0x2f0>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d160      	bne.n	8002d6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e2c4      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb6:	d106      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x24a>
 8002cb8:	4b16      	ldr	r3, [pc, #88]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a15      	ldr	r2, [pc, #84]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	e01d      	b.n	8002d02 <HAL_RCC_OscConfig+0x286>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cce:	d10c      	bne.n	8002cea <HAL_RCC_OscConfig+0x26e>
 8002cd0:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a0f      	ldr	r2, [pc, #60]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	4b0d      	ldr	r3, [pc, #52]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0c      	ldr	r2, [pc, #48]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	e00b      	b.n	8002d02 <HAL_RCC_OscConfig+0x286>
 8002cea:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a09      	ldr	r2, [pc, #36]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a06      	ldr	r2, [pc, #24]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d00:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d01c      	beq.n	8002d44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0a:	f7fe fcd5 	bl	80016b8 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d10:	e011      	b.n	8002d36 <HAL_RCC_OscConfig+0x2ba>
 8002d12:	bf00      	nop
 8002d14:	40021000 	.word	0x40021000
 8002d18:	08007784 	.word	0x08007784
 8002d1c:	200000d0 	.word	0x200000d0
 8002d20:	200000c4 	.word	0x200000c4
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d24:	f7fe fcc8 	bl	80016b8 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	; 0x64
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e280      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d36:	4baf      	ldr	r3, [pc, #700]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x2a8>
 8002d42:	e014      	b.n	8002d6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7fe fcb8 	bl	80016b8 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d4c:	f7fe fcb4 	bl	80016b8 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b64      	cmp	r3, #100	; 0x64
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e26c      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d5e:	4ba5      	ldr	r3, [pc, #660]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x2d0>
 8002d6a:	e000      	b.n	8002d6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d060      	beq.n	8002e3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_OscConfig+0x310>
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	2b0c      	cmp	r3, #12
 8002d84:	d119      	bne.n	8002dba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d116      	bne.n	8002dba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d8c:	4b99      	ldr	r3, [pc, #612]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_RCC_OscConfig+0x328>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e249      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da4:	4b93      	ldr	r3, [pc, #588]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	061b      	lsls	r3, r3, #24
 8002db2:	4990      	ldr	r1, [pc, #576]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002db8:	e040      	b.n	8002e3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d023      	beq.n	8002e0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dc2:	4b8c      	ldr	r3, [pc, #560]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a8b      	ldr	r2, [pc, #556]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dce:	f7fe fc73 	bl	80016b8 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd6:	f7fe fc6f 	bl	80016b8 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e227      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002de8:	4b82      	ldr	r3, [pc, #520]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0f0      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df4:	4b7f      	ldr	r3, [pc, #508]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	061b      	lsls	r3, r3, #24
 8002e02:	497c      	ldr	r1, [pc, #496]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	604b      	str	r3, [r1, #4]
 8002e08:	e018      	b.n	8002e3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e0a:	4b7a      	ldr	r3, [pc, #488]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a79      	ldr	r2, [pc, #484]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e16:	f7fe fc4f 	bl	80016b8 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e1e:	f7fe fc4b 	bl	80016b8 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e203      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e30:	4b70      	ldr	r3, [pc, #448]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1f0      	bne.n	8002e1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d03c      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d01c      	beq.n	8002e8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e50:	4b68      	ldr	r3, [pc, #416]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e56:	4a67      	ldr	r2, [pc, #412]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e58:	f043 0301 	orr.w	r3, r3, #1
 8002e5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e60:	f7fe fc2a 	bl	80016b8 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e68:	f7fe fc26 	bl	80016b8 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e1de      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e7a:	4b5e      	ldr	r3, [pc, #376]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0ef      	beq.n	8002e68 <HAL_RCC_OscConfig+0x3ec>
 8002e88:	e01b      	b.n	8002ec2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e8a:	4b5a      	ldr	r3, [pc, #360]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e90:	4a58      	ldr	r2, [pc, #352]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e92:	f023 0301 	bic.w	r3, r3, #1
 8002e96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9a:	f7fe fc0d 	bl	80016b8 <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea2:	f7fe fc09 	bl	80016b8 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e1c1      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002eb4:	4b4f      	ldr	r3, [pc, #316]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1ef      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 80a6 	beq.w	800301c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ed4:	4b47      	ldr	r3, [pc, #284]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10d      	bne.n	8002efc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee0:	4b44      	ldr	r3, [pc, #272]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee4:	4a43      	ldr	r2, [pc, #268]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eea:	6593      	str	r3, [r2, #88]	; 0x58
 8002eec:	4b41      	ldr	r3, [pc, #260]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002efc:	4b3e      	ldr	r3, [pc, #248]	; (8002ff8 <HAL_RCC_OscConfig+0x57c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d118      	bne.n	8002f3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f08:	4b3b      	ldr	r3, [pc, #236]	; (8002ff8 <HAL_RCC_OscConfig+0x57c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a3a      	ldr	r2, [pc, #232]	; (8002ff8 <HAL_RCC_OscConfig+0x57c>)
 8002f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f14:	f7fe fbd0 	bl	80016b8 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f1c:	f7fe fbcc 	bl	80016b8 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e184      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f2e:	4b32      	ldr	r3, [pc, #200]	; (8002ff8 <HAL_RCC_OscConfig+0x57c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d108      	bne.n	8002f54 <HAL_RCC_OscConfig+0x4d8>
 8002f42:	4b2c      	ldr	r3, [pc, #176]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f48:	4a2a      	ldr	r2, [pc, #168]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f52:	e024      	b.n	8002f9e <HAL_RCC_OscConfig+0x522>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b05      	cmp	r3, #5
 8002f5a:	d110      	bne.n	8002f7e <HAL_RCC_OscConfig+0x502>
 8002f5c:	4b25      	ldr	r3, [pc, #148]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f62:	4a24      	ldr	r2, [pc, #144]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f64:	f043 0304 	orr.w	r3, r3, #4
 8002f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f6c:	4b21      	ldr	r3, [pc, #132]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f72:	4a20      	ldr	r2, [pc, #128]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f7c:	e00f      	b.n	8002f9e <HAL_RCC_OscConfig+0x522>
 8002f7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f84:	4a1b      	ldr	r2, [pc, #108]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f86:	f023 0301 	bic.w	r3, r3, #1
 8002f8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f8e:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f94:	4a17      	ldr	r2, [pc, #92]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f96:	f023 0304 	bic.w	r3, r3, #4
 8002f9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d016      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa6:	f7fe fb87 	bl	80016b8 <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fac:	e00a      	b.n	8002fc4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fae:	f7fe fb83 	bl	80016b8 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e139      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0ed      	beq.n	8002fae <HAL_RCC_OscConfig+0x532>
 8002fd2:	e01a      	b.n	800300a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd4:	f7fe fb70 	bl	80016b8 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fda:	e00f      	b.n	8002ffc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fdc:	f7fe fb6c 	bl	80016b8 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d906      	bls.n	8002ffc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e122      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
 8002ff2:	bf00      	nop
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ffc:	4b90      	ldr	r3, [pc, #576]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8002ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1e8      	bne.n	8002fdc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800300a:	7ffb      	ldrb	r3, [r7, #31]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d105      	bne.n	800301c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003010:	4b8b      	ldr	r3, [pc, #556]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003014:	4a8a      	ldr	r2, [pc, #552]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800301a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 8108 	beq.w	8003236 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302a:	2b02      	cmp	r3, #2
 800302c:	f040 80d0 	bne.w	80031d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003030:	4b83      	ldr	r3, [pc, #524]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f003 0203 	and.w	r2, r3, #3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003040:	429a      	cmp	r2, r3
 8003042:	d130      	bne.n	80030a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	3b01      	subs	r3, #1
 8003050:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003052:	429a      	cmp	r2, r3
 8003054:	d127      	bne.n	80030a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003060:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003062:	429a      	cmp	r2, r3
 8003064:	d11f      	bne.n	80030a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003070:	2a07      	cmp	r2, #7
 8003072:	bf14      	ite	ne
 8003074:	2201      	movne	r2, #1
 8003076:	2200      	moveq	r2, #0
 8003078:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800307a:	4293      	cmp	r3, r2
 800307c:	d113      	bne.n	80030a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003088:	085b      	lsrs	r3, r3, #1
 800308a:	3b01      	subs	r3, #1
 800308c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800308e:	429a      	cmp	r2, r3
 8003090:	d109      	bne.n	80030a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	085b      	lsrs	r3, r3, #1
 800309e:	3b01      	subs	r3, #1
 80030a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d06e      	beq.n	8003184 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	2b0c      	cmp	r3, #12
 80030aa:	d069      	beq.n	8003180 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030ac:	4b64      	ldr	r3, [pc, #400]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d105      	bne.n	80030c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80030b8:	4b61      	ldr	r3, [pc, #388]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0b7      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030c8:	4b5d      	ldr	r3, [pc, #372]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a5c      	ldr	r2, [pc, #368]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80030ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030d4:	f7fe faf0 	bl	80016b8 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030dc:	f7fe faec 	bl	80016b8 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e0a4      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ee:	4b54      	ldr	r3, [pc, #336]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030fa:	4b51      	ldr	r3, [pc, #324]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	4b51      	ldr	r3, [pc, #324]	; (8003244 <HAL_RCC_OscConfig+0x7c8>)
 8003100:	4013      	ands	r3, r2
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800310a:	3a01      	subs	r2, #1
 800310c:	0112      	lsls	r2, r2, #4
 800310e:	4311      	orrs	r1, r2
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003114:	0212      	lsls	r2, r2, #8
 8003116:	4311      	orrs	r1, r2
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800311c:	0852      	lsrs	r2, r2, #1
 800311e:	3a01      	subs	r2, #1
 8003120:	0552      	lsls	r2, r2, #21
 8003122:	4311      	orrs	r1, r2
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003128:	0852      	lsrs	r2, r2, #1
 800312a:	3a01      	subs	r2, #1
 800312c:	0652      	lsls	r2, r2, #25
 800312e:	4311      	orrs	r1, r2
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003134:	0912      	lsrs	r2, r2, #4
 8003136:	0452      	lsls	r2, r2, #17
 8003138:	430a      	orrs	r2, r1
 800313a:	4941      	ldr	r1, [pc, #260]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 800313c:	4313      	orrs	r3, r2
 800313e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003140:	4b3f      	ldr	r3, [pc, #252]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a3e      	ldr	r2, [pc, #248]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800314a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800314c:	4b3c      	ldr	r3, [pc, #240]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	4a3b      	ldr	r2, [pc, #236]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003156:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003158:	f7fe faae 	bl	80016b8 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003160:	f7fe faaa 	bl	80016b8 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e062      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003172:	4b33      	ldr	r3, [pc, #204]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800317e:	e05a      	b.n	8003236 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e059      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003184:	4b2e      	ldr	r3, [pc, #184]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d152      	bne.n	8003236 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003190:	4b2b      	ldr	r3, [pc, #172]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a2a      	ldr	r2, [pc, #168]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800319a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800319c:	4b28      	ldr	r3, [pc, #160]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4a27      	ldr	r2, [pc, #156]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80031a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031a8:	f7fe fa86 	bl	80016b8 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b0:	f7fe fa82 	bl	80016b8 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e03a      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031c2:	4b1f      	ldr	r3, [pc, #124]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCC_OscConfig+0x734>
 80031ce:	e032      	b.n	8003236 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	2b0c      	cmp	r3, #12
 80031d4:	d02d      	beq.n	8003232 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d6:	4b1a      	ldr	r3, [pc, #104]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a19      	ldr	r2, [pc, #100]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80031dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031e0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80031e2:	4b17      	ldr	r3, [pc, #92]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d105      	bne.n	80031fa <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80031ee:	4b14      	ldr	r3, [pc, #80]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	4a13      	ldr	r2, [pc, #76]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80031f4:	f023 0303 	bic.w	r3, r3, #3
 80031f8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80031fa:	4b11      	ldr	r3, [pc, #68]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	4a10      	ldr	r2, [pc, #64]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003200:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003208:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320a:	f7fe fa55 	bl	80016b8 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003212:	f7fe fa51 	bl	80016b8 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e009      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003224:	4b06      	ldr	r3, [pc, #24]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f0      	bne.n	8003212 <HAL_RCC_OscConfig+0x796>
 8003230:	e001      	b.n	8003236 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3720      	adds	r7, #32
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40021000 	.word	0x40021000
 8003244:	f99d808c 	.word	0xf99d808c

08003248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0c8      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800325c:	4b66      	ldr	r3, [pc, #408]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d910      	bls.n	800328c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326a:	4b63      	ldr	r3, [pc, #396]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f023 0207 	bic.w	r2, r3, #7
 8003272:	4961      	ldr	r1, [pc, #388]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	4313      	orrs	r3, r2
 8003278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800327a:	4b5f      	ldr	r3, [pc, #380]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d001      	beq.n	800328c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0b0      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	d04c      	beq.n	8003332 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b03      	cmp	r3, #3
 800329e:	d107      	bne.n	80032b0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032a0:	4b56      	ldr	r3, [pc, #344]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d121      	bne.n	80032f0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e09e      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d107      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032b8:	4b50      	ldr	r3, [pc, #320]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d115      	bne.n	80032f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e092      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d107      	bne.n	80032e0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032d0:	4b4a      	ldr	r3, [pc, #296]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d109      	bne.n	80032f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e086      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e0:	4b46      	ldr	r3, [pc, #280]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e07e      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032f0:	4b42      	ldr	r3, [pc, #264]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f023 0203 	bic.w	r2, r3, #3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	493f      	ldr	r1, [pc, #252]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003302:	f7fe f9d9 	bl	80016b8 <HAL_GetTick>
 8003306:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003308:	e00a      	b.n	8003320 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800330a:	f7fe f9d5 	bl	80016b8 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	f241 3288 	movw	r2, #5000	; 0x1388
 8003318:	4293      	cmp	r3, r2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e066      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003320:	4b36      	ldr	r3, [pc, #216]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 020c 	and.w	r2, r3, #12
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	429a      	cmp	r2, r3
 8003330:	d1eb      	bne.n	800330a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d008      	beq.n	8003350 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800333e:	4b2f      	ldr	r3, [pc, #188]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	492c      	ldr	r1, [pc, #176]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 800334c:	4313      	orrs	r3, r2
 800334e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003350:	4b29      	ldr	r3, [pc, #164]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d210      	bcs.n	8003380 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335e:	4b26      	ldr	r3, [pc, #152]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f023 0207 	bic.w	r2, r3, #7
 8003366:	4924      	ldr	r1, [pc, #144]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	4313      	orrs	r3, r2
 800336c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800336e:	4b22      	ldr	r3, [pc, #136]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d001      	beq.n	8003380 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e036      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800338c:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	4918      	ldr	r1, [pc, #96]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 800339a:	4313      	orrs	r3, r2
 800339c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d009      	beq.n	80033be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033aa:	4b14      	ldr	r3, [pc, #80]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	4910      	ldr	r1, [pc, #64]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033be:	f000 f825 	bl	800340c <HAL_RCC_GetSysClockFreq>
 80033c2:	4601      	mov	r1, r0
 80033c4:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	091b      	lsrs	r3, r3, #4
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	4a0c      	ldr	r2, [pc, #48]	; (8003400 <HAL_RCC_ClockConfig+0x1b8>)
 80033d0:	5cd3      	ldrb	r3, [r2, r3]
 80033d2:	f003 031f 	and.w	r3, r3, #31
 80033d6:	fa21 f303 	lsr.w	r3, r1, r3
 80033da:	4a0a      	ldr	r2, [pc, #40]	; (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80033dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033de:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <HAL_RCC_ClockConfig+0x1c0>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f003 fbd0 	bl	8006b88 <HAL_InitTick>
 80033e8:	4603      	mov	r3, r0
 80033ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80033ec:	7afb      	ldrb	r3, [r7, #11]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40022000 	.word	0x40022000
 80033fc:	40021000 	.word	0x40021000
 8003400:	08007784 	.word	0x08007784
 8003404:	200000d0 	.word	0x200000d0
 8003408:	200000c4 	.word	0x200000c4

0800340c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800340c:	b480      	push	{r7}
 800340e:	b089      	sub	sp, #36	; 0x24
 8003410:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	61fb      	str	r3, [r7, #28]
 8003416:	2300      	movs	r3, #0
 8003418:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800341a:	4b3d      	ldr	r3, [pc, #244]	; (8003510 <HAL_RCC_GetSysClockFreq+0x104>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 030c 	and.w	r3, r3, #12
 8003422:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003424:	4b3a      	ldr	r3, [pc, #232]	; (8003510 <HAL_RCC_GetSysClockFreq+0x104>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <HAL_RCC_GetSysClockFreq+0x34>
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	2b0c      	cmp	r3, #12
 8003438:	d121      	bne.n	800347e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d11e      	bne.n	800347e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003440:	4b33      	ldr	r3, [pc, #204]	; (8003510 <HAL_RCC_GetSysClockFreq+0x104>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d107      	bne.n	800345c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800344c:	4b30      	ldr	r3, [pc, #192]	; (8003510 <HAL_RCC_GetSysClockFreq+0x104>)
 800344e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003452:	0a1b      	lsrs	r3, r3, #8
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	61fb      	str	r3, [r7, #28]
 800345a:	e005      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800345c:	4b2c      	ldr	r3, [pc, #176]	; (8003510 <HAL_RCC_GetSysClockFreq+0x104>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003468:	4a2a      	ldr	r2, [pc, #168]	; (8003514 <HAL_RCC_GetSysClockFreq+0x108>)
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003470:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10d      	bne.n	8003494 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800347c:	e00a      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	2b04      	cmp	r3, #4
 8003482:	d102      	bne.n	800348a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003484:	4b24      	ldr	r3, [pc, #144]	; (8003518 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003486:	61bb      	str	r3, [r7, #24]
 8003488:	e004      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	2b08      	cmp	r3, #8
 800348e:	d101      	bne.n	8003494 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003490:	4b22      	ldr	r3, [pc, #136]	; (800351c <HAL_RCC_GetSysClockFreq+0x110>)
 8003492:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	2b0c      	cmp	r3, #12
 8003498:	d133      	bne.n	8003502 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800349a:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <HAL_RCC_GetSysClockFreq+0x104>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d002      	beq.n	80034b0 <HAL_RCC_GetSysClockFreq+0xa4>
 80034aa:	2b03      	cmp	r3, #3
 80034ac:	d003      	beq.n	80034b6 <HAL_RCC_GetSysClockFreq+0xaa>
 80034ae:	e005      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034b0:	4b19      	ldr	r3, [pc, #100]	; (8003518 <HAL_RCC_GetSysClockFreq+0x10c>)
 80034b2:	617b      	str	r3, [r7, #20]
      break;
 80034b4:	e005      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034b6:	4b19      	ldr	r3, [pc, #100]	; (800351c <HAL_RCC_GetSysClockFreq+0x110>)
 80034b8:	617b      	str	r3, [r7, #20]
      break;
 80034ba:	e002      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	617b      	str	r3, [r7, #20]
      break;
 80034c0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034c2:	4b13      	ldr	r3, [pc, #76]	; (8003510 <HAL_RCC_GetSysClockFreq+0x104>)
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	091b      	lsrs	r3, r3, #4
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	3301      	adds	r3, #1
 80034ce:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034d0:	4b0f      	ldr	r3, [pc, #60]	; (8003510 <HAL_RCC_GetSysClockFreq+0x104>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	0a1b      	lsrs	r3, r3, #8
 80034d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	fb02 f203 	mul.w	r2, r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034e8:	4b09      	ldr	r3, [pc, #36]	; (8003510 <HAL_RCC_GetSysClockFreq+0x104>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	0e5b      	lsrs	r3, r3, #25
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	3301      	adds	r3, #1
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003500:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003502:	69bb      	ldr	r3, [r7, #24]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3724      	adds	r7, #36	; 0x24
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	40021000 	.word	0x40021000
 8003514:	0800779c 	.word	0x0800779c
 8003518:	00f42400 	.word	0x00f42400
 800351c:	007a1200 	.word	0x007a1200

08003520 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003524:	4b03      	ldr	r3, [pc, #12]	; (8003534 <HAL_RCC_GetHCLKFreq+0x14>)
 8003526:	681b      	ldr	r3, [r3, #0]
}
 8003528:	4618      	mov	r0, r3
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	200000d0 	.word	0x200000d0

08003538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800353c:	f7ff fff0 	bl	8003520 <HAL_RCC_GetHCLKFreq>
 8003540:	4601      	mov	r1, r0
 8003542:	4b06      	ldr	r3, [pc, #24]	; (800355c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	0a1b      	lsrs	r3, r3, #8
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	4a04      	ldr	r2, [pc, #16]	; (8003560 <HAL_RCC_GetPCLK1Freq+0x28>)
 800354e:	5cd3      	ldrb	r3, [r2, r3]
 8003550:	f003 031f 	and.w	r3, r3, #31
 8003554:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003558:	4618      	mov	r0, r3
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40021000 	.word	0x40021000
 8003560:	08007794 	.word	0x08007794

08003564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003568:	f7ff ffda 	bl	8003520 <HAL_RCC_GetHCLKFreq>
 800356c:	4601      	mov	r1, r0
 800356e:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	0adb      	lsrs	r3, r3, #11
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	4a04      	ldr	r2, [pc, #16]	; (800358c <HAL_RCC_GetPCLK2Freq+0x28>)
 800357a:	5cd3      	ldrb	r3, [r2, r3]
 800357c:	f003 031f 	and.w	r3, r3, #31
 8003580:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003584:	4618      	mov	r0, r3
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40021000 	.word	0x40021000
 800358c:	08007794 	.word	0x08007794

08003590 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	220f      	movs	r2, #15
 800359e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80035a0:	4b12      	ldr	r3, [pc, #72]	; (80035ec <HAL_RCC_GetClockConfig+0x5c>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 0203 	and.w	r2, r3, #3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80035ac:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <HAL_RCC_GetClockConfig+0x5c>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80035b8:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <HAL_RCC_GetClockConfig+0x5c>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80035c4:	4b09      	ldr	r3, [pc, #36]	; (80035ec <HAL_RCC_GetClockConfig+0x5c>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	08db      	lsrs	r3, r3, #3
 80035ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80035d2:	4b07      	ldr	r3, [pc, #28]	; (80035f0 <HAL_RCC_GetClockConfig+0x60>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0207 	and.w	r2, r3, #7
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	601a      	str	r2, [r3, #0]
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	40021000 	.word	0x40021000
 80035f0:	40022000 	.word	0x40022000

080035f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035fc:	2300      	movs	r3, #0
 80035fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003600:	4b2a      	ldr	r3, [pc, #168]	; (80036ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800360c:	f7ff f9d2 	bl	80029b4 <HAL_PWREx_GetVoltageRange>
 8003610:	6178      	str	r0, [r7, #20]
 8003612:	e014      	b.n	800363e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003614:	4b25      	ldr	r3, [pc, #148]	; (80036ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003618:	4a24      	ldr	r2, [pc, #144]	; (80036ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800361a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800361e:	6593      	str	r3, [r2, #88]	; 0x58
 8003620:	4b22      	ldr	r3, [pc, #136]	; (80036ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800362c:	f7ff f9c2 	bl	80029b4 <HAL_PWREx_GetVoltageRange>
 8003630:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003632:	4b1e      	ldr	r3, [pc, #120]	; (80036ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003636:	4a1d      	ldr	r2, [pc, #116]	; (80036ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800363c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003644:	d10b      	bne.n	800365e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b80      	cmp	r3, #128	; 0x80
 800364a:	d919      	bls.n	8003680 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2ba0      	cmp	r3, #160	; 0xa0
 8003650:	d902      	bls.n	8003658 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003652:	2302      	movs	r3, #2
 8003654:	613b      	str	r3, [r7, #16]
 8003656:	e013      	b.n	8003680 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003658:	2301      	movs	r3, #1
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	e010      	b.n	8003680 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b80      	cmp	r3, #128	; 0x80
 8003662:	d902      	bls.n	800366a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003664:	2303      	movs	r3, #3
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	e00a      	b.n	8003680 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b80      	cmp	r3, #128	; 0x80
 800366e:	d102      	bne.n	8003676 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003670:	2302      	movs	r3, #2
 8003672:	613b      	str	r3, [r7, #16]
 8003674:	e004      	b.n	8003680 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b70      	cmp	r3, #112	; 0x70
 800367a:	d101      	bne.n	8003680 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800367c:	2301      	movs	r3, #1
 800367e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003680:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f023 0207 	bic.w	r2, r3, #7
 8003688:	4909      	ldr	r1, [pc, #36]	; (80036b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003690:	4b07      	ldr	r3, [pc, #28]	; (80036b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	429a      	cmp	r2, r3
 800369c:	d001      	beq.n	80036a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40021000 	.word	0x40021000
 80036b0:	40022000 	.word	0x40022000

080036b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036bc:	2300      	movs	r3, #0
 80036be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036c0:	2300      	movs	r3, #0
 80036c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d03f      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036d8:	d01c      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80036da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036de:	d802      	bhi.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00e      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80036e4:	e01f      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80036e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036ea:	d003      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80036ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036f0:	d01c      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x78>
 80036f2:	e018      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036f4:	4b85      	ldr	r3, [pc, #532]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	4a84      	ldr	r2, [pc, #528]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003700:	e015      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3304      	adds	r3, #4
 8003706:	2100      	movs	r1, #0
 8003708:	4618      	mov	r0, r3
 800370a:	f000 fab9 	bl	8003c80 <RCCEx_PLLSAI1_Config>
 800370e:	4603      	mov	r3, r0
 8003710:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003712:	e00c      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3320      	adds	r3, #32
 8003718:	2100      	movs	r1, #0
 800371a:	4618      	mov	r0, r3
 800371c:	f000 fba0 	bl	8003e60 <RCCEx_PLLSAI2_Config>
 8003720:	4603      	mov	r3, r0
 8003722:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003724:	e003      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	74fb      	strb	r3, [r7, #19]
      break;
 800372a:	e000      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800372c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800372e:	7cfb      	ldrb	r3, [r7, #19]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10b      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003734:	4b75      	ldr	r3, [pc, #468]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003742:	4972      	ldr	r1, [pc, #456]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800374a:	e001      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374c:	7cfb      	ldrb	r3, [r7, #19]
 800374e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d03f      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003764:	d01c      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003766:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800376a:	d802      	bhi.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00e      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003770:	e01f      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003772:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003776:	d003      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003778:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800377c:	d01c      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800377e:	e018      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003780:	4b62      	ldr	r3, [pc, #392]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4a61      	ldr	r2, [pc, #388]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800378a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800378c:	e015      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3304      	adds	r3, #4
 8003792:	2100      	movs	r1, #0
 8003794:	4618      	mov	r0, r3
 8003796:	f000 fa73 	bl	8003c80 <RCCEx_PLLSAI1_Config>
 800379a:	4603      	mov	r3, r0
 800379c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800379e:	e00c      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3320      	adds	r3, #32
 80037a4:	2100      	movs	r1, #0
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fb5a 	bl	8003e60 <RCCEx_PLLSAI2_Config>
 80037ac:	4603      	mov	r3, r0
 80037ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037b0:	e003      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	74fb      	strb	r3, [r7, #19]
      break;
 80037b6:	e000      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80037b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037ba:	7cfb      	ldrb	r3, [r7, #19]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10b      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037c0:	4b52      	ldr	r3, [pc, #328]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037ce:	494f      	ldr	r1, [pc, #316]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80037d6:	e001      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d8:	7cfb      	ldrb	r3, [r7, #19]
 80037da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 80a0 	beq.w	800392a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ea:	2300      	movs	r3, #0
 80037ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037ee:	4b47      	ldr	r3, [pc, #284]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80037fe:	2300      	movs	r3, #0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00d      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003804:	4b41      	ldr	r3, [pc, #260]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003808:	4a40      	ldr	r2, [pc, #256]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800380a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800380e:	6593      	str	r3, [r2, #88]	; 0x58
 8003810:	4b3e      	ldr	r3, [pc, #248]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800381c:	2301      	movs	r3, #1
 800381e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003820:	4b3b      	ldr	r3, [pc, #236]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a3a      	ldr	r2, [pc, #232]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800382a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800382c:	f7fd ff44 	bl	80016b8 <HAL_GetTick>
 8003830:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003832:	e009      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003834:	f7fd ff40 	bl	80016b8 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d902      	bls.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	74fb      	strb	r3, [r7, #19]
        break;
 8003846:	e005      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003848:	4b31      	ldr	r3, [pc, #196]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0ef      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003854:	7cfb      	ldrb	r3, [r7, #19]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d15c      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800385a:	4b2c      	ldr	r3, [pc, #176]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800385c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003864:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d01f      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	429a      	cmp	r2, r3
 8003876:	d019      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003878:	4b24      	ldr	r3, [pc, #144]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800387a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003882:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003884:	4b21      	ldr	r3, [pc, #132]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388a:	4a20      	ldr	r2, [pc, #128]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800388c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003890:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003894:	4b1d      	ldr	r3, [pc, #116]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389a:	4a1c      	ldr	r2, [pc, #112]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800389c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038a4:	4a19      	ldr	r2, [pc, #100]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d016      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b6:	f7fd feff 	bl	80016b8 <HAL_GetTick>
 80038ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038bc:	e00b      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038be:	f7fd fefb 	bl	80016b8 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d902      	bls.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	74fb      	strb	r3, [r7, #19]
            break;
 80038d4:	e006      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038d6:	4b0d      	ldr	r3, [pc, #52]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0ec      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80038e4:	7cfb      	ldrb	r3, [r7, #19]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10c      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038ea:	4b08      	ldr	r3, [pc, #32]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038fa:	4904      	ldr	r1, [pc, #16]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003902:	e009      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003904:	7cfb      	ldrb	r3, [r7, #19]
 8003906:	74bb      	strb	r3, [r7, #18]
 8003908:	e006      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800390a:	bf00      	nop
 800390c:	40021000 	.word	0x40021000
 8003910:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003914:	7cfb      	ldrb	r3, [r7, #19]
 8003916:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003918:	7c7b      	ldrb	r3, [r7, #17]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d105      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800391e:	4b9e      	ldr	r3, [pc, #632]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003922:	4a9d      	ldr	r2, [pc, #628]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003928:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003936:	4b98      	ldr	r3, [pc, #608]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393c:	f023 0203 	bic.w	r2, r3, #3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003944:	4994      	ldr	r1, [pc, #592]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003946:	4313      	orrs	r3, r2
 8003948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003958:	4b8f      	ldr	r3, [pc, #572]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800395a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395e:	f023 020c 	bic.w	r2, r3, #12
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003966:	498c      	ldr	r1, [pc, #560]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800397a:	4b87      	ldr	r3, [pc, #540]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800397c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003980:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	4983      	ldr	r1, [pc, #524]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800399c:	4b7e      	ldr	r3, [pc, #504]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800399e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039aa:	497b      	ldr	r1, [pc, #492]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0310 	and.w	r3, r3, #16
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039be:	4b76      	ldr	r3, [pc, #472]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039cc:	4972      	ldr	r1, [pc, #456]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0320 	and.w	r3, r3, #32
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00a      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039e0:	4b6d      	ldr	r3, [pc, #436]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ee:	496a      	ldr	r1, [pc, #424]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a02:	4b65      	ldr	r3, [pc, #404]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a10:	4961      	ldr	r1, [pc, #388]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00a      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a24:	4b5c      	ldr	r3, [pc, #368]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a32:	4959      	ldr	r1, [pc, #356]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a46:	4b54      	ldr	r3, [pc, #336]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a54:	4950      	ldr	r1, [pc, #320]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00a      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a68:	4b4b      	ldr	r3, [pc, #300]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a76:	4948      	ldr	r1, [pc, #288]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00a      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a8a:	4b43      	ldr	r3, [pc, #268]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a98:	493f      	ldr	r1, [pc, #252]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d028      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003aac:	4b3a      	ldr	r3, [pc, #232]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aba:	4937      	ldr	r1, [pc, #220]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ac6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aca:	d106      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003acc:	4b32      	ldr	r3, [pc, #200]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	4a31      	ldr	r2, [pc, #196]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ad6:	60d3      	str	r3, [r2, #12]
 8003ad8:	e011      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ade:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ae2:	d10c      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	2101      	movs	r1, #1
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 f8c8 	bl	8003c80 <RCCEx_PLLSAI1_Config>
 8003af0:	4603      	mov	r3, r0
 8003af2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003af4:	7cfb      	ldrb	r3, [r7, #19]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003afa:	7cfb      	ldrb	r3, [r7, #19]
 8003afc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d028      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b0a:	4b23      	ldr	r3, [pc, #140]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b10:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b18:	491f      	ldr	r1, [pc, #124]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b28:	d106      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b2a:	4b1b      	ldr	r3, [pc, #108]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	4a1a      	ldr	r2, [pc, #104]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b34:	60d3      	str	r3, [r2, #12]
 8003b36:	e011      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b40:	d10c      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	3304      	adds	r3, #4
 8003b46:	2101      	movs	r1, #1
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 f899 	bl	8003c80 <RCCEx_PLLSAI1_Config>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b52:	7cfb      	ldrb	r3, [r7, #19]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003b58:	7cfb      	ldrb	r3, [r7, #19]
 8003b5a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d02b      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b68:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b76:	4908      	ldr	r1, [pc, #32]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b86:	d109      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b88:	4b03      	ldr	r3, [pc, #12]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	4a02      	ldr	r2, [pc, #8]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b92:	60d3      	str	r3, [r2, #12]
 8003b94:	e014      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003b96:	bf00      	nop
 8003b98:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	3304      	adds	r3, #4
 8003baa:	2101      	movs	r1, #1
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 f867 	bl	8003c80 <RCCEx_PLLSAI1_Config>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bb6:	7cfb      	ldrb	r3, [r7, #19]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003bbc:	7cfb      	ldrb	r3, [r7, #19]
 8003bbe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d02f      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bcc:	4b2b      	ldr	r3, [pc, #172]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bda:	4928      	ldr	r1, [pc, #160]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003be6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bea:	d10d      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3304      	adds	r3, #4
 8003bf0:	2102      	movs	r1, #2
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 f844 	bl	8003c80 <RCCEx_PLLSAI1_Config>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bfc:	7cfb      	ldrb	r3, [r7, #19]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d014      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003c02:	7cfb      	ldrb	r3, [r7, #19]
 8003c04:	74bb      	strb	r3, [r7, #18]
 8003c06:	e011      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c10:	d10c      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3320      	adds	r3, #32
 8003c16:	2102      	movs	r1, #2
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 f921 	bl	8003e60 <RCCEx_PLLSAI2_Config>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c22:	7cfb      	ldrb	r3, [r7, #19]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003c28:	7cfb      	ldrb	r3, [r7, #19]
 8003c2a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c38:	4b10      	ldr	r3, [pc, #64]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c46:	490d      	ldr	r1, [pc, #52]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00b      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c5a:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c6a:	4904      	ldr	r1, [pc, #16]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c72:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40021000 	.word	0x40021000

08003c80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c8e:	4b73      	ldr	r3, [pc, #460]	; (8003e5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d018      	beq.n	8003ccc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c9a:	4b70      	ldr	r3, [pc, #448]	; (8003e5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f003 0203 	and.w	r2, r3, #3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d10d      	bne.n	8003cc6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
       ||
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d009      	beq.n	8003cc6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003cb2:	4b6a      	ldr	r3, [pc, #424]	; (8003e5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	091b      	lsrs	r3, r3, #4
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
       ||
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d044      	beq.n	8003d50 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	73fb      	strb	r3, [r7, #15]
 8003cca:	e041      	b.n	8003d50 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d00c      	beq.n	8003cee <RCCEx_PLLSAI1_Config+0x6e>
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d013      	beq.n	8003d00 <RCCEx_PLLSAI1_Config+0x80>
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d120      	bne.n	8003d1e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cdc:	4b5f      	ldr	r3, [pc, #380]	; (8003e5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d11d      	bne.n	8003d24 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cec:	e01a      	b.n	8003d24 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cee:	4b5b      	ldr	r3, [pc, #364]	; (8003e5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d116      	bne.n	8003d28 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cfe:	e013      	b.n	8003d28 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d00:	4b56      	ldr	r3, [pc, #344]	; (8003e5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10f      	bne.n	8003d2c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d0c:	4b53      	ldr	r3, [pc, #332]	; (8003e5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d109      	bne.n	8003d2c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d1c:	e006      	b.n	8003d2c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	73fb      	strb	r3, [r7, #15]
      break;
 8003d22:	e004      	b.n	8003d2e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003d24:	bf00      	nop
 8003d26:	e002      	b.n	8003d2e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003d28:	bf00      	nop
 8003d2a:	e000      	b.n	8003d2e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003d2c:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10d      	bne.n	8003d50 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d34:	4b49      	ldr	r3, [pc, #292]	; (8003e5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6819      	ldr	r1, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	3b01      	subs	r3, #1
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	430b      	orrs	r3, r1
 8003d4a:	4944      	ldr	r1, [pc, #272]	; (8003e5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d17d      	bne.n	8003e52 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d56:	4b41      	ldr	r3, [pc, #260]	; (8003e5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a40      	ldr	r2, [pc, #256]	; (8003e5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d62:	f7fd fca9 	bl	80016b8 <HAL_GetTick>
 8003d66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d68:	e009      	b.n	8003d7e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d6a:	f7fd fca5 	bl	80016b8 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d902      	bls.n	8003d7e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	73fb      	strb	r3, [r7, #15]
        break;
 8003d7c:	e005      	b.n	8003d8a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d7e:	4b37      	ldr	r3, [pc, #220]	; (8003e5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1ef      	bne.n	8003d6a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d160      	bne.n	8003e52 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d111      	bne.n	8003dba <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d96:	4b31      	ldr	r3, [pc, #196]	; (8003e5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6892      	ldr	r2, [r2, #8]
 8003da6:	0211      	lsls	r1, r2, #8
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	68d2      	ldr	r2, [r2, #12]
 8003dac:	0912      	lsrs	r2, r2, #4
 8003dae:	0452      	lsls	r2, r2, #17
 8003db0:	430a      	orrs	r2, r1
 8003db2:	492a      	ldr	r1, [pc, #168]	; (8003e5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	610b      	str	r3, [r1, #16]
 8003db8:	e027      	b.n	8003e0a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d112      	bne.n	8003de6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dc0:	4b26      	ldr	r3, [pc, #152]	; (8003e5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003dc8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6892      	ldr	r2, [r2, #8]
 8003dd0:	0211      	lsls	r1, r2, #8
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6912      	ldr	r2, [r2, #16]
 8003dd6:	0852      	lsrs	r2, r2, #1
 8003dd8:	3a01      	subs	r2, #1
 8003dda:	0552      	lsls	r2, r2, #21
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	491f      	ldr	r1, [pc, #124]	; (8003e5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	610b      	str	r3, [r1, #16]
 8003de4:	e011      	b.n	8003e0a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003de6:	4b1d      	ldr	r3, [pc, #116]	; (8003e5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003dee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6892      	ldr	r2, [r2, #8]
 8003df6:	0211      	lsls	r1, r2, #8
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6952      	ldr	r2, [r2, #20]
 8003dfc:	0852      	lsrs	r2, r2, #1
 8003dfe:	3a01      	subs	r2, #1
 8003e00:	0652      	lsls	r2, r2, #25
 8003e02:	430a      	orrs	r2, r1
 8003e04:	4915      	ldr	r1, [pc, #84]	; (8003e5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e0a:	4b14      	ldr	r3, [pc, #80]	; (8003e5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a13      	ldr	r2, [pc, #76]	; (8003e5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e14:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e16:	f7fd fc4f 	bl	80016b8 <HAL_GetTick>
 8003e1a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e1c:	e009      	b.n	8003e32 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e1e:	f7fd fc4b 	bl	80016b8 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d902      	bls.n	8003e32 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	73fb      	strb	r3, [r7, #15]
          break;
 8003e30:	e005      	b.n	8003e3e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e32:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d0ef      	beq.n	8003e1e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d106      	bne.n	8003e52 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e44:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	4903      	ldr	r1, [pc, #12]	; (8003e5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40021000 	.word	0x40021000

08003e60 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e6e:	4b68      	ldr	r3, [pc, #416]	; (8004010 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d018      	beq.n	8003eac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e7a:	4b65      	ldr	r3, [pc, #404]	; (8004010 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f003 0203 	and.w	r2, r3, #3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d10d      	bne.n	8003ea6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
       ||
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d009      	beq.n	8003ea6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003e92:	4b5f      	ldr	r3, [pc, #380]	; (8004010 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	091b      	lsrs	r3, r3, #4
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	1c5a      	adds	r2, r3, #1
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
       ||
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d044      	beq.n	8003f30 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	73fb      	strb	r3, [r7, #15]
 8003eaa:	e041      	b.n	8003f30 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d00c      	beq.n	8003ece <RCCEx_PLLSAI2_Config+0x6e>
 8003eb4:	2b03      	cmp	r3, #3
 8003eb6:	d013      	beq.n	8003ee0 <RCCEx_PLLSAI2_Config+0x80>
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d120      	bne.n	8003efe <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ebc:	4b54      	ldr	r3, [pc, #336]	; (8004010 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d11d      	bne.n	8003f04 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ecc:	e01a      	b.n	8003f04 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ece:	4b50      	ldr	r3, [pc, #320]	; (8004010 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d116      	bne.n	8003f08 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ede:	e013      	b.n	8003f08 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ee0:	4b4b      	ldr	r3, [pc, #300]	; (8004010 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10f      	bne.n	8003f0c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003eec:	4b48      	ldr	r3, [pc, #288]	; (8004010 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d109      	bne.n	8003f0c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003efc:	e006      	b.n	8003f0c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	73fb      	strb	r3, [r7, #15]
      break;
 8003f02:	e004      	b.n	8003f0e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003f04:	bf00      	nop
 8003f06:	e002      	b.n	8003f0e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003f08:	bf00      	nop
 8003f0a:	e000      	b.n	8003f0e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003f0c:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10d      	bne.n	8003f30 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f14:	4b3e      	ldr	r3, [pc, #248]	; (8004010 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6819      	ldr	r1, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	3b01      	subs	r3, #1
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	430b      	orrs	r3, r1
 8003f2a:	4939      	ldr	r1, [pc, #228]	; (8004010 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d167      	bne.n	8004006 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f36:	4b36      	ldr	r3, [pc, #216]	; (8004010 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a35      	ldr	r2, [pc, #212]	; (8004010 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f42:	f7fd fbb9 	bl	80016b8 <HAL_GetTick>
 8003f46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f48:	e009      	b.n	8003f5e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f4a:	f7fd fbb5 	bl	80016b8 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d902      	bls.n	8003f5e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	73fb      	strb	r3, [r7, #15]
        break;
 8003f5c:	e005      	b.n	8003f6a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f5e:	4b2c      	ldr	r3, [pc, #176]	; (8004010 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1ef      	bne.n	8003f4a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003f6a:	7bfb      	ldrb	r3, [r7, #15]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d14a      	bne.n	8004006 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d111      	bne.n	8003f9a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f76:	4b26      	ldr	r3, [pc, #152]	; (8004010 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6892      	ldr	r2, [r2, #8]
 8003f86:	0211      	lsls	r1, r2, #8
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	68d2      	ldr	r2, [r2, #12]
 8003f8c:	0912      	lsrs	r2, r2, #4
 8003f8e:	0452      	lsls	r2, r2, #17
 8003f90:	430a      	orrs	r2, r1
 8003f92:	491f      	ldr	r1, [pc, #124]	; (8004010 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	614b      	str	r3, [r1, #20]
 8003f98:	e011      	b.n	8003fbe <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f9a:	4b1d      	ldr	r3, [pc, #116]	; (8004010 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fa2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6892      	ldr	r2, [r2, #8]
 8003faa:	0211      	lsls	r1, r2, #8
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6912      	ldr	r2, [r2, #16]
 8003fb0:	0852      	lsrs	r2, r2, #1
 8003fb2:	3a01      	subs	r2, #1
 8003fb4:	0652      	lsls	r2, r2, #25
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	4915      	ldr	r1, [pc, #84]	; (8004010 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003fbe:	4b14      	ldr	r3, [pc, #80]	; (8004010 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a13      	ldr	r2, [pc, #76]	; (8004010 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fca:	f7fd fb75 	bl	80016b8 <HAL_GetTick>
 8003fce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fd0:	e009      	b.n	8003fe6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fd2:	f7fd fb71 	bl	80016b8 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d902      	bls.n	8003fe6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	73fb      	strb	r3, [r7, #15]
          break;
 8003fe4:	e005      	b.n	8003ff2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fe6:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0ef      	beq.n	8003fd2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d106      	bne.n	8004006 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ff8:	4b05      	ldr	r3, [pc, #20]	; (8004010 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ffa:	695a      	ldr	r2, [r3, #20]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	4903      	ldr	r1, [pc, #12]	; (8004010 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004002:	4313      	orrs	r3, r2
 8004004:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004006:	7bfb      	ldrb	r3, [r7, #15]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40021000 	.word	0x40021000

08004014 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e049      	b.n	80040ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d106      	bne.n	8004040 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f841 	bl	80040c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3304      	adds	r3, #4
 8004050:	4619      	mov	r1, r3
 8004052:	4610      	mov	r0, r2
 8004054:	f000 f9f8 	bl	8004448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
	...

080040d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d001      	beq.n	80040f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e04f      	b.n	8004190 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0201 	orr.w	r2, r2, #1
 8004106:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a23      	ldr	r2, [pc, #140]	; (800419c <HAL_TIM_Base_Start_IT+0xc4>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d01d      	beq.n	800414e <HAL_TIM_Base_Start_IT+0x76>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411a:	d018      	beq.n	800414e <HAL_TIM_Base_Start_IT+0x76>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a1f      	ldr	r2, [pc, #124]	; (80041a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d013      	beq.n	800414e <HAL_TIM_Base_Start_IT+0x76>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a1e      	ldr	r2, [pc, #120]	; (80041a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00e      	beq.n	800414e <HAL_TIM_Base_Start_IT+0x76>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a1c      	ldr	r2, [pc, #112]	; (80041a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d009      	beq.n	800414e <HAL_TIM_Base_Start_IT+0x76>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a1b      	ldr	r2, [pc, #108]	; (80041ac <HAL_TIM_Base_Start_IT+0xd4>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d004      	beq.n	800414e <HAL_TIM_Base_Start_IT+0x76>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a19      	ldr	r2, [pc, #100]	; (80041b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d115      	bne.n	800417a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	4b17      	ldr	r3, [pc, #92]	; (80041b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004156:	4013      	ands	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2b06      	cmp	r3, #6
 800415e:	d015      	beq.n	800418c <HAL_TIM_Base_Start_IT+0xb4>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004166:	d011      	beq.n	800418c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0201 	orr.w	r2, r2, #1
 8004176:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004178:	e008      	b.n	800418c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f042 0201 	orr.w	r2, r2, #1
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	e000      	b.n	800418e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	40012c00 	.word	0x40012c00
 80041a0:	40000400 	.word	0x40000400
 80041a4:	40000800 	.word	0x40000800
 80041a8:	40000c00 	.word	0x40000c00
 80041ac:	40013400 	.word	0x40013400
 80041b0:	40014000 	.word	0x40014000
 80041b4:	00010007 	.word	0x00010007

080041b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d122      	bne.n	8004214 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d11b      	bne.n	8004214 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f06f 0202 	mvn.w	r2, #2
 80041e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f905 	bl	800440a <HAL_TIM_IC_CaptureCallback>
 8004200:	e005      	b.n	800420e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f8f7 	bl	80043f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f908 	bl	800441e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f003 0304 	and.w	r3, r3, #4
 800421e:	2b04      	cmp	r3, #4
 8004220:	d122      	bne.n	8004268 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	2b04      	cmp	r3, #4
 800422e:	d11b      	bne.n	8004268 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f06f 0204 	mvn.w	r2, #4
 8004238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2202      	movs	r2, #2
 800423e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f8db 	bl	800440a <HAL_TIM_IC_CaptureCallback>
 8004254:	e005      	b.n	8004262 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f8cd 	bl	80043f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f8de 	bl	800441e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b08      	cmp	r3, #8
 8004274:	d122      	bne.n	80042bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b08      	cmp	r3, #8
 8004282:	d11b      	bne.n	80042bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f06f 0208 	mvn.w	r2, #8
 800428c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2204      	movs	r2, #4
 8004292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f8b1 	bl	800440a <HAL_TIM_IC_CaptureCallback>
 80042a8:	e005      	b.n	80042b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f8a3 	bl	80043f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f8b4 	bl	800441e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f003 0310 	and.w	r3, r3, #16
 80042c6:	2b10      	cmp	r3, #16
 80042c8:	d122      	bne.n	8004310 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f003 0310 	and.w	r3, r3, #16
 80042d4:	2b10      	cmp	r3, #16
 80042d6:	d11b      	bne.n	8004310 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f06f 0210 	mvn.w	r2, #16
 80042e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2208      	movs	r2, #8
 80042e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f887 	bl	800440a <HAL_TIM_IC_CaptureCallback>
 80042fc:	e005      	b.n	800430a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f879 	bl	80043f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f88a 	bl	800441e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b01      	cmp	r3, #1
 800431c:	d10e      	bne.n	800433c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b01      	cmp	r3, #1
 800432a:	d107      	bne.n	800433c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f06f 0201 	mvn.w	r2, #1
 8004334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f002 fb3c 	bl	80069b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004346:	2b80      	cmp	r3, #128	; 0x80
 8004348:	d10e      	bne.n	8004368 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004354:	2b80      	cmp	r3, #128	; 0x80
 8004356:	d107      	bne.n	8004368 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f914 	bl	8004590 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004376:	d10e      	bne.n	8004396 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004382:	2b80      	cmp	r3, #128	; 0x80
 8004384:	d107      	bne.n	8004396 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800438e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f907 	bl	80045a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a0:	2b40      	cmp	r3, #64	; 0x40
 80043a2:	d10e      	bne.n	80043c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ae:	2b40      	cmp	r3, #64	; 0x40
 80043b0:	d107      	bne.n	80043c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f838 	bl	8004432 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	f003 0320 	and.w	r3, r3, #32
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	d10e      	bne.n	80043ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	f003 0320 	and.w	r3, r3, #32
 80043da:	2b20      	cmp	r3, #32
 80043dc:	d107      	bne.n	80043ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f06f 0220 	mvn.w	r2, #32
 80043e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f8c7 	bl	800457c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043ee:	bf00      	nop
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
	...

08004448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a40      	ldr	r2, [pc, #256]	; (800455c <TIM_Base_SetConfig+0x114>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d013      	beq.n	8004488 <TIM_Base_SetConfig+0x40>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004466:	d00f      	beq.n	8004488 <TIM_Base_SetConfig+0x40>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a3d      	ldr	r2, [pc, #244]	; (8004560 <TIM_Base_SetConfig+0x118>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d00b      	beq.n	8004488 <TIM_Base_SetConfig+0x40>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a3c      	ldr	r2, [pc, #240]	; (8004564 <TIM_Base_SetConfig+0x11c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d007      	beq.n	8004488 <TIM_Base_SetConfig+0x40>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a3b      	ldr	r2, [pc, #236]	; (8004568 <TIM_Base_SetConfig+0x120>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d003      	beq.n	8004488 <TIM_Base_SetConfig+0x40>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a3a      	ldr	r2, [pc, #232]	; (800456c <TIM_Base_SetConfig+0x124>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d108      	bne.n	800449a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a2f      	ldr	r2, [pc, #188]	; (800455c <TIM_Base_SetConfig+0x114>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d01f      	beq.n	80044e2 <TIM_Base_SetConfig+0x9a>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a8:	d01b      	beq.n	80044e2 <TIM_Base_SetConfig+0x9a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a2c      	ldr	r2, [pc, #176]	; (8004560 <TIM_Base_SetConfig+0x118>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d017      	beq.n	80044e2 <TIM_Base_SetConfig+0x9a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a2b      	ldr	r2, [pc, #172]	; (8004564 <TIM_Base_SetConfig+0x11c>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d013      	beq.n	80044e2 <TIM_Base_SetConfig+0x9a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a2a      	ldr	r2, [pc, #168]	; (8004568 <TIM_Base_SetConfig+0x120>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d00f      	beq.n	80044e2 <TIM_Base_SetConfig+0x9a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a29      	ldr	r2, [pc, #164]	; (800456c <TIM_Base_SetConfig+0x124>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00b      	beq.n	80044e2 <TIM_Base_SetConfig+0x9a>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a28      	ldr	r2, [pc, #160]	; (8004570 <TIM_Base_SetConfig+0x128>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d007      	beq.n	80044e2 <TIM_Base_SetConfig+0x9a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a27      	ldr	r2, [pc, #156]	; (8004574 <TIM_Base_SetConfig+0x12c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d003      	beq.n	80044e2 <TIM_Base_SetConfig+0x9a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a26      	ldr	r2, [pc, #152]	; (8004578 <TIM_Base_SetConfig+0x130>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d108      	bne.n	80044f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a10      	ldr	r2, [pc, #64]	; (800455c <TIM_Base_SetConfig+0x114>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d00f      	beq.n	8004540 <TIM_Base_SetConfig+0xf8>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a12      	ldr	r2, [pc, #72]	; (800456c <TIM_Base_SetConfig+0x124>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00b      	beq.n	8004540 <TIM_Base_SetConfig+0xf8>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a11      	ldr	r2, [pc, #68]	; (8004570 <TIM_Base_SetConfig+0x128>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d007      	beq.n	8004540 <TIM_Base_SetConfig+0xf8>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a10      	ldr	r2, [pc, #64]	; (8004574 <TIM_Base_SetConfig+0x12c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d003      	beq.n	8004540 <TIM_Base_SetConfig+0xf8>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a0f      	ldr	r2, [pc, #60]	; (8004578 <TIM_Base_SetConfig+0x130>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d103      	bne.n	8004548 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	691a      	ldr	r2, [r3, #16]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	615a      	str	r2, [r3, #20]
}
 800454e:	bf00      	nop
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40012c00 	.word	0x40012c00
 8004560:	40000400 	.word	0x40000400
 8004564:	40000800 	.word	0x40000800
 8004568:	40000c00 	.word	0x40000c00
 800456c:	40013400 	.word	0x40013400
 8004570:	40014000 	.word	0x40014000
 8004574:	40014400 	.word	0x40014400
 8004578:	40014800 	.word	0x40014800

0800457c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e040      	b.n	800464c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f002 fa90 	bl	8006b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2224      	movs	r2, #36	; 0x24
 80045e4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 0201 	bic.w	r2, r2, #1
 80045f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f8c0 	bl	800477c <UART_SetConfig>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d101      	bne.n	8004606 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e022      	b.n	800464c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fb3e 	bl	8004c90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004622:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004632:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0201 	orr.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 fbc5 	bl	8004dd4 <UART_CheckIdleState>
 800464a:	4603      	mov	r3, r0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b08a      	sub	sp, #40	; 0x28
 8004658:	af02      	add	r7, sp, #8
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	603b      	str	r3, [r7, #0]
 8004660:	4613      	mov	r3, r2
 8004662:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004668:	2b20      	cmp	r3, #32
 800466a:	f040 8081 	bne.w	8004770 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <HAL_UART_Transmit+0x26>
 8004674:	88fb      	ldrh	r3, [r7, #6]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e079      	b.n	8004772 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004684:	2b01      	cmp	r3, #1
 8004686:	d101      	bne.n	800468c <HAL_UART_Transmit+0x38>
 8004688:	2302      	movs	r3, #2
 800468a:	e072      	b.n	8004772 <HAL_UART_Transmit+0x11e>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2221      	movs	r2, #33	; 0x21
 800469e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80046a0:	f7fd f80a 	bl	80016b8 <HAL_GetTick>
 80046a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	88fa      	ldrh	r2, [r7, #6]
 80046aa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	88fa      	ldrh	r2, [r7, #6]
 80046b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046be:	d108      	bne.n	80046d2 <HAL_UART_Transmit+0x7e>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d104      	bne.n	80046d2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80046c8:	2300      	movs	r3, #0
 80046ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	61bb      	str	r3, [r7, #24]
 80046d0:	e003      	b.n	80046da <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046d6:	2300      	movs	r3, #0
 80046d8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80046e2:	e02d      	b.n	8004740 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2200      	movs	r2, #0
 80046ec:	2180      	movs	r1, #128	; 0x80
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 fbb5 	bl	8004e5e <UART_WaitOnFlagUntilTimeout>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e039      	b.n	8004772 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10b      	bne.n	800471c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	881a      	ldrh	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004710:	b292      	uxth	r2, r2
 8004712:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	3302      	adds	r3, #2
 8004718:	61bb      	str	r3, [r7, #24]
 800471a:	e008      	b.n	800472e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	781a      	ldrb	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	b292      	uxth	r2, r2
 8004726:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	3301      	adds	r3, #1
 800472c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004734:	b29b      	uxth	r3, r3
 8004736:	3b01      	subs	r3, #1
 8004738:	b29a      	uxth	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004746:	b29b      	uxth	r3, r3
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1cb      	bne.n	80046e4 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	2200      	movs	r2, #0
 8004754:	2140      	movs	r1, #64	; 0x40
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 fb81 	bl	8004e5e <UART_WaitOnFlagUntilTimeout>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e005      	b.n	8004772 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2220      	movs	r2, #32
 800476a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	e000      	b.n	8004772 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004770:	2302      	movs	r3, #2
  }
}
 8004772:	4618      	mov	r0, r3
 8004774:	3720      	adds	r7, #32
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800477c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004780:	b088      	sub	sp, #32
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	431a      	orrs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	4313      	orrs	r3, r2
 80047a0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	4bac      	ldr	r3, [pc, #688]	; (8004a5c <UART_SetConfig+0x2e0>)
 80047aa:	4013      	ands	r3, r2
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6812      	ldr	r2, [r2, #0]
 80047b0:	69f9      	ldr	r1, [r7, #28]
 80047b2:	430b      	orrs	r3, r1
 80047b4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68da      	ldr	r2, [r3, #12]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4aa2      	ldr	r2, [pc, #648]	; (8004a60 <UART_SetConfig+0x2e4>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d004      	beq.n	80047e6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	69fa      	ldr	r2, [r7, #28]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	69fa      	ldr	r2, [r7, #28]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a99      	ldr	r2, [pc, #612]	; (8004a64 <UART_SetConfig+0x2e8>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d121      	bne.n	8004848 <UART_SetConfig+0xcc>
 8004804:	4b98      	ldr	r3, [pc, #608]	; (8004a68 <UART_SetConfig+0x2ec>)
 8004806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	2b03      	cmp	r3, #3
 8004810:	d816      	bhi.n	8004840 <UART_SetConfig+0xc4>
 8004812:	a201      	add	r2, pc, #4	; (adr r2, 8004818 <UART_SetConfig+0x9c>)
 8004814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004818:	08004829 	.word	0x08004829
 800481c:	08004835 	.word	0x08004835
 8004820:	0800482f 	.word	0x0800482f
 8004824:	0800483b 	.word	0x0800483b
 8004828:	2301      	movs	r3, #1
 800482a:	76fb      	strb	r3, [r7, #27]
 800482c:	e0e8      	b.n	8004a00 <UART_SetConfig+0x284>
 800482e:	2302      	movs	r3, #2
 8004830:	76fb      	strb	r3, [r7, #27]
 8004832:	e0e5      	b.n	8004a00 <UART_SetConfig+0x284>
 8004834:	2304      	movs	r3, #4
 8004836:	76fb      	strb	r3, [r7, #27]
 8004838:	e0e2      	b.n	8004a00 <UART_SetConfig+0x284>
 800483a:	2308      	movs	r3, #8
 800483c:	76fb      	strb	r3, [r7, #27]
 800483e:	e0df      	b.n	8004a00 <UART_SetConfig+0x284>
 8004840:	2310      	movs	r3, #16
 8004842:	76fb      	strb	r3, [r7, #27]
 8004844:	bf00      	nop
 8004846:	e0db      	b.n	8004a00 <UART_SetConfig+0x284>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a87      	ldr	r2, [pc, #540]	; (8004a6c <UART_SetConfig+0x2f0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d134      	bne.n	80048bc <UART_SetConfig+0x140>
 8004852:	4b85      	ldr	r3, [pc, #532]	; (8004a68 <UART_SetConfig+0x2ec>)
 8004854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004858:	f003 030c 	and.w	r3, r3, #12
 800485c:	2b0c      	cmp	r3, #12
 800485e:	d829      	bhi.n	80048b4 <UART_SetConfig+0x138>
 8004860:	a201      	add	r2, pc, #4	; (adr r2, 8004868 <UART_SetConfig+0xec>)
 8004862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004866:	bf00      	nop
 8004868:	0800489d 	.word	0x0800489d
 800486c:	080048b5 	.word	0x080048b5
 8004870:	080048b5 	.word	0x080048b5
 8004874:	080048b5 	.word	0x080048b5
 8004878:	080048a9 	.word	0x080048a9
 800487c:	080048b5 	.word	0x080048b5
 8004880:	080048b5 	.word	0x080048b5
 8004884:	080048b5 	.word	0x080048b5
 8004888:	080048a3 	.word	0x080048a3
 800488c:	080048b5 	.word	0x080048b5
 8004890:	080048b5 	.word	0x080048b5
 8004894:	080048b5 	.word	0x080048b5
 8004898:	080048af 	.word	0x080048af
 800489c:	2300      	movs	r3, #0
 800489e:	76fb      	strb	r3, [r7, #27]
 80048a0:	e0ae      	b.n	8004a00 <UART_SetConfig+0x284>
 80048a2:	2302      	movs	r3, #2
 80048a4:	76fb      	strb	r3, [r7, #27]
 80048a6:	e0ab      	b.n	8004a00 <UART_SetConfig+0x284>
 80048a8:	2304      	movs	r3, #4
 80048aa:	76fb      	strb	r3, [r7, #27]
 80048ac:	e0a8      	b.n	8004a00 <UART_SetConfig+0x284>
 80048ae:	2308      	movs	r3, #8
 80048b0:	76fb      	strb	r3, [r7, #27]
 80048b2:	e0a5      	b.n	8004a00 <UART_SetConfig+0x284>
 80048b4:	2310      	movs	r3, #16
 80048b6:	76fb      	strb	r3, [r7, #27]
 80048b8:	bf00      	nop
 80048ba:	e0a1      	b.n	8004a00 <UART_SetConfig+0x284>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a6b      	ldr	r2, [pc, #428]	; (8004a70 <UART_SetConfig+0x2f4>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d120      	bne.n	8004908 <UART_SetConfig+0x18c>
 80048c6:	4b68      	ldr	r3, [pc, #416]	; (8004a68 <UART_SetConfig+0x2ec>)
 80048c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048d0:	2b10      	cmp	r3, #16
 80048d2:	d00f      	beq.n	80048f4 <UART_SetConfig+0x178>
 80048d4:	2b10      	cmp	r3, #16
 80048d6:	d802      	bhi.n	80048de <UART_SetConfig+0x162>
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d005      	beq.n	80048e8 <UART_SetConfig+0x16c>
 80048dc:	e010      	b.n	8004900 <UART_SetConfig+0x184>
 80048de:	2b20      	cmp	r3, #32
 80048e0:	d005      	beq.n	80048ee <UART_SetConfig+0x172>
 80048e2:	2b30      	cmp	r3, #48	; 0x30
 80048e4:	d009      	beq.n	80048fa <UART_SetConfig+0x17e>
 80048e6:	e00b      	b.n	8004900 <UART_SetConfig+0x184>
 80048e8:	2300      	movs	r3, #0
 80048ea:	76fb      	strb	r3, [r7, #27]
 80048ec:	e088      	b.n	8004a00 <UART_SetConfig+0x284>
 80048ee:	2302      	movs	r3, #2
 80048f0:	76fb      	strb	r3, [r7, #27]
 80048f2:	e085      	b.n	8004a00 <UART_SetConfig+0x284>
 80048f4:	2304      	movs	r3, #4
 80048f6:	76fb      	strb	r3, [r7, #27]
 80048f8:	e082      	b.n	8004a00 <UART_SetConfig+0x284>
 80048fa:	2308      	movs	r3, #8
 80048fc:	76fb      	strb	r3, [r7, #27]
 80048fe:	e07f      	b.n	8004a00 <UART_SetConfig+0x284>
 8004900:	2310      	movs	r3, #16
 8004902:	76fb      	strb	r3, [r7, #27]
 8004904:	bf00      	nop
 8004906:	e07b      	b.n	8004a00 <UART_SetConfig+0x284>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a59      	ldr	r2, [pc, #356]	; (8004a74 <UART_SetConfig+0x2f8>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d120      	bne.n	8004954 <UART_SetConfig+0x1d8>
 8004912:	4b55      	ldr	r3, [pc, #340]	; (8004a68 <UART_SetConfig+0x2ec>)
 8004914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004918:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800491c:	2b40      	cmp	r3, #64	; 0x40
 800491e:	d00f      	beq.n	8004940 <UART_SetConfig+0x1c4>
 8004920:	2b40      	cmp	r3, #64	; 0x40
 8004922:	d802      	bhi.n	800492a <UART_SetConfig+0x1ae>
 8004924:	2b00      	cmp	r3, #0
 8004926:	d005      	beq.n	8004934 <UART_SetConfig+0x1b8>
 8004928:	e010      	b.n	800494c <UART_SetConfig+0x1d0>
 800492a:	2b80      	cmp	r3, #128	; 0x80
 800492c:	d005      	beq.n	800493a <UART_SetConfig+0x1be>
 800492e:	2bc0      	cmp	r3, #192	; 0xc0
 8004930:	d009      	beq.n	8004946 <UART_SetConfig+0x1ca>
 8004932:	e00b      	b.n	800494c <UART_SetConfig+0x1d0>
 8004934:	2300      	movs	r3, #0
 8004936:	76fb      	strb	r3, [r7, #27]
 8004938:	e062      	b.n	8004a00 <UART_SetConfig+0x284>
 800493a:	2302      	movs	r3, #2
 800493c:	76fb      	strb	r3, [r7, #27]
 800493e:	e05f      	b.n	8004a00 <UART_SetConfig+0x284>
 8004940:	2304      	movs	r3, #4
 8004942:	76fb      	strb	r3, [r7, #27]
 8004944:	e05c      	b.n	8004a00 <UART_SetConfig+0x284>
 8004946:	2308      	movs	r3, #8
 8004948:	76fb      	strb	r3, [r7, #27]
 800494a:	e059      	b.n	8004a00 <UART_SetConfig+0x284>
 800494c:	2310      	movs	r3, #16
 800494e:	76fb      	strb	r3, [r7, #27]
 8004950:	bf00      	nop
 8004952:	e055      	b.n	8004a00 <UART_SetConfig+0x284>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a47      	ldr	r2, [pc, #284]	; (8004a78 <UART_SetConfig+0x2fc>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d124      	bne.n	80049a8 <UART_SetConfig+0x22c>
 800495e:	4b42      	ldr	r3, [pc, #264]	; (8004a68 <UART_SetConfig+0x2ec>)
 8004960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800496c:	d012      	beq.n	8004994 <UART_SetConfig+0x218>
 800496e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004972:	d802      	bhi.n	800497a <UART_SetConfig+0x1fe>
 8004974:	2b00      	cmp	r3, #0
 8004976:	d007      	beq.n	8004988 <UART_SetConfig+0x20c>
 8004978:	e012      	b.n	80049a0 <UART_SetConfig+0x224>
 800497a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800497e:	d006      	beq.n	800498e <UART_SetConfig+0x212>
 8004980:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004984:	d009      	beq.n	800499a <UART_SetConfig+0x21e>
 8004986:	e00b      	b.n	80049a0 <UART_SetConfig+0x224>
 8004988:	2300      	movs	r3, #0
 800498a:	76fb      	strb	r3, [r7, #27]
 800498c:	e038      	b.n	8004a00 <UART_SetConfig+0x284>
 800498e:	2302      	movs	r3, #2
 8004990:	76fb      	strb	r3, [r7, #27]
 8004992:	e035      	b.n	8004a00 <UART_SetConfig+0x284>
 8004994:	2304      	movs	r3, #4
 8004996:	76fb      	strb	r3, [r7, #27]
 8004998:	e032      	b.n	8004a00 <UART_SetConfig+0x284>
 800499a:	2308      	movs	r3, #8
 800499c:	76fb      	strb	r3, [r7, #27]
 800499e:	e02f      	b.n	8004a00 <UART_SetConfig+0x284>
 80049a0:	2310      	movs	r3, #16
 80049a2:	76fb      	strb	r3, [r7, #27]
 80049a4:	bf00      	nop
 80049a6:	e02b      	b.n	8004a00 <UART_SetConfig+0x284>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a2c      	ldr	r2, [pc, #176]	; (8004a60 <UART_SetConfig+0x2e4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d124      	bne.n	80049fc <UART_SetConfig+0x280>
 80049b2:	4b2d      	ldr	r3, [pc, #180]	; (8004a68 <UART_SetConfig+0x2ec>)
 80049b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c0:	d012      	beq.n	80049e8 <UART_SetConfig+0x26c>
 80049c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c6:	d802      	bhi.n	80049ce <UART_SetConfig+0x252>
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d007      	beq.n	80049dc <UART_SetConfig+0x260>
 80049cc:	e012      	b.n	80049f4 <UART_SetConfig+0x278>
 80049ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049d2:	d006      	beq.n	80049e2 <UART_SetConfig+0x266>
 80049d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049d8:	d009      	beq.n	80049ee <UART_SetConfig+0x272>
 80049da:	e00b      	b.n	80049f4 <UART_SetConfig+0x278>
 80049dc:	2300      	movs	r3, #0
 80049de:	76fb      	strb	r3, [r7, #27]
 80049e0:	e00e      	b.n	8004a00 <UART_SetConfig+0x284>
 80049e2:	2302      	movs	r3, #2
 80049e4:	76fb      	strb	r3, [r7, #27]
 80049e6:	e00b      	b.n	8004a00 <UART_SetConfig+0x284>
 80049e8:	2304      	movs	r3, #4
 80049ea:	76fb      	strb	r3, [r7, #27]
 80049ec:	e008      	b.n	8004a00 <UART_SetConfig+0x284>
 80049ee:	2308      	movs	r3, #8
 80049f0:	76fb      	strb	r3, [r7, #27]
 80049f2:	e005      	b.n	8004a00 <UART_SetConfig+0x284>
 80049f4:	2310      	movs	r3, #16
 80049f6:	76fb      	strb	r3, [r7, #27]
 80049f8:	bf00      	nop
 80049fa:	e001      	b.n	8004a00 <UART_SetConfig+0x284>
 80049fc:	2310      	movs	r3, #16
 80049fe:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a16      	ldr	r2, [pc, #88]	; (8004a60 <UART_SetConfig+0x2e4>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	f040 8087 	bne.w	8004b1a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a0c:	7efb      	ldrb	r3, [r7, #27]
 8004a0e:	2b08      	cmp	r3, #8
 8004a10:	d836      	bhi.n	8004a80 <UART_SetConfig+0x304>
 8004a12:	a201      	add	r2, pc, #4	; (adr r2, 8004a18 <UART_SetConfig+0x29c>)
 8004a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a18:	08004a3d 	.word	0x08004a3d
 8004a1c:	08004a81 	.word	0x08004a81
 8004a20:	08004a45 	.word	0x08004a45
 8004a24:	08004a81 	.word	0x08004a81
 8004a28:	08004a4b 	.word	0x08004a4b
 8004a2c:	08004a81 	.word	0x08004a81
 8004a30:	08004a81 	.word	0x08004a81
 8004a34:	08004a81 	.word	0x08004a81
 8004a38:	08004a53 	.word	0x08004a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a3c:	f7fe fd7c 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 8004a40:	6178      	str	r0, [r7, #20]
        break;
 8004a42:	e022      	b.n	8004a8a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a44:	4b0d      	ldr	r3, [pc, #52]	; (8004a7c <UART_SetConfig+0x300>)
 8004a46:	617b      	str	r3, [r7, #20]
        break;
 8004a48:	e01f      	b.n	8004a8a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a4a:	f7fe fcdf 	bl	800340c <HAL_RCC_GetSysClockFreq>
 8004a4e:	6178      	str	r0, [r7, #20]
        break;
 8004a50:	e01b      	b.n	8004a8a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a56:	617b      	str	r3, [r7, #20]
        break;
 8004a58:	e017      	b.n	8004a8a <UART_SetConfig+0x30e>
 8004a5a:	bf00      	nop
 8004a5c:	efff69f3 	.word	0xefff69f3
 8004a60:	40008000 	.word	0x40008000
 8004a64:	40013800 	.word	0x40013800
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	40004400 	.word	0x40004400
 8004a70:	40004800 	.word	0x40004800
 8004a74:	40004c00 	.word	0x40004c00
 8004a78:	40005000 	.word	0x40005000
 8004a7c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	76bb      	strb	r3, [r7, #26]
        break;
 8004a88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 80f1 	beq.w	8004c74 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	4413      	add	r3, r2
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d305      	bcc.n	8004aae <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d902      	bls.n	8004ab4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	76bb      	strb	r3, [r7, #26]
 8004ab2:	e0df      	b.n	8004c74 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	f04f 0200 	mov.w	r2, #0
 8004abc:	f04f 0300 	mov.w	r3, #0
 8004ac0:	f04f 0400 	mov.w	r4, #0
 8004ac4:	0214      	lsls	r4, r2, #8
 8004ac6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004aca:	020b      	lsls	r3, r1, #8
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6852      	ldr	r2, [r2, #4]
 8004ad0:	0852      	lsrs	r2, r2, #1
 8004ad2:	4611      	mov	r1, r2
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	eb13 0b01 	adds.w	fp, r3, r1
 8004adc:	eb44 0c02 	adc.w	ip, r4, r2
 8004ae0:	4658      	mov	r0, fp
 8004ae2:	4661      	mov	r1, ip
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f04f 0400 	mov.w	r4, #0
 8004aec:	461a      	mov	r2, r3
 8004aee:	4623      	mov	r3, r4
 8004af0:	f7fb fbc6 	bl	8000280 <__aeabi_uldivmod>
 8004af4:	4603      	mov	r3, r0
 8004af6:	460c      	mov	r4, r1
 8004af8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b00:	d308      	bcc.n	8004b14 <UART_SetConfig+0x398>
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b08:	d204      	bcs.n	8004b14 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	60da      	str	r2, [r3, #12]
 8004b12:	e0af      	b.n	8004c74 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	76bb      	strb	r3, [r7, #26]
 8004b18:	e0ac      	b.n	8004c74 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b22:	d15b      	bne.n	8004bdc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004b24:	7efb      	ldrb	r3, [r7, #27]
 8004b26:	2b08      	cmp	r3, #8
 8004b28:	d827      	bhi.n	8004b7a <UART_SetConfig+0x3fe>
 8004b2a:	a201      	add	r2, pc, #4	; (adr r2, 8004b30 <UART_SetConfig+0x3b4>)
 8004b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b30:	08004b55 	.word	0x08004b55
 8004b34:	08004b5d 	.word	0x08004b5d
 8004b38:	08004b65 	.word	0x08004b65
 8004b3c:	08004b7b 	.word	0x08004b7b
 8004b40:	08004b6b 	.word	0x08004b6b
 8004b44:	08004b7b 	.word	0x08004b7b
 8004b48:	08004b7b 	.word	0x08004b7b
 8004b4c:	08004b7b 	.word	0x08004b7b
 8004b50:	08004b73 	.word	0x08004b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b54:	f7fe fcf0 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 8004b58:	6178      	str	r0, [r7, #20]
        break;
 8004b5a:	e013      	b.n	8004b84 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b5c:	f7fe fd02 	bl	8003564 <HAL_RCC_GetPCLK2Freq>
 8004b60:	6178      	str	r0, [r7, #20]
        break;
 8004b62:	e00f      	b.n	8004b84 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b64:	4b49      	ldr	r3, [pc, #292]	; (8004c8c <UART_SetConfig+0x510>)
 8004b66:	617b      	str	r3, [r7, #20]
        break;
 8004b68:	e00c      	b.n	8004b84 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b6a:	f7fe fc4f 	bl	800340c <HAL_RCC_GetSysClockFreq>
 8004b6e:	6178      	str	r0, [r7, #20]
        break;
 8004b70:	e008      	b.n	8004b84 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b76:	617b      	str	r3, [r7, #20]
        break;
 8004b78:	e004      	b.n	8004b84 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	76bb      	strb	r3, [r7, #26]
        break;
 8004b82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d074      	beq.n	8004c74 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	005a      	lsls	r2, r3, #1
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	085b      	lsrs	r3, r3, #1
 8004b94:	441a      	add	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	2b0f      	cmp	r3, #15
 8004ba6:	d916      	bls.n	8004bd6 <UART_SetConfig+0x45a>
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bae:	d212      	bcs.n	8004bd6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	f023 030f 	bic.w	r3, r3, #15
 8004bb8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	085b      	lsrs	r3, r3, #1
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	89fb      	ldrh	r3, [r7, #14]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	89fa      	ldrh	r2, [r7, #14]
 8004bd2:	60da      	str	r2, [r3, #12]
 8004bd4:	e04e      	b.n	8004c74 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	76bb      	strb	r3, [r7, #26]
 8004bda:	e04b      	b.n	8004c74 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bdc:	7efb      	ldrb	r3, [r7, #27]
 8004bde:	2b08      	cmp	r3, #8
 8004be0:	d827      	bhi.n	8004c32 <UART_SetConfig+0x4b6>
 8004be2:	a201      	add	r2, pc, #4	; (adr r2, 8004be8 <UART_SetConfig+0x46c>)
 8004be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be8:	08004c0d 	.word	0x08004c0d
 8004bec:	08004c15 	.word	0x08004c15
 8004bf0:	08004c1d 	.word	0x08004c1d
 8004bf4:	08004c33 	.word	0x08004c33
 8004bf8:	08004c23 	.word	0x08004c23
 8004bfc:	08004c33 	.word	0x08004c33
 8004c00:	08004c33 	.word	0x08004c33
 8004c04:	08004c33 	.word	0x08004c33
 8004c08:	08004c2b 	.word	0x08004c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c0c:	f7fe fc94 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 8004c10:	6178      	str	r0, [r7, #20]
        break;
 8004c12:	e013      	b.n	8004c3c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c14:	f7fe fca6 	bl	8003564 <HAL_RCC_GetPCLK2Freq>
 8004c18:	6178      	str	r0, [r7, #20]
        break;
 8004c1a:	e00f      	b.n	8004c3c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c1c:	4b1b      	ldr	r3, [pc, #108]	; (8004c8c <UART_SetConfig+0x510>)
 8004c1e:	617b      	str	r3, [r7, #20]
        break;
 8004c20:	e00c      	b.n	8004c3c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c22:	f7fe fbf3 	bl	800340c <HAL_RCC_GetSysClockFreq>
 8004c26:	6178      	str	r0, [r7, #20]
        break;
 8004c28:	e008      	b.n	8004c3c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c2e:	617b      	str	r3, [r7, #20]
        break;
 8004c30:	e004      	b.n	8004c3c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	76bb      	strb	r3, [r7, #26]
        break;
 8004c3a:	bf00      	nop
    }

    if (pclk != 0U)
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d018      	beq.n	8004c74 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	085a      	lsrs	r2, r3, #1
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	441a      	add	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	2b0f      	cmp	r3, #15
 8004c5c:	d908      	bls.n	8004c70 <UART_SetConfig+0x4f4>
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c64:	d204      	bcs.n	8004c70 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	60da      	str	r2, [r3, #12]
 8004c6e:	e001      	b.n	8004c74 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004c80:	7ebb      	ldrb	r3, [r7, #26]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3720      	adds	r7, #32
 8004c86:	46bd      	mov	sp, r7
 8004c88:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004c8c:	00f42400 	.word	0x00f42400

08004c90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	f003 0310 	and.w	r3, r3, #16
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01a      	beq.n	8004da6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d8e:	d10a      	bne.n	8004da6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	605a      	str	r2, [r3, #4]
  }
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af02      	add	r7, sp, #8
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004de2:	f7fc fc69 	bl	80016b8 <HAL_GetTick>
 8004de6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	2b08      	cmp	r3, #8
 8004df4:	d10e      	bne.n	8004e14 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004df6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f82a 	bl	8004e5e <UART_WaitOnFlagUntilTimeout>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e020      	b.n	8004e56 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0304 	and.w	r3, r3, #4
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d10e      	bne.n	8004e40 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f814 	bl	8004e5e <UART_WaitOnFlagUntilTimeout>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e00a      	b.n	8004e56 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2220      	movs	r2, #32
 8004e44:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b084      	sub	sp, #16
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	60f8      	str	r0, [r7, #12]
 8004e66:	60b9      	str	r1, [r7, #8]
 8004e68:	603b      	str	r3, [r7, #0]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e6e:	e05d      	b.n	8004f2c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e76:	d059      	beq.n	8004f2c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e78:	f7fc fc1e 	bl	80016b8 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d302      	bcc.n	8004e8e <UART_WaitOnFlagUntilTimeout+0x30>
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d11b      	bne.n	8004ec6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e9c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 0201 	bic.w	r2, r2, #1
 8004eac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e042      	b.n	8004f4c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d02b      	beq.n	8004f2c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ee2:	d123      	bne.n	8004f2c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004eec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004efc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0201 	bic.w	r2, r2, #1
 8004f0c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2220      	movs	r2, #32
 8004f12:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2220      	movs	r2, #32
 8004f18:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e00f      	b.n	8004f4c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	69da      	ldr	r2, [r3, #28]
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	4013      	ands	r3, r2
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	bf0c      	ite	eq
 8004f3c:	2301      	moveq	r3, #1
 8004f3e:	2300      	movne	r3, #0
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	461a      	mov	r2, r3
 8004f44:	79fb      	ldrb	r3, [r7, #7]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d092      	beq.n	8004e70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004f62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f66:	2b84      	cmp	r3, #132	; 0x84
 8004f68:	d005      	beq.n	8004f76 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004f6a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	4413      	add	r3, r2
 8004f72:	3303      	adds	r3, #3
 8004f74:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004f76:	68fb      	ldr	r3, [r7, #12]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004f88:	f000 fada 	bl	8005540 <vTaskStartScheduler>
  
  return osOK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004f92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f94:	b089      	sub	sp, #36	; 0x24
 8004f96:	af04      	add	r7, sp, #16
 8004f98:	6078      	str	r0, [r7, #4]
 8004f9a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d020      	beq.n	8004fe6 <osThreadCreate+0x54>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d01c      	beq.n	8004fe6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685c      	ldr	r4, [r3, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681d      	ldr	r5, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691e      	ldr	r6, [r3, #16]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7ff ffc8 	bl	8004f54 <makeFreeRtosPriority>
 8004fc4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fce:	9202      	str	r2, [sp, #8]
 8004fd0:	9301      	str	r3, [sp, #4]
 8004fd2:	9100      	str	r1, [sp, #0]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	4632      	mov	r2, r6
 8004fd8:	4629      	mov	r1, r5
 8004fda:	4620      	mov	r0, r4
 8004fdc:	f000 f8ed 	bl	80051ba <xTaskCreateStatic>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	e01c      	b.n	8005020 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685c      	ldr	r4, [r3, #4]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ff2:	b29e      	uxth	r6, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7ff ffaa 	bl	8004f54 <makeFreeRtosPriority>
 8005000:	4602      	mov	r2, r0
 8005002:	f107 030c 	add.w	r3, r7, #12
 8005006:	9301      	str	r3, [sp, #4]
 8005008:	9200      	str	r2, [sp, #0]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	4632      	mov	r2, r6
 800500e:	4629      	mov	r1, r5
 8005010:	4620      	mov	r0, r4
 8005012:	f000 f92c 	bl	800526e <xTaskCreate>
 8005016:	4603      	mov	r3, r0
 8005018:	2b01      	cmp	r3, #1
 800501a:	d001      	beq.n	8005020 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800501c:	2300      	movs	r3, #0
 800501e:	e000      	b.n	8005022 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005020:	68fb      	ldr	r3, [r7, #12]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800502a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b084      	sub	sp, #16
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <osDelay+0x16>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	e000      	b.n	8005042 <osDelay+0x18>
 8005040:	2301      	movs	r3, #1
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fa48 	bl	80054d8 <vTaskDelay>
  
  return osOK;
 8005048:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f103 0208 	add.w	r2, r3, #8
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800506a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f103 0208 	add.w	r2, r3, #8
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f103 0208 	add.w	r2, r3, #8
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005092:	b480      	push	{r7}
 8005094:	b083      	sub	sp, #12
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	683a      	ldr	r2, [r7, #0]
 80050d0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	1c5a      	adds	r2, r3, #1
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	601a      	str	r2, [r3, #0]
}
 80050e8:	bf00      	nop
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800510a:	d103      	bne.n	8005114 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	60fb      	str	r3, [r7, #12]
 8005112:	e00c      	b.n	800512e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3308      	adds	r3, #8
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	e002      	b.n	8005122 <vListInsert+0x2e>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	429a      	cmp	r2, r3
 800512c:	d2f6      	bcs.n	800511c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	1c5a      	adds	r2, r3, #1
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	601a      	str	r2, [r3, #0]
}
 800515a:	bf00      	nop
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005166:	b480      	push	{r7}
 8005168:	b085      	sub	sp, #20
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6892      	ldr	r2, [r2, #8]
 800517c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	6852      	ldr	r2, [r2, #4]
 8005186:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	429a      	cmp	r2, r3
 8005190:	d103      	bne.n	800519a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	689a      	ldr	r2, [r3, #8]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	1e5a      	subs	r2, r3, #1
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b08e      	sub	sp, #56	; 0x38
 80051be:	af04      	add	r7, sp, #16
 80051c0:	60f8      	str	r0, [r7, #12]
 80051c2:	60b9      	str	r1, [r7, #8]
 80051c4:	607a      	str	r2, [r7, #4]
 80051c6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80051c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d109      	bne.n	80051e2 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	623b      	str	r3, [r7, #32]
 80051e0:	e7fe      	b.n	80051e0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80051e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d109      	bne.n	80051fc <xTaskCreateStatic+0x42>
 80051e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ec:	f383 8811 	msr	BASEPRI, r3
 80051f0:	f3bf 8f6f 	isb	sy
 80051f4:	f3bf 8f4f 	dsb	sy
 80051f8:	61fb      	str	r3, [r7, #28]
 80051fa:	e7fe      	b.n	80051fa <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051fc:	2354      	movs	r3, #84	; 0x54
 80051fe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	2b54      	cmp	r3, #84	; 0x54
 8005204:	d009      	beq.n	800521a <xTaskCreateStatic+0x60>
 8005206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520a:	f383 8811 	msr	BASEPRI, r3
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	61bb      	str	r3, [r7, #24]
 8005218:	e7fe      	b.n	8005218 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800521a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800521c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521e:	2b00      	cmp	r3, #0
 8005220:	d01e      	beq.n	8005260 <xTaskCreateStatic+0xa6>
 8005222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005224:	2b00      	cmp	r3, #0
 8005226:	d01b      	beq.n	8005260 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005230:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	2202      	movs	r2, #2
 8005236:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800523a:	2300      	movs	r3, #0
 800523c:	9303      	str	r3, [sp, #12]
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	9302      	str	r3, [sp, #8]
 8005242:	f107 0314 	add.w	r3, r7, #20
 8005246:	9301      	str	r3, [sp, #4]
 8005248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	68b9      	ldr	r1, [r7, #8]
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f000 f850 	bl	80052f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005258:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800525a:	f000 f8d3 	bl	8005404 <prvAddNewTaskToReadyList>
 800525e:	e001      	b.n	8005264 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005260:	2300      	movs	r3, #0
 8005262:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005264:	697b      	ldr	r3, [r7, #20]
	}
 8005266:	4618      	mov	r0, r3
 8005268:	3728      	adds	r7, #40	; 0x28
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800526e:	b580      	push	{r7, lr}
 8005270:	b08c      	sub	sp, #48	; 0x30
 8005272:	af04      	add	r7, sp, #16
 8005274:	60f8      	str	r0, [r7, #12]
 8005276:	60b9      	str	r1, [r7, #8]
 8005278:	603b      	str	r3, [r7, #0]
 800527a:	4613      	mov	r3, r2
 800527c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800527e:	88fb      	ldrh	r3, [r7, #6]
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4618      	mov	r0, r3
 8005284:	f000 feae 	bl	8005fe4 <pvPortMalloc>
 8005288:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00e      	beq.n	80052ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005290:	2054      	movs	r0, #84	; 0x54
 8005292:	f000 fea7 	bl	8005fe4 <pvPortMalloc>
 8005296:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	631a      	str	r2, [r3, #48]	; 0x30
 80052a4:	e005      	b.n	80052b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052a6:	6978      	ldr	r0, [r7, #20]
 80052a8:	f000 ff5e 	bl	8006168 <vPortFree>
 80052ac:	e001      	b.n	80052b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d017      	beq.n	80052e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052c0:	88fa      	ldrh	r2, [r7, #6]
 80052c2:	2300      	movs	r3, #0
 80052c4:	9303      	str	r3, [sp, #12]
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	9302      	str	r3, [sp, #8]
 80052ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052cc:	9301      	str	r3, [sp, #4]
 80052ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	68b9      	ldr	r1, [r7, #8]
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 f80e 	bl	80052f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052dc:	69f8      	ldr	r0, [r7, #28]
 80052de:	f000 f891 	bl	8005404 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052e2:	2301      	movs	r3, #1
 80052e4:	61bb      	str	r3, [r7, #24]
 80052e6:	e002      	b.n	80052ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80052ee:	69bb      	ldr	r3, [r7, #24]
	}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3720      	adds	r7, #32
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005310:	3b01      	subs	r3, #1
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	f023 0307 	bic.w	r3, r3, #7
 800531e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	f003 0307 	and.w	r3, r3, #7
 8005326:	2b00      	cmp	r3, #0
 8005328:	d009      	beq.n	800533e <prvInitialiseNewTask+0x46>
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	e7fe      	b.n	800533c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d01f      	beq.n	8005384 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005344:	2300      	movs	r3, #0
 8005346:	61fb      	str	r3, [r7, #28]
 8005348:	e012      	b.n	8005370 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	4413      	add	r3, r2
 8005350:	7819      	ldrb	r1, [r3, #0]
 8005352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	4413      	add	r3, r2
 8005358:	3334      	adds	r3, #52	; 0x34
 800535a:	460a      	mov	r2, r1
 800535c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	4413      	add	r3, r2
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d006      	beq.n	8005378 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	3301      	adds	r3, #1
 800536e:	61fb      	str	r3, [r7, #28]
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	2b0f      	cmp	r3, #15
 8005374:	d9e9      	bls.n	800534a <prvInitialiseNewTask+0x52>
 8005376:	e000      	b.n	800537a <prvInitialiseNewTask+0x82>
			{
				break;
 8005378:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800537a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005382:	e003      	b.n	800538c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800538c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538e:	2b06      	cmp	r3, #6
 8005390:	d901      	bls.n	8005396 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005392:	2306      	movs	r3, #6
 8005394:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800539a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800539c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053a0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80053a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a4:	2200      	movs	r2, #0
 80053a6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053aa:	3304      	adds	r3, #4
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7ff fe70 	bl	8005092 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	3318      	adds	r3, #24
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7ff fe6b 	bl	8005092 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c4:	f1c3 0207 	rsb	r2, r3, #7
 80053c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053d0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d4:	2200      	movs	r2, #0
 80053d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053e0:	683a      	ldr	r2, [r7, #0]
 80053e2:	68f9      	ldr	r1, [r7, #12]
 80053e4:	69b8      	ldr	r0, [r7, #24]
 80053e6:	f000 fbfd 	bl	8005be4 <pxPortInitialiseStack>
 80053ea:	4602      	mov	r2, r0
 80053ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80053f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053fc:	bf00      	nop
 80053fe:	3720      	adds	r7, #32
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800540c:	f000 fd0e 	bl	8005e2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005410:	4b2a      	ldr	r3, [pc, #168]	; (80054bc <prvAddNewTaskToReadyList+0xb8>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	3301      	adds	r3, #1
 8005416:	4a29      	ldr	r2, [pc, #164]	; (80054bc <prvAddNewTaskToReadyList+0xb8>)
 8005418:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800541a:	4b29      	ldr	r3, [pc, #164]	; (80054c0 <prvAddNewTaskToReadyList+0xbc>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d109      	bne.n	8005436 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005422:	4a27      	ldr	r2, [pc, #156]	; (80054c0 <prvAddNewTaskToReadyList+0xbc>)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005428:	4b24      	ldr	r3, [pc, #144]	; (80054bc <prvAddNewTaskToReadyList+0xb8>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d110      	bne.n	8005452 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005430:	f000 fab8 	bl	80059a4 <prvInitialiseTaskLists>
 8005434:	e00d      	b.n	8005452 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005436:	4b23      	ldr	r3, [pc, #140]	; (80054c4 <prvAddNewTaskToReadyList+0xc0>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d109      	bne.n	8005452 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800543e:	4b20      	ldr	r3, [pc, #128]	; (80054c0 <prvAddNewTaskToReadyList+0xbc>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005448:	429a      	cmp	r2, r3
 800544a:	d802      	bhi.n	8005452 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800544c:	4a1c      	ldr	r2, [pc, #112]	; (80054c0 <prvAddNewTaskToReadyList+0xbc>)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005452:	4b1d      	ldr	r3, [pc, #116]	; (80054c8 <prvAddNewTaskToReadyList+0xc4>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	3301      	adds	r3, #1
 8005458:	4a1b      	ldr	r2, [pc, #108]	; (80054c8 <prvAddNewTaskToReadyList+0xc4>)
 800545a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005460:	2201      	movs	r2, #1
 8005462:	409a      	lsls	r2, r3
 8005464:	4b19      	ldr	r3, [pc, #100]	; (80054cc <prvAddNewTaskToReadyList+0xc8>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4313      	orrs	r3, r2
 800546a:	4a18      	ldr	r2, [pc, #96]	; (80054cc <prvAddNewTaskToReadyList+0xc8>)
 800546c:	6013      	str	r3, [r2, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005472:	4613      	mov	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4a15      	ldr	r2, [pc, #84]	; (80054d0 <prvAddNewTaskToReadyList+0xcc>)
 800547c:	441a      	add	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	3304      	adds	r3, #4
 8005482:	4619      	mov	r1, r3
 8005484:	4610      	mov	r0, r2
 8005486:	f7ff fe11 	bl	80050ac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800548a:	f000 fcfd 	bl	8005e88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800548e:	4b0d      	ldr	r3, [pc, #52]	; (80054c4 <prvAddNewTaskToReadyList+0xc0>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00e      	beq.n	80054b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005496:	4b0a      	ldr	r3, [pc, #40]	; (80054c0 <prvAddNewTaskToReadyList+0xbc>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d207      	bcs.n	80054b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054a4:	4b0b      	ldr	r3, [pc, #44]	; (80054d4 <prvAddNewTaskToReadyList+0xd0>)
 80054a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054b4:	bf00      	nop
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	2000026c 	.word	0x2000026c
 80054c0:	2000016c 	.word	0x2000016c
 80054c4:	20000278 	.word	0x20000278
 80054c8:	20000288 	.word	0x20000288
 80054cc:	20000274 	.word	0x20000274
 80054d0:	20000170 	.word	0x20000170
 80054d4:	e000ed04 	.word	0xe000ed04

080054d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80054e0:	2300      	movs	r3, #0
 80054e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d016      	beq.n	8005518 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80054ea:	4b13      	ldr	r3, [pc, #76]	; (8005538 <vTaskDelay+0x60>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d009      	beq.n	8005506 <vTaskDelay+0x2e>
 80054f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	60bb      	str	r3, [r7, #8]
 8005504:	e7fe      	b.n	8005504 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005506:	f000 f879 	bl	80055fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800550a:	2100      	movs	r1, #0
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 fb03 	bl	8005b18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005512:	f000 f881 	bl	8005618 <xTaskResumeAll>
 8005516:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d107      	bne.n	800552e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800551e:	4b07      	ldr	r3, [pc, #28]	; (800553c <vTaskDelay+0x64>)
 8005520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005524:	601a      	str	r2, [r3, #0]
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800552e:	bf00      	nop
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	20000294 	.word	0x20000294
 800553c:	e000ed04 	.word	0xe000ed04

08005540 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b08a      	sub	sp, #40	; 0x28
 8005544:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005546:	2300      	movs	r3, #0
 8005548:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800554a:	2300      	movs	r3, #0
 800554c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800554e:	463a      	mov	r2, r7
 8005550:	1d39      	adds	r1, r7, #4
 8005552:	f107 0308 	add.w	r3, r7, #8
 8005556:	4618      	mov	r0, r3
 8005558:	f000 ff1a 	bl	8006390 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800555c:	6839      	ldr	r1, [r7, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	9202      	str	r2, [sp, #8]
 8005564:	9301      	str	r3, [sp, #4]
 8005566:	2300      	movs	r3, #0
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	2300      	movs	r3, #0
 800556c:	460a      	mov	r2, r1
 800556e:	491d      	ldr	r1, [pc, #116]	; (80055e4 <vTaskStartScheduler+0xa4>)
 8005570:	481d      	ldr	r0, [pc, #116]	; (80055e8 <vTaskStartScheduler+0xa8>)
 8005572:	f7ff fe22 	bl	80051ba <xTaskCreateStatic>
 8005576:	4602      	mov	r2, r0
 8005578:	4b1c      	ldr	r3, [pc, #112]	; (80055ec <vTaskStartScheduler+0xac>)
 800557a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800557c:	4b1b      	ldr	r3, [pc, #108]	; (80055ec <vTaskStartScheduler+0xac>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d002      	beq.n	800558a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005584:	2301      	movs	r3, #1
 8005586:	617b      	str	r3, [r7, #20]
 8005588:	e001      	b.n	800558e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800558a:	2300      	movs	r3, #0
 800558c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d115      	bne.n	80055c0 <vTaskStartScheduler+0x80>
 8005594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055a6:	4b12      	ldr	r3, [pc, #72]	; (80055f0 <vTaskStartScheduler+0xb0>)
 80055a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055ae:	4b11      	ldr	r3, [pc, #68]	; (80055f4 <vTaskStartScheduler+0xb4>)
 80055b0:	2201      	movs	r2, #1
 80055b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055b4:	4b10      	ldr	r3, [pc, #64]	; (80055f8 <vTaskStartScheduler+0xb8>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055ba:	f000 fb99 	bl	8005cf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055be:	e00d      	b.n	80055dc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055c6:	d109      	bne.n	80055dc <vTaskStartScheduler+0x9c>
 80055c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	e7fe      	b.n	80055da <vTaskStartScheduler+0x9a>
}
 80055dc:	bf00      	nop
 80055de:	3718      	adds	r7, #24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	08007664 	.word	0x08007664
 80055e8:	08005975 	.word	0x08005975
 80055ec:	20000290 	.word	0x20000290
 80055f0:	2000028c 	.word	0x2000028c
 80055f4:	20000278 	.word	0x20000278
 80055f8:	20000270 	.word	0x20000270

080055fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005600:	4b04      	ldr	r3, [pc, #16]	; (8005614 <vTaskSuspendAll+0x18>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	3301      	adds	r3, #1
 8005606:	4a03      	ldr	r2, [pc, #12]	; (8005614 <vTaskSuspendAll+0x18>)
 8005608:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800560a:	bf00      	nop
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	20000294 	.word	0x20000294

08005618 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800561e:	2300      	movs	r3, #0
 8005620:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005622:	2300      	movs	r3, #0
 8005624:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005626:	4b41      	ldr	r3, [pc, #260]	; (800572c <xTaskResumeAll+0x114>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d109      	bne.n	8005642 <xTaskResumeAll+0x2a>
 800562e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	603b      	str	r3, [r7, #0]
 8005640:	e7fe      	b.n	8005640 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005642:	f000 fbf3 	bl	8005e2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005646:	4b39      	ldr	r3, [pc, #228]	; (800572c <xTaskResumeAll+0x114>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	3b01      	subs	r3, #1
 800564c:	4a37      	ldr	r2, [pc, #220]	; (800572c <xTaskResumeAll+0x114>)
 800564e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005650:	4b36      	ldr	r3, [pc, #216]	; (800572c <xTaskResumeAll+0x114>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d161      	bne.n	800571c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005658:	4b35      	ldr	r3, [pc, #212]	; (8005730 <xTaskResumeAll+0x118>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d05d      	beq.n	800571c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005660:	e02e      	b.n	80056c0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005662:	4b34      	ldr	r3, [pc, #208]	; (8005734 <xTaskResumeAll+0x11c>)
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	3318      	adds	r3, #24
 800566e:	4618      	mov	r0, r3
 8005670:	f7ff fd79 	bl	8005166 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	3304      	adds	r3, #4
 8005678:	4618      	mov	r0, r3
 800567a:	f7ff fd74 	bl	8005166 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005682:	2201      	movs	r2, #1
 8005684:	409a      	lsls	r2, r3
 8005686:	4b2c      	ldr	r3, [pc, #176]	; (8005738 <xTaskResumeAll+0x120>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4313      	orrs	r3, r2
 800568c:	4a2a      	ldr	r2, [pc, #168]	; (8005738 <xTaskResumeAll+0x120>)
 800568e:	6013      	str	r3, [r2, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005694:	4613      	mov	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4a27      	ldr	r2, [pc, #156]	; (800573c <xTaskResumeAll+0x124>)
 800569e:	441a      	add	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	3304      	adds	r3, #4
 80056a4:	4619      	mov	r1, r3
 80056a6:	4610      	mov	r0, r2
 80056a8:	f7ff fd00 	bl	80050ac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b0:	4b23      	ldr	r3, [pc, #140]	; (8005740 <xTaskResumeAll+0x128>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d302      	bcc.n	80056c0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80056ba:	4b22      	ldr	r3, [pc, #136]	; (8005744 <xTaskResumeAll+0x12c>)
 80056bc:	2201      	movs	r2, #1
 80056be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056c0:	4b1c      	ldr	r3, [pc, #112]	; (8005734 <xTaskResumeAll+0x11c>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1cc      	bne.n	8005662 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056ce:	f000 fa03 	bl	8005ad8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80056d2:	4b1d      	ldr	r3, [pc, #116]	; (8005748 <xTaskResumeAll+0x130>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d010      	beq.n	8005700 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056de:	f000 f837 	bl	8005750 <xTaskIncrementTick>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d002      	beq.n	80056ee <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80056e8:	4b16      	ldr	r3, [pc, #88]	; (8005744 <xTaskResumeAll+0x12c>)
 80056ea:	2201      	movs	r2, #1
 80056ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	3b01      	subs	r3, #1
 80056f2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1f1      	bne.n	80056de <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80056fa:	4b13      	ldr	r3, [pc, #76]	; (8005748 <xTaskResumeAll+0x130>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005700:	4b10      	ldr	r3, [pc, #64]	; (8005744 <xTaskResumeAll+0x12c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d009      	beq.n	800571c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005708:	2301      	movs	r3, #1
 800570a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800570c:	4b0f      	ldr	r3, [pc, #60]	; (800574c <xTaskResumeAll+0x134>)
 800570e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800571c:	f000 fbb4 	bl	8005e88 <vPortExitCritical>

	return xAlreadyYielded;
 8005720:	68bb      	ldr	r3, [r7, #8]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	20000294 	.word	0x20000294
 8005730:	2000026c 	.word	0x2000026c
 8005734:	2000022c 	.word	0x2000022c
 8005738:	20000274 	.word	0x20000274
 800573c:	20000170 	.word	0x20000170
 8005740:	2000016c 	.word	0x2000016c
 8005744:	20000280 	.word	0x20000280
 8005748:	2000027c 	.word	0x2000027c
 800574c:	e000ed04 	.word	0xe000ed04

08005750 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005756:	2300      	movs	r3, #0
 8005758:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800575a:	4b4e      	ldr	r3, [pc, #312]	; (8005894 <xTaskIncrementTick+0x144>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	f040 8087 	bne.w	8005872 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005764:	4b4c      	ldr	r3, [pc, #304]	; (8005898 <xTaskIncrementTick+0x148>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3301      	adds	r3, #1
 800576a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800576c:	4a4a      	ldr	r2, [pc, #296]	; (8005898 <xTaskIncrementTick+0x148>)
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d11f      	bne.n	80057b8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005778:	4b48      	ldr	r3, [pc, #288]	; (800589c <xTaskIncrementTick+0x14c>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d009      	beq.n	8005796 <xTaskIncrementTick+0x46>
 8005782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005786:	f383 8811 	msr	BASEPRI, r3
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	603b      	str	r3, [r7, #0]
 8005794:	e7fe      	b.n	8005794 <xTaskIncrementTick+0x44>
 8005796:	4b41      	ldr	r3, [pc, #260]	; (800589c <xTaskIncrementTick+0x14c>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	60fb      	str	r3, [r7, #12]
 800579c:	4b40      	ldr	r3, [pc, #256]	; (80058a0 <xTaskIncrementTick+0x150>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a3e      	ldr	r2, [pc, #248]	; (800589c <xTaskIncrementTick+0x14c>)
 80057a2:	6013      	str	r3, [r2, #0]
 80057a4:	4a3e      	ldr	r2, [pc, #248]	; (80058a0 <xTaskIncrementTick+0x150>)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6013      	str	r3, [r2, #0]
 80057aa:	4b3e      	ldr	r3, [pc, #248]	; (80058a4 <xTaskIncrementTick+0x154>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	3301      	adds	r3, #1
 80057b0:	4a3c      	ldr	r2, [pc, #240]	; (80058a4 <xTaskIncrementTick+0x154>)
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	f000 f990 	bl	8005ad8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057b8:	4b3b      	ldr	r3, [pc, #236]	; (80058a8 <xTaskIncrementTick+0x158>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d348      	bcc.n	8005854 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057c2:	4b36      	ldr	r3, [pc, #216]	; (800589c <xTaskIncrementTick+0x14c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d104      	bne.n	80057d6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057cc:	4b36      	ldr	r3, [pc, #216]	; (80058a8 <xTaskIncrementTick+0x158>)
 80057ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057d2:	601a      	str	r2, [r3, #0]
					break;
 80057d4:	e03e      	b.n	8005854 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057d6:	4b31      	ldr	r3, [pc, #196]	; (800589c <xTaskIncrementTick+0x14c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d203      	bcs.n	80057f6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057ee:	4a2e      	ldr	r2, [pc, #184]	; (80058a8 <xTaskIncrementTick+0x158>)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80057f4:	e02e      	b.n	8005854 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	3304      	adds	r3, #4
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff fcb3 	bl	8005166 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005804:	2b00      	cmp	r3, #0
 8005806:	d004      	beq.n	8005812 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	3318      	adds	r3, #24
 800580c:	4618      	mov	r0, r3
 800580e:	f7ff fcaa 	bl	8005166 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005816:	2201      	movs	r2, #1
 8005818:	409a      	lsls	r2, r3
 800581a:	4b24      	ldr	r3, [pc, #144]	; (80058ac <xTaskIncrementTick+0x15c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4313      	orrs	r3, r2
 8005820:	4a22      	ldr	r2, [pc, #136]	; (80058ac <xTaskIncrementTick+0x15c>)
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4a1f      	ldr	r2, [pc, #124]	; (80058b0 <xTaskIncrementTick+0x160>)
 8005832:	441a      	add	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	3304      	adds	r3, #4
 8005838:	4619      	mov	r1, r3
 800583a:	4610      	mov	r0, r2
 800583c:	f7ff fc36 	bl	80050ac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005844:	4b1b      	ldr	r3, [pc, #108]	; (80058b4 <xTaskIncrementTick+0x164>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584a:	429a      	cmp	r2, r3
 800584c:	d3b9      	bcc.n	80057c2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800584e:	2301      	movs	r3, #1
 8005850:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005852:	e7b6      	b.n	80057c2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005854:	4b17      	ldr	r3, [pc, #92]	; (80058b4 <xTaskIncrementTick+0x164>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800585a:	4915      	ldr	r1, [pc, #84]	; (80058b0 <xTaskIncrementTick+0x160>)
 800585c:	4613      	mov	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	440b      	add	r3, r1
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d907      	bls.n	800587c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800586c:	2301      	movs	r3, #1
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	e004      	b.n	800587c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005872:	4b11      	ldr	r3, [pc, #68]	; (80058b8 <xTaskIncrementTick+0x168>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	3301      	adds	r3, #1
 8005878:	4a0f      	ldr	r2, [pc, #60]	; (80058b8 <xTaskIncrementTick+0x168>)
 800587a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800587c:	4b0f      	ldr	r3, [pc, #60]	; (80058bc <xTaskIncrementTick+0x16c>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8005884:	2301      	movs	r3, #1
 8005886:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005888:	697b      	ldr	r3, [r7, #20]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3718      	adds	r7, #24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	20000294 	.word	0x20000294
 8005898:	20000270 	.word	0x20000270
 800589c:	20000224 	.word	0x20000224
 80058a0:	20000228 	.word	0x20000228
 80058a4:	20000284 	.word	0x20000284
 80058a8:	2000028c 	.word	0x2000028c
 80058ac:	20000274 	.word	0x20000274
 80058b0:	20000170 	.word	0x20000170
 80058b4:	2000016c 	.word	0x2000016c
 80058b8:	2000027c 	.word	0x2000027c
 80058bc:	20000280 	.word	0x20000280

080058c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058c6:	4b26      	ldr	r3, [pc, #152]	; (8005960 <vTaskSwitchContext+0xa0>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058ce:	4b25      	ldr	r3, [pc, #148]	; (8005964 <vTaskSwitchContext+0xa4>)
 80058d0:	2201      	movs	r2, #1
 80058d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058d4:	e03e      	b.n	8005954 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80058d6:	4b23      	ldr	r3, [pc, #140]	; (8005964 <vTaskSwitchContext+0xa4>)
 80058d8:	2200      	movs	r2, #0
 80058da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058dc:	4b22      	ldr	r3, [pc, #136]	; (8005968 <vTaskSwitchContext+0xa8>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	fab3 f383 	clz	r3, r3
 80058e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80058ea:	7afb      	ldrb	r3, [r7, #11]
 80058ec:	f1c3 031f 	rsb	r3, r3, #31
 80058f0:	617b      	str	r3, [r7, #20]
 80058f2:	491e      	ldr	r1, [pc, #120]	; (800596c <vTaskSwitchContext+0xac>)
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	4613      	mov	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	440b      	add	r3, r1
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d109      	bne.n	800591a <vTaskSwitchContext+0x5a>
	__asm volatile
 8005906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	607b      	str	r3, [r7, #4]
 8005918:	e7fe      	b.n	8005918 <vTaskSwitchContext+0x58>
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	4613      	mov	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4413      	add	r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4a11      	ldr	r2, [pc, #68]	; (800596c <vTaskSwitchContext+0xac>)
 8005926:	4413      	add	r3, r2
 8005928:	613b      	str	r3, [r7, #16]
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	605a      	str	r2, [r3, #4]
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	3308      	adds	r3, #8
 800593c:	429a      	cmp	r2, r3
 800593e:	d104      	bne.n	800594a <vTaskSwitchContext+0x8a>
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	605a      	str	r2, [r3, #4]
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	4a07      	ldr	r2, [pc, #28]	; (8005970 <vTaskSwitchContext+0xb0>)
 8005952:	6013      	str	r3, [r2, #0]
}
 8005954:	bf00      	nop
 8005956:	371c      	adds	r7, #28
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	20000294 	.word	0x20000294
 8005964:	20000280 	.word	0x20000280
 8005968:	20000274 	.word	0x20000274
 800596c:	20000170 	.word	0x20000170
 8005970:	2000016c 	.word	0x2000016c

08005974 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800597c:	f000 f852 	bl	8005a24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005980:	4b06      	ldr	r3, [pc, #24]	; (800599c <prvIdleTask+0x28>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d9f9      	bls.n	800597c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005988:	4b05      	ldr	r3, [pc, #20]	; (80059a0 <prvIdleTask+0x2c>)
 800598a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800598e:	601a      	str	r2, [r3, #0]
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005998:	e7f0      	b.n	800597c <prvIdleTask+0x8>
 800599a:	bf00      	nop
 800599c:	20000170 	.word	0x20000170
 80059a0:	e000ed04 	.word	0xe000ed04

080059a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059aa:	2300      	movs	r3, #0
 80059ac:	607b      	str	r3, [r7, #4]
 80059ae:	e00c      	b.n	80059ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	4613      	mov	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4413      	add	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4a12      	ldr	r2, [pc, #72]	; (8005a04 <prvInitialiseTaskLists+0x60>)
 80059bc:	4413      	add	r3, r2
 80059be:	4618      	mov	r0, r3
 80059c0:	f7ff fb47 	bl	8005052 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	3301      	adds	r3, #1
 80059c8:	607b      	str	r3, [r7, #4]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b06      	cmp	r3, #6
 80059ce:	d9ef      	bls.n	80059b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059d0:	480d      	ldr	r0, [pc, #52]	; (8005a08 <prvInitialiseTaskLists+0x64>)
 80059d2:	f7ff fb3e 	bl	8005052 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059d6:	480d      	ldr	r0, [pc, #52]	; (8005a0c <prvInitialiseTaskLists+0x68>)
 80059d8:	f7ff fb3b 	bl	8005052 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059dc:	480c      	ldr	r0, [pc, #48]	; (8005a10 <prvInitialiseTaskLists+0x6c>)
 80059de:	f7ff fb38 	bl	8005052 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059e2:	480c      	ldr	r0, [pc, #48]	; (8005a14 <prvInitialiseTaskLists+0x70>)
 80059e4:	f7ff fb35 	bl	8005052 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059e8:	480b      	ldr	r0, [pc, #44]	; (8005a18 <prvInitialiseTaskLists+0x74>)
 80059ea:	f7ff fb32 	bl	8005052 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80059ee:	4b0b      	ldr	r3, [pc, #44]	; (8005a1c <prvInitialiseTaskLists+0x78>)
 80059f0:	4a05      	ldr	r2, [pc, #20]	; (8005a08 <prvInitialiseTaskLists+0x64>)
 80059f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80059f4:	4b0a      	ldr	r3, [pc, #40]	; (8005a20 <prvInitialiseTaskLists+0x7c>)
 80059f6:	4a05      	ldr	r2, [pc, #20]	; (8005a0c <prvInitialiseTaskLists+0x68>)
 80059f8:	601a      	str	r2, [r3, #0]
}
 80059fa:	bf00      	nop
 80059fc:	3708      	adds	r7, #8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	20000170 	.word	0x20000170
 8005a08:	200001fc 	.word	0x200001fc
 8005a0c:	20000210 	.word	0x20000210
 8005a10:	2000022c 	.word	0x2000022c
 8005a14:	20000240 	.word	0x20000240
 8005a18:	20000258 	.word	0x20000258
 8005a1c:	20000224 	.word	0x20000224
 8005a20:	20000228 	.word	0x20000228

08005a24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a2a:	e019      	b.n	8005a60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a2c:	f000 f9fe 	bl	8005e2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a30:	4b0f      	ldr	r3, [pc, #60]	; (8005a70 <prvCheckTasksWaitingTermination+0x4c>)
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7ff fb92 	bl	8005166 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a42:	4b0c      	ldr	r3, [pc, #48]	; (8005a74 <prvCheckTasksWaitingTermination+0x50>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	3b01      	subs	r3, #1
 8005a48:	4a0a      	ldr	r2, [pc, #40]	; (8005a74 <prvCheckTasksWaitingTermination+0x50>)
 8005a4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a4c:	4b0a      	ldr	r3, [pc, #40]	; (8005a78 <prvCheckTasksWaitingTermination+0x54>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3b01      	subs	r3, #1
 8005a52:	4a09      	ldr	r2, [pc, #36]	; (8005a78 <prvCheckTasksWaitingTermination+0x54>)
 8005a54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a56:	f000 fa17 	bl	8005e88 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f80e 	bl	8005a7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a60:	4b05      	ldr	r3, [pc, #20]	; (8005a78 <prvCheckTasksWaitingTermination+0x54>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1e1      	bne.n	8005a2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a68:	bf00      	nop
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	20000240 	.word	0x20000240
 8005a74:	2000026c 	.word	0x2000026c
 8005a78:	20000254 	.word	0x20000254

08005a7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d108      	bne.n	8005aa0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 fb68 	bl	8006168 <vPortFree>
				vPortFree( pxTCB );
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 fb65 	bl	8006168 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a9e:	e017      	b.n	8005ad0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d103      	bne.n	8005ab2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fb5c 	bl	8006168 <vPortFree>
	}
 8005ab0:	e00e      	b.n	8005ad0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d009      	beq.n	8005ad0 <prvDeleteTCB+0x54>
 8005abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac0:	f383 8811 	msr	BASEPRI, r3
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	60fb      	str	r3, [r7, #12]
 8005ace:	e7fe      	b.n	8005ace <prvDeleteTCB+0x52>
	}
 8005ad0:	bf00      	nop
 8005ad2:	3710      	adds	r7, #16
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ade:	4b0c      	ldr	r3, [pc, #48]	; (8005b10 <prvResetNextTaskUnblockTime+0x38>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d104      	bne.n	8005af2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ae8:	4b0a      	ldr	r3, [pc, #40]	; (8005b14 <prvResetNextTaskUnblockTime+0x3c>)
 8005aea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005aee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005af0:	e008      	b.n	8005b04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005af2:	4b07      	ldr	r3, [pc, #28]	; (8005b10 <prvResetNextTaskUnblockTime+0x38>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	4a04      	ldr	r2, [pc, #16]	; (8005b14 <prvResetNextTaskUnblockTime+0x3c>)
 8005b02:	6013      	str	r3, [r2, #0]
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	20000224 	.word	0x20000224
 8005b14:	2000028c 	.word	0x2000028c

08005b18 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b22:	4b29      	ldr	r3, [pc, #164]	; (8005bc8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b28:	4b28      	ldr	r3, [pc, #160]	; (8005bcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7ff fb19 	bl	8005166 <uxListRemove>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10b      	bne.n	8005b52 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005b3a:	4b24      	ldr	r3, [pc, #144]	; (8005bcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b40:	2201      	movs	r2, #1
 8005b42:	fa02 f303 	lsl.w	r3, r2, r3
 8005b46:	43da      	mvns	r2, r3
 8005b48:	4b21      	ldr	r3, [pc, #132]	; (8005bd0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	4a20      	ldr	r2, [pc, #128]	; (8005bd0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b50:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b58:	d10a      	bne.n	8005b70 <prvAddCurrentTaskToDelayedList+0x58>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d007      	beq.n	8005b70 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b60:	4b1a      	ldr	r3, [pc, #104]	; (8005bcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	3304      	adds	r3, #4
 8005b66:	4619      	mov	r1, r3
 8005b68:	481a      	ldr	r0, [pc, #104]	; (8005bd4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005b6a:	f7ff fa9f 	bl	80050ac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b6e:	e026      	b.n	8005bbe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4413      	add	r3, r2
 8005b76:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b78:	4b14      	ldr	r3, [pc, #80]	; (8005bcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d209      	bcs.n	8005b9c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b88:	4b13      	ldr	r3, [pc, #76]	; (8005bd8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	4b0f      	ldr	r3, [pc, #60]	; (8005bcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3304      	adds	r3, #4
 8005b92:	4619      	mov	r1, r3
 8005b94:	4610      	mov	r0, r2
 8005b96:	f7ff faad 	bl	80050f4 <vListInsert>
}
 8005b9a:	e010      	b.n	8005bbe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b9c:	4b0f      	ldr	r3, [pc, #60]	; (8005bdc <prvAddCurrentTaskToDelayedList+0xc4>)
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3304      	adds	r3, #4
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	4610      	mov	r0, r2
 8005baa:	f7ff faa3 	bl	80050f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005bae:	4b0c      	ldr	r3, [pc, #48]	; (8005be0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d202      	bcs.n	8005bbe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005bb8:	4a09      	ldr	r2, [pc, #36]	; (8005be0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	6013      	str	r3, [r2, #0]
}
 8005bbe:	bf00      	nop
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	20000270 	.word	0x20000270
 8005bcc:	2000016c 	.word	0x2000016c
 8005bd0:	20000274 	.word	0x20000274
 8005bd4:	20000258 	.word	0x20000258
 8005bd8:	20000228 	.word	0x20000228
 8005bdc:	20000224 	.word	0x20000224
 8005be0:	2000028c 	.word	0x2000028c

08005be4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	3b04      	subs	r3, #4
 8005bf4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005bfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	3b04      	subs	r3, #4
 8005c02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	f023 0201 	bic.w	r2, r3, #1
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	3b04      	subs	r3, #4
 8005c12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c14:	4a0c      	ldr	r2, [pc, #48]	; (8005c48 <pxPortInitialiseStack+0x64>)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	3b14      	subs	r3, #20
 8005c1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	3b04      	subs	r3, #4
 8005c2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f06f 0202 	mvn.w	r2, #2
 8005c32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	3b20      	subs	r3, #32
 8005c38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	08005c4d 	.word	0x08005c4d

08005c4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005c52:	2300      	movs	r3, #0
 8005c54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c56:	4b11      	ldr	r3, [pc, #68]	; (8005c9c <prvTaskExitError+0x50>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c5e:	d009      	beq.n	8005c74 <prvTaskExitError+0x28>
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	e7fe      	b.n	8005c72 <prvTaskExitError+0x26>
 8005c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c86:	bf00      	nop
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d0fc      	beq.n	8005c88 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c8e:	bf00      	nop
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	200000cc 	.word	0x200000cc

08005ca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ca0:	4b07      	ldr	r3, [pc, #28]	; (8005cc0 <pxCurrentTCBConst2>)
 8005ca2:	6819      	ldr	r1, [r3, #0]
 8005ca4:	6808      	ldr	r0, [r1, #0]
 8005ca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005caa:	f380 8809 	msr	PSP, r0
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f04f 0000 	mov.w	r0, #0
 8005cb6:	f380 8811 	msr	BASEPRI, r0
 8005cba:	4770      	bx	lr
 8005cbc:	f3af 8000 	nop.w

08005cc0 <pxCurrentTCBConst2>:
 8005cc0:	2000016c 	.word	0x2000016c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005cc4:	bf00      	nop
 8005cc6:	bf00      	nop

08005cc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005cc8:	4808      	ldr	r0, [pc, #32]	; (8005cec <prvPortStartFirstTask+0x24>)
 8005cca:	6800      	ldr	r0, [r0, #0]
 8005ccc:	6800      	ldr	r0, [r0, #0]
 8005cce:	f380 8808 	msr	MSP, r0
 8005cd2:	f04f 0000 	mov.w	r0, #0
 8005cd6:	f380 8814 	msr	CONTROL, r0
 8005cda:	b662      	cpsie	i
 8005cdc:	b661      	cpsie	f
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	df00      	svc	0
 8005ce8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005cea:	bf00      	nop
 8005cec:	e000ed08 	.word	0xe000ed08

08005cf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005cf6:	4b44      	ldr	r3, [pc, #272]	; (8005e08 <xPortStartScheduler+0x118>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a44      	ldr	r2, [pc, #272]	; (8005e0c <xPortStartScheduler+0x11c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d109      	bne.n	8005d14 <xPortStartScheduler+0x24>
 8005d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	613b      	str	r3, [r7, #16]
 8005d12:	e7fe      	b.n	8005d12 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d14:	4b3c      	ldr	r3, [pc, #240]	; (8005e08 <xPortStartScheduler+0x118>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a3d      	ldr	r2, [pc, #244]	; (8005e10 <xPortStartScheduler+0x120>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d109      	bne.n	8005d32 <xPortStartScheduler+0x42>
 8005d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	e7fe      	b.n	8005d30 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d32:	4b38      	ldr	r3, [pc, #224]	; (8005e14 <xPortStartScheduler+0x124>)
 8005d34:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	22ff      	movs	r2, #255	; 0xff
 8005d42:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d4c:	78fb      	ldrb	r3, [r7, #3]
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	4b30      	ldr	r3, [pc, #192]	; (8005e18 <xPortStartScheduler+0x128>)
 8005d58:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d5a:	4b30      	ldr	r3, [pc, #192]	; (8005e1c <xPortStartScheduler+0x12c>)
 8005d5c:	2207      	movs	r2, #7
 8005d5e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d60:	e009      	b.n	8005d76 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005d62:	4b2e      	ldr	r3, [pc, #184]	; (8005e1c <xPortStartScheduler+0x12c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	4a2c      	ldr	r2, [pc, #176]	; (8005e1c <xPortStartScheduler+0x12c>)
 8005d6a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d6c:	78fb      	ldrb	r3, [r7, #3]
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	005b      	lsls	r3, r3, #1
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d76:	78fb      	ldrb	r3, [r7, #3]
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7e:	2b80      	cmp	r3, #128	; 0x80
 8005d80:	d0ef      	beq.n	8005d62 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d82:	4b26      	ldr	r3, [pc, #152]	; (8005e1c <xPortStartScheduler+0x12c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f1c3 0307 	rsb	r3, r3, #7
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	d009      	beq.n	8005da2 <xPortStartScheduler+0xb2>
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	60bb      	str	r3, [r7, #8]
 8005da0:	e7fe      	b.n	8005da0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005da2:	4b1e      	ldr	r3, [pc, #120]	; (8005e1c <xPortStartScheduler+0x12c>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	021b      	lsls	r3, r3, #8
 8005da8:	4a1c      	ldr	r2, [pc, #112]	; (8005e1c <xPortStartScheduler+0x12c>)
 8005daa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005dac:	4b1b      	ldr	r3, [pc, #108]	; (8005e1c <xPortStartScheduler+0x12c>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005db4:	4a19      	ldr	r2, [pc, #100]	; (8005e1c <xPortStartScheduler+0x12c>)
 8005db6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005dc0:	4b17      	ldr	r3, [pc, #92]	; (8005e20 <xPortStartScheduler+0x130>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a16      	ldr	r2, [pc, #88]	; (8005e20 <xPortStartScheduler+0x130>)
 8005dc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005dca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005dcc:	4b14      	ldr	r3, [pc, #80]	; (8005e20 <xPortStartScheduler+0x130>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a13      	ldr	r2, [pc, #76]	; (8005e20 <xPortStartScheduler+0x130>)
 8005dd2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005dd6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005dd8:	f000 f8d6 	bl	8005f88 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ddc:	4b11      	ldr	r3, [pc, #68]	; (8005e24 <xPortStartScheduler+0x134>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005de2:	f000 f8f5 	bl	8005fd0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005de6:	4b10      	ldr	r3, [pc, #64]	; (8005e28 <xPortStartScheduler+0x138>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a0f      	ldr	r2, [pc, #60]	; (8005e28 <xPortStartScheduler+0x138>)
 8005dec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005df0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005df2:	f7ff ff69 	bl	8005cc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005df6:	f7ff fd63 	bl	80058c0 <vTaskSwitchContext>
	prvTaskExitError();
 8005dfa:	f7ff ff27 	bl	8005c4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3718      	adds	r7, #24
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	e000ed00 	.word	0xe000ed00
 8005e0c:	410fc271 	.word	0x410fc271
 8005e10:	410fc270 	.word	0x410fc270
 8005e14:	e000e400 	.word	0xe000e400
 8005e18:	20000298 	.word	0x20000298
 8005e1c:	2000029c 	.word	0x2000029c
 8005e20:	e000ed20 	.word	0xe000ed20
 8005e24:	200000cc 	.word	0x200000cc
 8005e28:	e000ef34 	.word	0xe000ef34

08005e2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e36:	f383 8811 	msr	BASEPRI, r3
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e44:	4b0e      	ldr	r3, [pc, #56]	; (8005e80 <vPortEnterCritical+0x54>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	4a0d      	ldr	r2, [pc, #52]	; (8005e80 <vPortEnterCritical+0x54>)
 8005e4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e4e:	4b0c      	ldr	r3, [pc, #48]	; (8005e80 <vPortEnterCritical+0x54>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d10e      	bne.n	8005e74 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e56:	4b0b      	ldr	r3, [pc, #44]	; (8005e84 <vPortEnterCritical+0x58>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d009      	beq.n	8005e74 <vPortEnterCritical+0x48>
 8005e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	603b      	str	r3, [r7, #0]
 8005e72:	e7fe      	b.n	8005e72 <vPortEnterCritical+0x46>
	}
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	200000cc 	.word	0x200000cc
 8005e84:	e000ed04 	.word	0xe000ed04

08005e88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e8e:	4b11      	ldr	r3, [pc, #68]	; (8005ed4 <vPortExitCritical+0x4c>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d109      	bne.n	8005eaa <vPortExitCritical+0x22>
 8005e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	607b      	str	r3, [r7, #4]
 8005ea8:	e7fe      	b.n	8005ea8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005eaa:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <vPortExitCritical+0x4c>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	4a08      	ldr	r2, [pc, #32]	; (8005ed4 <vPortExitCritical+0x4c>)
 8005eb2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005eb4:	4b07      	ldr	r3, [pc, #28]	; (8005ed4 <vPortExitCritical+0x4c>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d104      	bne.n	8005ec6 <vPortExitCritical+0x3e>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	200000cc 	.word	0x200000cc
	...

08005ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ee0:	f3ef 8009 	mrs	r0, PSP
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	4b15      	ldr	r3, [pc, #84]	; (8005f40 <pxCurrentTCBConst>)
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	f01e 0f10 	tst.w	lr, #16
 8005ef0:	bf08      	it	eq
 8005ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005efa:	6010      	str	r0, [r2, #0]
 8005efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005f04:	f380 8811 	msr	BASEPRI, r0
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f7ff fcd6 	bl	80058c0 <vTaskSwitchContext>
 8005f14:	f04f 0000 	mov.w	r0, #0
 8005f18:	f380 8811 	msr	BASEPRI, r0
 8005f1c:	bc09      	pop	{r0, r3}
 8005f1e:	6819      	ldr	r1, [r3, #0]
 8005f20:	6808      	ldr	r0, [r1, #0]
 8005f22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f26:	f01e 0f10 	tst.w	lr, #16
 8005f2a:	bf08      	it	eq
 8005f2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f30:	f380 8809 	msr	PSP, r0
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	f3af 8000 	nop.w

08005f40 <pxCurrentTCBConst>:
 8005f40:	2000016c 	.word	0x2000016c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f44:	bf00      	nop
 8005f46:	bf00      	nop

08005f48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f52:	f383 8811 	msr	BASEPRI, r3
 8005f56:	f3bf 8f6f 	isb	sy
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f60:	f7ff fbf6 	bl	8005750 <xTaskIncrementTick>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f6a:	4b06      	ldr	r3, [pc, #24]	; (8005f84 <SysTick_Handler+0x3c>)
 8005f6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	2300      	movs	r3, #0
 8005f74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f7c:	bf00      	nop
 8005f7e:	3708      	adds	r7, #8
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	e000ed04 	.word	0xe000ed04

08005f88 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f88:	b480      	push	{r7}
 8005f8a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f8c:	4b0b      	ldr	r3, [pc, #44]	; (8005fbc <vPortSetupTimerInterrupt+0x34>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f92:	4b0b      	ldr	r3, [pc, #44]	; (8005fc0 <vPortSetupTimerInterrupt+0x38>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f98:	4b0a      	ldr	r3, [pc, #40]	; (8005fc4 <vPortSetupTimerInterrupt+0x3c>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a0a      	ldr	r2, [pc, #40]	; (8005fc8 <vPortSetupTimerInterrupt+0x40>)
 8005f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa2:	099b      	lsrs	r3, r3, #6
 8005fa4:	4a09      	ldr	r2, [pc, #36]	; (8005fcc <vPortSetupTimerInterrupt+0x44>)
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005faa:	4b04      	ldr	r3, [pc, #16]	; (8005fbc <vPortSetupTimerInterrupt+0x34>)
 8005fac:	2207      	movs	r2, #7
 8005fae:	601a      	str	r2, [r3, #0]
}
 8005fb0:	bf00      	nop
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	e000e010 	.word	0xe000e010
 8005fc0:	e000e018 	.word	0xe000e018
 8005fc4:	200000d0 	.word	0x200000d0
 8005fc8:	10624dd3 	.word	0x10624dd3
 8005fcc:	e000e014 	.word	0xe000e014

08005fd0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005fd0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005fe0 <vPortEnableVFP+0x10>
 8005fd4:	6801      	ldr	r1, [r0, #0]
 8005fd6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005fda:	6001      	str	r1, [r0, #0]
 8005fdc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005fde:	bf00      	nop
 8005fe0:	e000ed88 	.word	0xe000ed88

08005fe4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b08a      	sub	sp, #40	; 0x28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005fec:	2300      	movs	r3, #0
 8005fee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ff0:	f7ff fb04 	bl	80055fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ff4:	4b57      	ldr	r3, [pc, #348]	; (8006154 <pvPortMalloc+0x170>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ffc:	f000 f90c 	bl	8006218 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006000:	4b55      	ldr	r3, [pc, #340]	; (8006158 <pvPortMalloc+0x174>)
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4013      	ands	r3, r2
 8006008:	2b00      	cmp	r3, #0
 800600a:	f040 808c 	bne.w	8006126 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d01c      	beq.n	800604e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006014:	2208      	movs	r2, #8
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4413      	add	r3, r2
 800601a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f003 0307 	and.w	r3, r3, #7
 8006022:	2b00      	cmp	r3, #0
 8006024:	d013      	beq.n	800604e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f023 0307 	bic.w	r3, r3, #7
 800602c:	3308      	adds	r3, #8
 800602e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	2b00      	cmp	r3, #0
 8006038:	d009      	beq.n	800604e <pvPortMalloc+0x6a>
	__asm volatile
 800603a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603e:	f383 8811 	msr	BASEPRI, r3
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	617b      	str	r3, [r7, #20]
 800604c:	e7fe      	b.n	800604c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d068      	beq.n	8006126 <pvPortMalloc+0x142>
 8006054:	4b41      	ldr	r3, [pc, #260]	; (800615c <pvPortMalloc+0x178>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	429a      	cmp	r2, r3
 800605c:	d863      	bhi.n	8006126 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800605e:	4b40      	ldr	r3, [pc, #256]	; (8006160 <pvPortMalloc+0x17c>)
 8006060:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006062:	4b3f      	ldr	r3, [pc, #252]	; (8006160 <pvPortMalloc+0x17c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006068:	e004      	b.n	8006074 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	429a      	cmp	r2, r3
 800607c:	d903      	bls.n	8006086 <pvPortMalloc+0xa2>
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1f1      	bne.n	800606a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006086:	4b33      	ldr	r3, [pc, #204]	; (8006154 <pvPortMalloc+0x170>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800608c:	429a      	cmp	r2, r3
 800608e:	d04a      	beq.n	8006126 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006090:	6a3b      	ldr	r3, [r7, #32]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2208      	movs	r2, #8
 8006096:	4413      	add	r3, r2
 8006098:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80060a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	1ad2      	subs	r2, r2, r3
 80060aa:	2308      	movs	r3, #8
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d91e      	bls.n	80060f0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80060b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4413      	add	r3, r2
 80060b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	f003 0307 	and.w	r3, r3, #7
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d009      	beq.n	80060d8 <pvPortMalloc+0xf4>
 80060c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	613b      	str	r3, [r7, #16]
 80060d6:	e7fe      	b.n	80060d6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	1ad2      	subs	r2, r2, r3
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060ea:	69b8      	ldr	r0, [r7, #24]
 80060ec:	f000 f8f6 	bl	80062dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060f0:	4b1a      	ldr	r3, [pc, #104]	; (800615c <pvPortMalloc+0x178>)
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	4a18      	ldr	r2, [pc, #96]	; (800615c <pvPortMalloc+0x178>)
 80060fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060fe:	4b17      	ldr	r3, [pc, #92]	; (800615c <pvPortMalloc+0x178>)
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	4b18      	ldr	r3, [pc, #96]	; (8006164 <pvPortMalloc+0x180>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	429a      	cmp	r2, r3
 8006108:	d203      	bcs.n	8006112 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800610a:	4b14      	ldr	r3, [pc, #80]	; (800615c <pvPortMalloc+0x178>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a15      	ldr	r2, [pc, #84]	; (8006164 <pvPortMalloc+0x180>)
 8006110:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	4b10      	ldr	r3, [pc, #64]	; (8006158 <pvPortMalloc+0x174>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	431a      	orrs	r2, r3
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006126:	f7ff fa77 	bl	8005618 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	f003 0307 	and.w	r3, r3, #7
 8006130:	2b00      	cmp	r3, #0
 8006132:	d009      	beq.n	8006148 <pvPortMalloc+0x164>
 8006134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006138:	f383 8811 	msr	BASEPRI, r3
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	60fb      	str	r3, [r7, #12]
 8006146:	e7fe      	b.n	8006146 <pvPortMalloc+0x162>
	return pvReturn;
 8006148:	69fb      	ldr	r3, [r7, #28]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3728      	adds	r7, #40	; 0x28
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	20000e60 	.word	0x20000e60
 8006158:	20000e6c 	.word	0x20000e6c
 800615c:	20000e64 	.word	0x20000e64
 8006160:	20000e58 	.word	0x20000e58
 8006164:	20000e68 	.word	0x20000e68

08006168 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d046      	beq.n	8006208 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800617a:	2308      	movs	r3, #8
 800617c:	425b      	negs	r3, r3
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	4413      	add	r3, r2
 8006182:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	4b20      	ldr	r3, [pc, #128]	; (8006210 <vPortFree+0xa8>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4013      	ands	r3, r2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d109      	bne.n	80061aa <vPortFree+0x42>
 8006196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	60fb      	str	r3, [r7, #12]
 80061a8:	e7fe      	b.n	80061a8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d009      	beq.n	80061c6 <vPortFree+0x5e>
 80061b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b6:	f383 8811 	msr	BASEPRI, r3
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	60bb      	str	r3, [r7, #8]
 80061c4:	e7fe      	b.n	80061c4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	685a      	ldr	r2, [r3, #4]
 80061ca:	4b11      	ldr	r3, [pc, #68]	; (8006210 <vPortFree+0xa8>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4013      	ands	r3, r2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d019      	beq.n	8006208 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d115      	bne.n	8006208 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	4b0b      	ldr	r3, [pc, #44]	; (8006210 <vPortFree+0xa8>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	43db      	mvns	r3, r3
 80061e6:	401a      	ands	r2, r3
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061ec:	f7ff fa06 	bl	80055fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	4b07      	ldr	r3, [pc, #28]	; (8006214 <vPortFree+0xac>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4413      	add	r3, r2
 80061fa:	4a06      	ldr	r2, [pc, #24]	; (8006214 <vPortFree+0xac>)
 80061fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061fe:	6938      	ldr	r0, [r7, #16]
 8006200:	f000 f86c 	bl	80062dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006204:	f7ff fa08 	bl	8005618 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006208:	bf00      	nop
 800620a:	3718      	adds	r7, #24
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	20000e6c 	.word	0x20000e6c
 8006214:	20000e64 	.word	0x20000e64

08006218 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800621e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006222:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006224:	4b27      	ldr	r3, [pc, #156]	; (80062c4 <prvHeapInit+0xac>)
 8006226:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f003 0307 	and.w	r3, r3, #7
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00c      	beq.n	800624c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	3307      	adds	r3, #7
 8006236:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f023 0307 	bic.w	r3, r3, #7
 800623e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	4a1f      	ldr	r2, [pc, #124]	; (80062c4 <prvHeapInit+0xac>)
 8006248:	4413      	add	r3, r2
 800624a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006250:	4a1d      	ldr	r2, [pc, #116]	; (80062c8 <prvHeapInit+0xb0>)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006256:	4b1c      	ldr	r3, [pc, #112]	; (80062c8 <prvHeapInit+0xb0>)
 8006258:	2200      	movs	r2, #0
 800625a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	4413      	add	r3, r2
 8006262:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006264:	2208      	movs	r2, #8
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	1a9b      	subs	r3, r3, r2
 800626a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 0307 	bic.w	r3, r3, #7
 8006272:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	4a15      	ldr	r2, [pc, #84]	; (80062cc <prvHeapInit+0xb4>)
 8006278:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800627a:	4b14      	ldr	r3, [pc, #80]	; (80062cc <prvHeapInit+0xb4>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2200      	movs	r2, #0
 8006280:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006282:	4b12      	ldr	r3, [pc, #72]	; (80062cc <prvHeapInit+0xb4>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2200      	movs	r2, #0
 8006288:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	1ad2      	subs	r2, r2, r3
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006298:	4b0c      	ldr	r3, [pc, #48]	; (80062cc <prvHeapInit+0xb4>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	4a0a      	ldr	r2, [pc, #40]	; (80062d0 <prvHeapInit+0xb8>)
 80062a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	4a09      	ldr	r2, [pc, #36]	; (80062d4 <prvHeapInit+0xbc>)
 80062ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80062b0:	4b09      	ldr	r3, [pc, #36]	; (80062d8 <prvHeapInit+0xc0>)
 80062b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80062b6:	601a      	str	r2, [r3, #0]
}
 80062b8:	bf00      	nop
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr
 80062c4:	200002a0 	.word	0x200002a0
 80062c8:	20000e58 	.word	0x20000e58
 80062cc:	20000e60 	.word	0x20000e60
 80062d0:	20000e68 	.word	0x20000e68
 80062d4:	20000e64 	.word	0x20000e64
 80062d8:	20000e6c 	.word	0x20000e6c

080062dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062e4:	4b28      	ldr	r3, [pc, #160]	; (8006388 <prvInsertBlockIntoFreeList+0xac>)
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	e002      	b.n	80062f0 <prvInsertBlockIntoFreeList+0x14>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	60fb      	str	r3, [r7, #12]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d8f7      	bhi.n	80062ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	4413      	add	r3, r2
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	429a      	cmp	r2, r3
 800630a:	d108      	bne.n	800631e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	441a      	add	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	441a      	add	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	429a      	cmp	r2, r3
 8006330:	d118      	bne.n	8006364 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	4b15      	ldr	r3, [pc, #84]	; (800638c <prvInsertBlockIntoFreeList+0xb0>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	429a      	cmp	r2, r3
 800633c:	d00d      	beq.n	800635a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	441a      	add	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	e008      	b.n	800636c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800635a:	4b0c      	ldr	r3, [pc, #48]	; (800638c <prvInsertBlockIntoFreeList+0xb0>)
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	e003      	b.n	800636c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	429a      	cmp	r2, r3
 8006372:	d002      	beq.n	800637a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800637a:	bf00      	nop
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	20000e58 	.word	0x20000e58
 800638c:	20000e60 	.word	0x20000e60

08006390 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	4a07      	ldr	r2, [pc, #28]	; (80063bc <vApplicationGetIdleTaskMemory+0x2c>)
 80063a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	4a06      	ldr	r2, [pc, #24]	; (80063c0 <vApplicationGetIdleTaskMemory+0x30>)
 80063a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2280      	movs	r2, #128	; 0x80
 80063ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80063ae:	bf00      	nop
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	20000e70 	.word	0x20000e70
 80063c0:	20000ec4 	.word	0x20000ec4

080063c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80063c4:	b5b0      	push	{r4, r5, r7, lr}
 80063c6:	b096      	sub	sp, #88	; 0x58
 80063c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80063ca:	f7fb f949 	bl	8001660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80063ce:	f000 f861 	bl	8006494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80063d2:	f000 f949 	bl	8006668 <MX_GPIO_Init>
  MX_I2C2_Init();
 80063d6:	f000 f8d7 	bl	8006588 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80063da:	f000 f915 	bl	8006608 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_TSENSOR_Init();
 80063de:	f7fa fba5 	bl	8000b2c <BSP_TSENSOR_Init>
  BSP_HSENSOR_Init();
 80063e2:	f7fa fae9 	bl	80009b8 <BSP_HSENSOR_Init>
  BSP_MAGNETO_Init();
 80063e6:	f7fa fb15 	bl	8000a14 <BSP_MAGNETO_Init>
  BSP_MAGNETO_LowPower(1);
 80063ea:	2001      	movs	r0, #1
 80063ec:	f7fa fb3e 	bl	8000a6c <BSP_MAGNETO_LowPower>
  BSP_ACCELERO_Init();
 80063f0:	f7fa fa16 	bl	8000820 <BSP_ACCELERO_Init>
  BSP_ACCELERO_LowPower(1);
 80063f4:	2001      	movs	r0, #1
 80063f6:	f7fa fa51 	bl	800089c <BSP_ACCELERO_LowPower>

  BSP_PSENSOR_Init();
 80063fa:	f7fa fb69 	bl	8000ad0 <BSP_PSENSOR_Init>
  BSP_GYRO_Init();
 80063fe:	f7fa fa67 	bl	80008d0 <BSP_GYRO_Init>
  BSP_GYRO_LowPower(1);
 8006402:	2001      	movs	r0, #1
 8006404:	f7fa faa6 	bl	8000954 <BSP_GYRO_LowPower>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, button_pressed_task, osPriorityNormal, 0, 128);
 8006408:	4b1c      	ldr	r3, [pc, #112]	; (800647c <main+0xb8>)
 800640a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800640e:	461d      	mov	r5, r3
 8006410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006414:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006418:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800641c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006420:	2100      	movs	r1, #0
 8006422:	4618      	mov	r0, r3
 8006424:	f7fe fdb5 	bl	8004f92 <osThreadCreate>
 8006428:	4602      	mov	r2, r0
 800642a:	4b15      	ldr	r3, [pc, #84]	; (8006480 <main+0xbc>)
 800642c:	601a      	str	r2, [r3, #0]

  /* definition and creation of TransmitTask */
  osThreadDef(TransmitTask, transmit_task, osPriorityIdle, 0, 128);
 800642e:	4b15      	ldr	r3, [pc, #84]	; (8006484 <main+0xc0>)
 8006430:	f107 0420 	add.w	r4, r7, #32
 8006434:	461d      	mov	r5, r3
 8006436:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800643a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800643e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TransmitTaskHandle = osThreadCreate(osThread(TransmitTask), NULL);
 8006442:	f107 0320 	add.w	r3, r7, #32
 8006446:	2100      	movs	r1, #0
 8006448:	4618      	mov	r0, r3
 800644a:	f7fe fda2 	bl	8004f92 <osThreadCreate>
 800644e:	4602      	mov	r2, r0
 8006450:	4b0d      	ldr	r3, [pc, #52]	; (8006488 <main+0xc4>)
 8006452:	601a      	str	r2, [r3, #0]

  /* definition and creation of ReadTask */
  osThreadDef(ReadTask, Read_Sensor, osPriorityIdle, 0, 256);
 8006454:	4b0d      	ldr	r3, [pc, #52]	; (800648c <main+0xc8>)
 8006456:	1d3c      	adds	r4, r7, #4
 8006458:	461d      	mov	r5, r3
 800645a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800645c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800645e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006462:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadTaskHandle = osThreadCreate(osThread(ReadTask), NULL);
 8006466:	1d3b      	adds	r3, r7, #4
 8006468:	2100      	movs	r1, #0
 800646a:	4618      	mov	r0, r3
 800646c:	f7fe fd91 	bl	8004f92 <osThreadCreate>
 8006470:	4602      	mov	r2, r0
 8006472:	4b07      	ldr	r3, [pc, #28]	; (8006490 <main+0xcc>)
 8006474:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8006476:	f7fe fd85 	bl	8004f84 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800647a:	e7fe      	b.n	800647a <main+0xb6>
 800647c:	08007678 	.word	0x08007678
 8006480:	20001208 	.word	0x20001208
 8006484:	080076a4 	.word	0x080076a4
 8006488:	200012dc 	.word	0x200012dc
 800648c:	080076cc 	.word	0x080076cc
 8006490:	200012d8 	.word	0x200012d8

08006494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b0b8      	sub	sp, #224	; 0xe0
 8006498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800649a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800649e:	2244      	movs	r2, #68	; 0x44
 80064a0:	2100      	movs	r1, #0
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 fcbd 	bl	8006e22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80064a8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80064ac:	2200      	movs	r2, #0
 80064ae:	601a      	str	r2, [r3, #0]
 80064b0:	605a      	str	r2, [r3, #4]
 80064b2:	609a      	str	r2, [r3, #8]
 80064b4:	60da      	str	r2, [r3, #12]
 80064b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80064b8:	463b      	mov	r3, r7
 80064ba:	2288      	movs	r2, #136	; 0x88
 80064bc:	2100      	movs	r1, #0
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 fcaf 	bl	8006e22 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80064c4:	2310      	movs	r3, #16
 80064c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80064ca:	2301      	movs	r3, #1
 80064cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80064d0:	2300      	movs	r3, #0
 80064d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80064d6:	2360      	movs	r3, #96	; 0x60
 80064d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80064dc:	2302      	movs	r3, #2
 80064de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80064e2:	2301      	movs	r3, #1
 80064e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80064e8:	2301      	movs	r3, #1
 80064ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80064ee:	2328      	movs	r3, #40	; 0x28
 80064f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80064f4:	2307      	movs	r3, #7
 80064f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80064fa:	2302      	movs	r3, #2
 80064fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006500:	2302      	movs	r3, #2
 8006502:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006506:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800650a:	4618      	mov	r0, r3
 800650c:	f7fc fab6 	bl	8002a7c <HAL_RCC_OscConfig>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8006516:	f000 fa5f 	bl	80069d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800651a:	230f      	movs	r3, #15
 800651c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006520:	2303      	movs	r3, #3
 8006522:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006526:	2300      	movs	r3, #0
 8006528:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800652c:	2300      	movs	r3, #0
 800652e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006532:	2300      	movs	r3, #0
 8006534:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006538:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800653c:	2104      	movs	r1, #4
 800653e:	4618      	mov	r0, r3
 8006540:	f7fc fe82 	bl	8003248 <HAL_RCC_ClockConfig>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800654a:	f000 fa45 	bl	80069d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2;
 800654e:	2381      	movs	r3, #129	; 0x81
 8006550:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006552:	2300      	movs	r3, #0
 8006554:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006556:	2300      	movs	r3, #0
 8006558:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800655a:	463b      	mov	r3, r7
 800655c:	4618      	mov	r0, r3
 800655e:	f7fd f8a9 	bl	80036b4 <HAL_RCCEx_PeriphCLKConfig>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d001      	beq.n	800656c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8006568:	f000 fa36 	bl	80069d8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800656c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006570:	f7fc fa2e 	bl	80029d0 <HAL_PWREx_ControlVoltageScaling>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800657a:	f000 fa2d 	bl	80069d8 <Error_Handler>
  }
}
 800657e:	bf00      	nop
 8006580:	37e0      	adds	r7, #224	; 0xe0
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
	...

08006588 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800658c:	4b1b      	ldr	r3, [pc, #108]	; (80065fc <MX_I2C2_Init+0x74>)
 800658e:	4a1c      	ldr	r2, [pc, #112]	; (8006600 <MX_I2C2_Init+0x78>)
 8006590:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8006592:	4b1a      	ldr	r3, [pc, #104]	; (80065fc <MX_I2C2_Init+0x74>)
 8006594:	4a1b      	ldr	r2, [pc, #108]	; (8006604 <MX_I2C2_Init+0x7c>)
 8006596:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006598:	4b18      	ldr	r3, [pc, #96]	; (80065fc <MX_I2C2_Init+0x74>)
 800659a:	2200      	movs	r2, #0
 800659c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800659e:	4b17      	ldr	r3, [pc, #92]	; (80065fc <MX_I2C2_Init+0x74>)
 80065a0:	2201      	movs	r2, #1
 80065a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80065a4:	4b15      	ldr	r3, [pc, #84]	; (80065fc <MX_I2C2_Init+0x74>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80065aa:	4b14      	ldr	r3, [pc, #80]	; (80065fc <MX_I2C2_Init+0x74>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80065b0:	4b12      	ldr	r3, [pc, #72]	; (80065fc <MX_I2C2_Init+0x74>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80065b6:	4b11      	ldr	r3, [pc, #68]	; (80065fc <MX_I2C2_Init+0x74>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80065bc:	4b0f      	ldr	r3, [pc, #60]	; (80065fc <MX_I2C2_Init+0x74>)
 80065be:	2200      	movs	r2, #0
 80065c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80065c2:	480e      	ldr	r0, [pc, #56]	; (80065fc <MX_I2C2_Init+0x74>)
 80065c4:	f7fb fc55 	bl	8001e72 <HAL_I2C_Init>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80065ce:	f000 fa03 	bl	80069d8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80065d2:	2100      	movs	r1, #0
 80065d4:	4809      	ldr	r0, [pc, #36]	; (80065fc <MX_I2C2_Init+0x74>)
 80065d6:	f7fc f955 	bl	8002884 <HAL_I2CEx_ConfigAnalogFilter>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d001      	beq.n	80065e4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80065e0:	f000 f9fa 	bl	80069d8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80065e4:	2100      	movs	r1, #0
 80065e6:	4805      	ldr	r0, [pc, #20]	; (80065fc <MX_I2C2_Init+0x74>)
 80065e8:	f7fc f997 	bl	800291a <HAL_I2CEx_ConfigDigitalFilter>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80065f2:	f000 f9f1 	bl	80069d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80065f6:	bf00      	nop
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	2000120c 	.word	0x2000120c
 8006600:	40005800 	.word	0x40005800
 8006604:	10909cec 	.word	0x10909cec

08006608 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800660c:	4b14      	ldr	r3, [pc, #80]	; (8006660 <MX_USART1_UART_Init+0x58>)
 800660e:	4a15      	ldr	r2, [pc, #84]	; (8006664 <MX_USART1_UART_Init+0x5c>)
 8006610:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006612:	4b13      	ldr	r3, [pc, #76]	; (8006660 <MX_USART1_UART_Init+0x58>)
 8006614:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006618:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800661a:	4b11      	ldr	r3, [pc, #68]	; (8006660 <MX_USART1_UART_Init+0x58>)
 800661c:	2200      	movs	r2, #0
 800661e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006620:	4b0f      	ldr	r3, [pc, #60]	; (8006660 <MX_USART1_UART_Init+0x58>)
 8006622:	2200      	movs	r2, #0
 8006624:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006626:	4b0e      	ldr	r3, [pc, #56]	; (8006660 <MX_USART1_UART_Init+0x58>)
 8006628:	2200      	movs	r2, #0
 800662a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800662c:	4b0c      	ldr	r3, [pc, #48]	; (8006660 <MX_USART1_UART_Init+0x58>)
 800662e:	220c      	movs	r2, #12
 8006630:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006632:	4b0b      	ldr	r3, [pc, #44]	; (8006660 <MX_USART1_UART_Init+0x58>)
 8006634:	2200      	movs	r2, #0
 8006636:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006638:	4b09      	ldr	r3, [pc, #36]	; (8006660 <MX_USART1_UART_Init+0x58>)
 800663a:	2200      	movs	r2, #0
 800663c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800663e:	4b08      	ldr	r3, [pc, #32]	; (8006660 <MX_USART1_UART_Init+0x58>)
 8006640:	2200      	movs	r2, #0
 8006642:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006644:	4b06      	ldr	r3, [pc, #24]	; (8006660 <MX_USART1_UART_Init+0x58>)
 8006646:	2200      	movs	r2, #0
 8006648:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800664a:	4805      	ldr	r0, [pc, #20]	; (8006660 <MX_USART1_UART_Init+0x58>)
 800664c:	f7fd ffb4 	bl	80045b8 <HAL_UART_Init>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8006656:	f000 f9bf 	bl	80069d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800665a:	bf00      	nop
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	20001258 	.word	0x20001258
 8006664:	40013800 	.word	0x40013800

08006668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b088      	sub	sp, #32
 800666c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800666e:	f107 030c 	add.w	r3, r7, #12
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]
 8006676:	605a      	str	r2, [r3, #4]
 8006678:	609a      	str	r2, [r3, #8]
 800667a:	60da      	str	r2, [r3, #12]
 800667c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800667e:	4b23      	ldr	r3, [pc, #140]	; (800670c <MX_GPIO_Init+0xa4>)
 8006680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006682:	4a22      	ldr	r2, [pc, #136]	; (800670c <MX_GPIO_Init+0xa4>)
 8006684:	f043 0304 	orr.w	r3, r3, #4
 8006688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800668a:	4b20      	ldr	r3, [pc, #128]	; (800670c <MX_GPIO_Init+0xa4>)
 800668c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800668e:	f003 0304 	and.w	r3, r3, #4
 8006692:	60bb      	str	r3, [r7, #8]
 8006694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006696:	4b1d      	ldr	r3, [pc, #116]	; (800670c <MX_GPIO_Init+0xa4>)
 8006698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800669a:	4a1c      	ldr	r2, [pc, #112]	; (800670c <MX_GPIO_Init+0xa4>)
 800669c:	f043 0302 	orr.w	r3, r3, #2
 80066a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066a2:	4b1a      	ldr	r3, [pc, #104]	; (800670c <MX_GPIO_Init+0xa4>)
 80066a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	607b      	str	r3, [r7, #4]
 80066ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80066ae:	2200      	movs	r2, #0
 80066b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80066b4:	4816      	ldr	r0, [pc, #88]	; (8006710 <MX_GPIO_Init+0xa8>)
 80066b6:	f7fb fba1 	bl	8001dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80066ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80066be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80066c0:	4b14      	ldr	r3, [pc, #80]	; (8006714 <MX_GPIO_Init+0xac>)
 80066c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066c4:	2300      	movs	r3, #0
 80066c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066c8:	f107 030c 	add.w	r3, r7, #12
 80066cc:	4619      	mov	r1, r3
 80066ce:	4812      	ldr	r0, [pc, #72]	; (8006718 <MX_GPIO_Init+0xb0>)
 80066d0:	f7fb f8e0 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80066d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80066d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066da:	2301      	movs	r3, #1
 80066dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066de:	2300      	movs	r3, #0
 80066e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066e2:	2300      	movs	r3, #0
 80066e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80066e6:	f107 030c 	add.w	r3, r7, #12
 80066ea:	4619      	mov	r1, r3
 80066ec:	4808      	ldr	r0, [pc, #32]	; (8006710 <MX_GPIO_Init+0xa8>)
 80066ee:	f7fb f8d1 	bl	8001894 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80066f2:	2200      	movs	r2, #0
 80066f4:	2100      	movs	r1, #0
 80066f6:	2028      	movs	r0, #40	; 0x28
 80066f8:	f7fb f8a2 	bl	8001840 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80066fc:	2028      	movs	r0, #40	; 0x28
 80066fe:	f7fb f8bb 	bl	8001878 <HAL_NVIC_EnableIRQ>

}
 8006702:	bf00      	nop
 8006704:	3720      	adds	r7, #32
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	40021000 	.word	0x40021000
 8006710:	48000400 	.word	0x48000400
 8006714:	10110000 	.word	0x10110000
 8006718:	48000800 	.word	0x48000800

0800671c <button_pressed_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_button_pressed_task */
void button_pressed_task(void const * argument)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	for(;;){
		osDelay(200);
 8006724:	20c8      	movs	r0, #200	; 0xc8
 8006726:	f7fe fc80 	bl	800502a <osDelay>
		if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 800672a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800672e:	4809      	ldr	r0, [pc, #36]	; (8006754 <button_pressed_task+0x38>)
 8006730:	f7fb fb4c 	bl	8001dcc <HAL_GPIO_ReadPin>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1f4      	bne.n	8006724 <button_pressed_task+0x8>
			sensorType++;
 800673a:	4b07      	ldr	r3, [pc, #28]	; (8006758 <button_pressed_task+0x3c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3301      	adds	r3, #1
 8006740:	4a05      	ldr	r2, [pc, #20]	; (8006758 <button_pressed_task+0x3c>)
 8006742:	6013      	str	r3, [r2, #0]
			if(sensorType == 4){
 8006744:	4b04      	ldr	r3, [pc, #16]	; (8006758 <button_pressed_task+0x3c>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b04      	cmp	r3, #4
 800674a:	d1eb      	bne.n	8006724 <button_pressed_task+0x8>
				sensorType = 0;
 800674c:	4b02      	ldr	r3, [pc, #8]	; (8006758 <button_pressed_task+0x3c>)
 800674e:	2200      	movs	r2, #0
 8006750:	601a      	str	r2, [r3, #0]
		osDelay(200);
 8006752:	e7e7      	b.n	8006724 <button_pressed_task+0x8>
 8006754:	48000800 	.word	0x48000800
 8006758:	200010c4 	.word	0x200010c4

0800675c <transmit_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit_task */
void transmit_task(void const * argument)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN transmit_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8006764:	2064      	movs	r0, #100	; 0x64
 8006766:	f7fe fc60 	bl	800502a <osDelay>
    HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 800676a:	4806      	ldr	r0, [pc, #24]	; (8006784 <transmit_task+0x28>)
 800676c:	f7f9 fd30 	bl	80001d0 <strlen>
 8006770:	4603      	mov	r3, r0
 8006772:	b29a      	uxth	r2, r3
 8006774:	f247 5330 	movw	r3, #30000	; 0x7530
 8006778:	4902      	ldr	r1, [pc, #8]	; (8006784 <transmit_task+0x28>)
 800677a:	4803      	ldr	r0, [pc, #12]	; (8006788 <transmit_task+0x2c>)
 800677c:	f7fd ff6a 	bl	8004654 <HAL_UART_Transmit>
    osDelay(100);
 8006780:	e7f0      	b.n	8006764 <transmit_task+0x8>
 8006782:	bf00      	nop
 8006784:	200010c8 	.word	0x200010c8
 8006788:	20001258 	.word	0x20001258

0800678c <Read_Sensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Read_Sensor */
void Read_Sensor(void const * argument)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b0c8      	sub	sp, #288	; 0x120
 8006790:	af00      	add	r7, sp, #0
 8006792:	1d3b      	adds	r3, r7, #4
 8006794:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Read_Sensor */
	float temperature = 0;
 8006796:	f04f 0300 	mov.w	r3, #0
 800679a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	float humidity = 0;
 800679e:	f04f 0300 	mov.w	r3, #0
 80067a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	int16_t magnetic[3] = {0};
 80067a6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80067aa:	2200      	movs	r2, #0
 80067ac:	601a      	str	r2, [r3, #0]
 80067ae:	809a      	strh	r2, [r3, #4]
	float gyro[3] = {0};
 80067b0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80067b4:	2200      	movs	r2, #0
 80067b6:	601a      	str	r2, [r3, #0]
 80067b8:	605a      	str	r2, [r3, #4]
 80067ba:	609a      	str	r2, [r3, #8]
	int16_t accelerator[3] = {0};
 80067bc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80067c0:	2200      	movs	r2, #0
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	809a      	strh	r2, [r3, #4]

	float pressure = 0;
 80067c6:	f04f 0300 	mov.w	r3, #0
 80067ca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	char pBuff[20];
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80067ce:	2064      	movs	r0, #100	; 0x64
 80067d0:	f7fe fc2b 	bl	800502a <osDelay>
    //Display
	if(sensorType == 0){
 80067d4:	4b6d      	ldr	r3, [pc, #436]	; (800698c <Read_Sensor+0x200>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d121      	bne.n	8006820 <Read_Sensor+0x94>
		temperature = BSP_TSENSOR_Readtemperature();
		sprintf(tBuff, "Measured temperature is: %d   ", (int16_t) temperature);
		memset(buffer, 0, strlen(buffer));
		strcat(buffer, tBuff);
		*/
		humidity = BSP_HSENSOR_ReadHumidity();
 80067dc:	f7fa f90c 	bl	80009f8 <BSP_HSENSOR_ReadHumidity>
 80067e0:	ed87 0a46 	vstr	s0, [r7, #280]	; 0x118
		sprintf(tBuff, "The measured humidity: %d \n", (int16_t) humidity);
 80067e4:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 80067e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067ec:	ee17 3a90 	vmov	r3, s15
 80067f0:	b21b      	sxth	r3, r3
 80067f2:	461a      	mov	r2, r3
 80067f4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80067f8:	4965      	ldr	r1, [pc, #404]	; (8006990 <Read_Sensor+0x204>)
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 fb1a 	bl	8006e34 <siprintf>
		//initialize buffer
		memset(buffer, 0, strlen(buffer));
 8006800:	4864      	ldr	r0, [pc, #400]	; (8006994 <Read_Sensor+0x208>)
 8006802:	f7f9 fce5 	bl	80001d0 <strlen>
 8006806:	4603      	mov	r3, r0
 8006808:	461a      	mov	r2, r3
 800680a:	2100      	movs	r1, #0
 800680c:	4861      	ldr	r0, [pc, #388]	; (8006994 <Read_Sensor+0x208>)
 800680e:	f000 fb08 	bl	8006e22 <memset>
		//store each character to buffer
		strcat(buffer, tBuff);
 8006812:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006816:	4619      	mov	r1, r3
 8006818:	485e      	ldr	r0, [pc, #376]	; (8006994 <Read_Sensor+0x208>)
 800681a:	f000 fb2b 	bl	8006e74 <strcat>
 800681e:	e7d6      	b.n	80067ce <Read_Sensor+0x42>
	}
	else if(sensorType == 1){
 8006820:	4b5a      	ldr	r3, [pc, #360]	; (800698c <Read_Sensor+0x200>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d13b      	bne.n	80068a0 <Read_Sensor+0x114>
		BSP_MAGNETO_GetXYZ(magnetic);
 8006828:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800682c:	4618      	mov	r0, r3
 800682e:	f7fa f937 	bl	8000aa0 <BSP_MAGNETO_GetXYZ>
		sprintf(MxBuff, "Magn X is:%d ", magnetic[0]);
 8006832:	f9b7 310c 	ldrsh.w	r3, [r7, #268]	; 0x10c
 8006836:	461a      	mov	r2, r3
 8006838:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800683c:	4956      	ldr	r1, [pc, #344]	; (8006998 <Read_Sensor+0x20c>)
 800683e:	4618      	mov	r0, r3
 8006840:	f000 faf8 	bl	8006e34 <siprintf>
		sprintf(MyBuff, "Magn Y is:%d ", magnetic[1]);
 8006844:	f9b7 310e 	ldrsh.w	r3, [r7, #270]	; 0x10e
 8006848:	461a      	mov	r2, r3
 800684a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800684e:	4953      	ldr	r1, [pc, #332]	; (800699c <Read_Sensor+0x210>)
 8006850:	4618      	mov	r0, r3
 8006852:	f000 faef 	bl	8006e34 <siprintf>
		sprintf(MzBuff, "Magn Z is:%d \n", magnetic[2]);
 8006856:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
 800685a:	461a      	mov	r2, r3
 800685c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006860:	494f      	ldr	r1, [pc, #316]	; (80069a0 <Read_Sensor+0x214>)
 8006862:	4618      	mov	r0, r3
 8006864:	f000 fae6 	bl	8006e34 <siprintf>
		//initialize buffer
		memset(buffer, 0, strlen(buffer));
 8006868:	484a      	ldr	r0, [pc, #296]	; (8006994 <Read_Sensor+0x208>)
 800686a:	f7f9 fcb1 	bl	80001d0 <strlen>
 800686e:	4603      	mov	r3, r0
 8006870:	461a      	mov	r2, r3
 8006872:	2100      	movs	r1, #0
 8006874:	4847      	ldr	r0, [pc, #284]	; (8006994 <Read_Sensor+0x208>)
 8006876:	f000 fad4 	bl	8006e22 <memset>
		//store each character to buffer
		strcat(buffer, MxBuff);
 800687a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800687e:	4619      	mov	r1, r3
 8006880:	4844      	ldr	r0, [pc, #272]	; (8006994 <Read_Sensor+0x208>)
 8006882:	f000 faf7 	bl	8006e74 <strcat>
		strcat(buffer, MyBuff);
 8006886:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800688a:	4619      	mov	r1, r3
 800688c:	4841      	ldr	r0, [pc, #260]	; (8006994 <Read_Sensor+0x208>)
 800688e:	f000 faf1 	bl	8006e74 <strcat>
		strcat(buffer, MzBuff);
 8006892:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006896:	4619      	mov	r1, r3
 8006898:	483e      	ldr	r0, [pc, #248]	; (8006994 <Read_Sensor+0x208>)
 800689a:	f000 faeb 	bl	8006e74 <strcat>
 800689e:	e796      	b.n	80067ce <Read_Sensor+0x42>
	}
	else if(sensorType == 2){
 80068a0:	4b3a      	ldr	r3, [pc, #232]	; (800698c <Read_Sensor+0x200>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d14a      	bne.n	800693e <Read_Sensor+0x1b2>
		memset(buffer, 0, strlen(buffer));
		strcat(buffer, AxBuff);
		strcat(buffer, AyBuff);
		strcat(buffer, AzBuff);
		*/
		BSP_GYRO_GetXYZ(gyro);
 80068a8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7fa f86b 	bl	8000988 <BSP_GYRO_GetXYZ>
		sprintf(GxBuff, "Gyro X is:%d ", (int16_t) gyro[0]);
 80068b2:	edd7 7a40 	vldr	s15, [r7, #256]	; 0x100
 80068b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068ba:	ee17 3a90 	vmov	r3, s15
 80068be:	b21b      	sxth	r3, r3
 80068c0:	461a      	mov	r2, r3
 80068c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80068c6:	4937      	ldr	r1, [pc, #220]	; (80069a4 <Read_Sensor+0x218>)
 80068c8:	4618      	mov	r0, r3
 80068ca:	f000 fab3 	bl	8006e34 <siprintf>
		sprintf(GyBuff, "Gyro Y is:%d ", (int16_t) gyro[1]);
 80068ce:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 80068d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068d6:	ee17 3a90 	vmov	r3, s15
 80068da:	b21b      	sxth	r3, r3
 80068dc:	461a      	mov	r2, r3
 80068de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80068e2:	4931      	ldr	r1, [pc, #196]	; (80069a8 <Read_Sensor+0x21c>)
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 faa5 	bl	8006e34 <siprintf>
		sprintf(GzBuff, "Gyro Z is:%d \n", (int16_t) gyro[2]);
 80068ea:	edd7 7a42 	vldr	s15, [r7, #264]	; 0x108
 80068ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068f2:	ee17 3a90 	vmov	r3, s15
 80068f6:	b21b      	sxth	r3, r3
 80068f8:	461a      	mov	r2, r3
 80068fa:	f107 031c 	add.w	r3, r7, #28
 80068fe:	492b      	ldr	r1, [pc, #172]	; (80069ac <Read_Sensor+0x220>)
 8006900:	4618      	mov	r0, r3
 8006902:	f000 fa97 	bl	8006e34 <siprintf>
		//initialize buffer
		memset(buffer, 0, strlen(buffer));
 8006906:	4823      	ldr	r0, [pc, #140]	; (8006994 <Read_Sensor+0x208>)
 8006908:	f7f9 fc62 	bl	80001d0 <strlen>
 800690c:	4603      	mov	r3, r0
 800690e:	461a      	mov	r2, r3
 8006910:	2100      	movs	r1, #0
 8006912:	4820      	ldr	r0, [pc, #128]	; (8006994 <Read_Sensor+0x208>)
 8006914:	f000 fa85 	bl	8006e22 <memset>
		//store each character to buffer
		strcat(buffer, GxBuff);
 8006918:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800691c:	4619      	mov	r1, r3
 800691e:	481d      	ldr	r0, [pc, #116]	; (8006994 <Read_Sensor+0x208>)
 8006920:	f000 faa8 	bl	8006e74 <strcat>
		strcat(buffer, GyBuff);
 8006924:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006928:	4619      	mov	r1, r3
 800692a:	481a      	ldr	r0, [pc, #104]	; (8006994 <Read_Sensor+0x208>)
 800692c:	f000 faa2 	bl	8006e74 <strcat>
		strcat(buffer, GzBuff);
 8006930:	f107 031c 	add.w	r3, r7, #28
 8006934:	4619      	mov	r1, r3
 8006936:	4817      	ldr	r0, [pc, #92]	; (8006994 <Read_Sensor+0x208>)
 8006938:	f000 fa9c 	bl	8006e74 <strcat>
 800693c:	e747      	b.n	80067ce <Read_Sensor+0x42>
	}
	else if(sensorType == 3){
 800693e:	4b13      	ldr	r3, [pc, #76]	; (800698c <Read_Sensor+0x200>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2b03      	cmp	r3, #3
 8006944:	f47f af43 	bne.w	80067ce <Read_Sensor+0x42>
		pressure = BSP_PSENSOR_ReadPressure();
 8006948:	f7fa f8e2 	bl	8000b10 <BSP_PSENSOR_ReadPressure>
 800694c:	ed87 0a45 	vstr	s0, [r7, #276]	; 0x114
		sprintf(pBuff, "The measured pressure is: %d \n", (int16_t) pressure);
 8006950:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8006954:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006958:	ee17 3a90 	vmov	r3, s15
 800695c:	b21b      	sxth	r3, r3
 800695e:	461a      	mov	r2, r3
 8006960:	f107 0308 	add.w	r3, r7, #8
 8006964:	4912      	ldr	r1, [pc, #72]	; (80069b0 <Read_Sensor+0x224>)
 8006966:	4618      	mov	r0, r3
 8006968:	f000 fa64 	bl	8006e34 <siprintf>
		//initialize buffer
		memset(buffer, 0, strlen(buffer));
 800696c:	4809      	ldr	r0, [pc, #36]	; (8006994 <Read_Sensor+0x208>)
 800696e:	f7f9 fc2f 	bl	80001d0 <strlen>
 8006972:	4603      	mov	r3, r0
 8006974:	461a      	mov	r2, r3
 8006976:	2100      	movs	r1, #0
 8006978:	4806      	ldr	r0, [pc, #24]	; (8006994 <Read_Sensor+0x208>)
 800697a:	f000 fa52 	bl	8006e22 <memset>
		//store each character to buffer
		strcat(buffer, pBuff);
 800697e:	f107 0308 	add.w	r3, r7, #8
 8006982:	4619      	mov	r1, r3
 8006984:	4803      	ldr	r0, [pc, #12]	; (8006994 <Read_Sensor+0x208>)
 8006986:	f000 fa75 	bl	8006e74 <strcat>
    osDelay(100);
 800698a:	e720      	b.n	80067ce <Read_Sensor+0x42>
 800698c:	200010c4 	.word	0x200010c4
 8006990:	080076e8 	.word	0x080076e8
 8006994:	200010c8 	.word	0x200010c8
 8006998:	08007704 	.word	0x08007704
 800699c:	08007714 	.word	0x08007714
 80069a0:	08007724 	.word	0x08007724
 80069a4:	08007734 	.word	0x08007734
 80069a8:	08007744 	.word	0x08007744
 80069ac:	08007754 	.word	0x08007754
 80069b0:	08007764 	.word	0x08007764

080069b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a04      	ldr	r2, [pc, #16]	; (80069d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d101      	bne.n	80069ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80069c6:	f7fa fe63 	bl	8001690 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80069ca:	bf00      	nop
 80069cc:	3708      	adds	r7, #8
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	40014800 	.word	0x40014800

080069d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80069d8:	b480      	push	{r7}
 80069da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80069dc:	bf00      	nop
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
	...

080069e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069ee:	4b0f      	ldr	r3, [pc, #60]	; (8006a2c <HAL_MspInit+0x44>)
 80069f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069f2:	4a0e      	ldr	r2, [pc, #56]	; (8006a2c <HAL_MspInit+0x44>)
 80069f4:	f043 0301 	orr.w	r3, r3, #1
 80069f8:	6613      	str	r3, [r2, #96]	; 0x60
 80069fa:	4b0c      	ldr	r3, [pc, #48]	; (8006a2c <HAL_MspInit+0x44>)
 80069fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	607b      	str	r3, [r7, #4]
 8006a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a06:	4b09      	ldr	r3, [pc, #36]	; (8006a2c <HAL_MspInit+0x44>)
 8006a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a0a:	4a08      	ldr	r2, [pc, #32]	; (8006a2c <HAL_MspInit+0x44>)
 8006a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a10:	6593      	str	r3, [r2, #88]	; 0x58
 8006a12:	4b06      	ldr	r3, [pc, #24]	; (8006a2c <HAL_MspInit+0x44>)
 8006a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a1a:	603b      	str	r3, [r7, #0]
 8006a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006a1e:	bf00      	nop
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	40021000 	.word	0x40021000

08006a30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b08a      	sub	sp, #40	; 0x28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a38:	f107 0314 	add.w	r3, r7, #20
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	601a      	str	r2, [r3, #0]
 8006a40:	605a      	str	r2, [r3, #4]
 8006a42:	609a      	str	r2, [r3, #8]
 8006a44:	60da      	str	r2, [r3, #12]
 8006a46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a17      	ldr	r2, [pc, #92]	; (8006aac <HAL_I2C_MspInit+0x7c>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d128      	bne.n	8006aa4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a52:	4b17      	ldr	r3, [pc, #92]	; (8006ab0 <HAL_I2C_MspInit+0x80>)
 8006a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a56:	4a16      	ldr	r2, [pc, #88]	; (8006ab0 <HAL_I2C_MspInit+0x80>)
 8006a58:	f043 0302 	orr.w	r3, r3, #2
 8006a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a5e:	4b14      	ldr	r3, [pc, #80]	; (8006ab0 <HAL_I2C_MspInit+0x80>)
 8006a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a62:	f003 0302 	and.w	r3, r3, #2
 8006a66:	613b      	str	r3, [r7, #16]
 8006a68:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006a6a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006a70:	2312      	movs	r3, #18
 8006a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a74:	2301      	movs	r3, #1
 8006a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006a7c:	2304      	movs	r3, #4
 8006a7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a80:	f107 0314 	add.w	r3, r7, #20
 8006a84:	4619      	mov	r1, r3
 8006a86:	480b      	ldr	r0, [pc, #44]	; (8006ab4 <HAL_I2C_MspInit+0x84>)
 8006a88:	f7fa ff04 	bl	8001894 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006a8c:	4b08      	ldr	r3, [pc, #32]	; (8006ab0 <HAL_I2C_MspInit+0x80>)
 8006a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a90:	4a07      	ldr	r2, [pc, #28]	; (8006ab0 <HAL_I2C_MspInit+0x80>)
 8006a92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006a96:	6593      	str	r3, [r2, #88]	; 0x58
 8006a98:	4b05      	ldr	r3, [pc, #20]	; (8006ab0 <HAL_I2C_MspInit+0x80>)
 8006a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aa0:	60fb      	str	r3, [r7, #12]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006aa4:	bf00      	nop
 8006aa6:	3728      	adds	r7, #40	; 0x28
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	40005800 	.word	0x40005800
 8006ab0:	40021000 	.word	0x40021000
 8006ab4:	48000400 	.word	0x48000400

08006ab8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a0b      	ldr	r2, [pc, #44]	; (8006af4 <HAL_I2C_MspDeInit+0x3c>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d10f      	bne.n	8006aea <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8006aca:	4b0b      	ldr	r3, [pc, #44]	; (8006af8 <HAL_I2C_MspDeInit+0x40>)
 8006acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ace:	4a0a      	ldr	r2, [pc, #40]	; (8006af8 <HAL_I2C_MspDeInit+0x40>)
 8006ad0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006ad4:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8006ad6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ada:	4808      	ldr	r0, [pc, #32]	; (8006afc <HAL_I2C_MspDeInit+0x44>)
 8006adc:	f7fb f882 	bl	8001be4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8006ae0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006ae4:	4805      	ldr	r0, [pc, #20]	; (8006afc <HAL_I2C_MspDeInit+0x44>)
 8006ae6:	f7fb f87d 	bl	8001be4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8006aea:	bf00      	nop
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	40005800 	.word	0x40005800
 8006af8:	40021000 	.word	0x40021000
 8006afc:	48000400 	.word	0x48000400

08006b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b08a      	sub	sp, #40	; 0x28
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b08:	f107 0314 	add.w	r3, r7, #20
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	601a      	str	r2, [r3, #0]
 8006b10:	605a      	str	r2, [r3, #4]
 8006b12:	609a      	str	r2, [r3, #8]
 8006b14:	60da      	str	r2, [r3, #12]
 8006b16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a17      	ldr	r2, [pc, #92]	; (8006b7c <HAL_UART_MspInit+0x7c>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d127      	bne.n	8006b72 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006b22:	4b17      	ldr	r3, [pc, #92]	; (8006b80 <HAL_UART_MspInit+0x80>)
 8006b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b26:	4a16      	ldr	r2, [pc, #88]	; (8006b80 <HAL_UART_MspInit+0x80>)
 8006b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b2c:	6613      	str	r3, [r2, #96]	; 0x60
 8006b2e:	4b14      	ldr	r3, [pc, #80]	; (8006b80 <HAL_UART_MspInit+0x80>)
 8006b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b36:	613b      	str	r3, [r7, #16]
 8006b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b3a:	4b11      	ldr	r3, [pc, #68]	; (8006b80 <HAL_UART_MspInit+0x80>)
 8006b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b3e:	4a10      	ldr	r2, [pc, #64]	; (8006b80 <HAL_UART_MspInit+0x80>)
 8006b40:	f043 0302 	orr.w	r3, r3, #2
 8006b44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b46:	4b0e      	ldr	r3, [pc, #56]	; (8006b80 <HAL_UART_MspInit+0x80>)
 8006b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b4a:	f003 0302 	and.w	r3, r3, #2
 8006b4e:	60fb      	str	r3, [r7, #12]
 8006b50:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006b52:	23c0      	movs	r3, #192	; 0xc0
 8006b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b56:	2302      	movs	r3, #2
 8006b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006b62:	2307      	movs	r3, #7
 8006b64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b66:	f107 0314 	add.w	r3, r7, #20
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	4805      	ldr	r0, [pc, #20]	; (8006b84 <HAL_UART_MspInit+0x84>)
 8006b6e:	f7fa fe91 	bl	8001894 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006b72:	bf00      	nop
 8006b74:	3728      	adds	r7, #40	; 0x28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	40013800 	.word	0x40013800
 8006b80:	40021000 	.word	0x40021000
 8006b84:	48000400 	.word	0x48000400

08006b88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b08c      	sub	sp, #48	; 0x30
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006b90:	2300      	movs	r3, #0
 8006b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006b94:	2300      	movs	r3, #0
 8006b96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8006b98:	2200      	movs	r2, #0
 8006b9a:	6879      	ldr	r1, [r7, #4]
 8006b9c:	201a      	movs	r0, #26
 8006b9e:	f7fa fe4f 	bl	8001840 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8006ba2:	201a      	movs	r0, #26
 8006ba4:	f7fa fe68 	bl	8001878 <HAL_NVIC_EnableIRQ>
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8006ba8:	4b1e      	ldr	r3, [pc, #120]	; (8006c24 <HAL_InitTick+0x9c>)
 8006baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bac:	4a1d      	ldr	r2, [pc, #116]	; (8006c24 <HAL_InitTick+0x9c>)
 8006bae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bb2:	6613      	str	r3, [r2, #96]	; 0x60
 8006bb4:	4b1b      	ldr	r3, [pc, #108]	; (8006c24 <HAL_InitTick+0x9c>)
 8006bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bbc:	60fb      	str	r3, [r7, #12]
 8006bbe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006bc0:	f107 0210 	add.w	r2, r7, #16
 8006bc4:	f107 0314 	add.w	r3, r7, #20
 8006bc8:	4611      	mov	r1, r2
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7fc fce0 	bl	8003590 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8006bd0:	f7fc fcc8 	bl	8003564 <HAL_RCC_GetPCLK2Freq>
 8006bd4:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8006bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd8:	4a13      	ldr	r2, [pc, #76]	; (8006c28 <HAL_InitTick+0xa0>)
 8006bda:	fba2 2303 	umull	r2, r3, r2, r3
 8006bde:	0c9b      	lsrs	r3, r3, #18
 8006be0:	3b01      	subs	r3, #1
 8006be2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8006be4:	4b11      	ldr	r3, [pc, #68]	; (8006c2c <HAL_InitTick+0xa4>)
 8006be6:	4a12      	ldr	r2, [pc, #72]	; (8006c30 <HAL_InitTick+0xa8>)
 8006be8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000 / 1000) - 1;
 8006bea:	4b10      	ldr	r3, [pc, #64]	; (8006c2c <HAL_InitTick+0xa4>)
 8006bec:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006bf0:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8006bf2:	4a0e      	ldr	r2, [pc, #56]	; (8006c2c <HAL_InitTick+0xa4>)
 8006bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf6:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8006bf8:	4b0c      	ldr	r3, [pc, #48]	; (8006c2c <HAL_InitTick+0xa4>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006bfe:	4b0b      	ldr	r3, [pc, #44]	; (8006c2c <HAL_InitTick+0xa4>)
 8006c00:	2200      	movs	r2, #0
 8006c02:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8006c04:	4809      	ldr	r0, [pc, #36]	; (8006c2c <HAL_InitTick+0xa4>)
 8006c06:	f7fd fa05 	bl	8004014 <HAL_TIM_Base_Init>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d104      	bne.n	8006c1a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8006c10:	4806      	ldr	r0, [pc, #24]	; (8006c2c <HAL_InitTick+0xa4>)
 8006c12:	f7fd fa61 	bl	80040d8 <HAL_TIM_Base_Start_IT>
 8006c16:	4603      	mov	r3, r0
 8006c18:	e000      	b.n	8006c1c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3730      	adds	r7, #48	; 0x30
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	40021000 	.word	0x40021000
 8006c28:	431bde83 	.word	0x431bde83
 8006c2c:	200012e0 	.word	0x200012e0
 8006c30:	40014800 	.word	0x40014800

08006c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006c34:	b480      	push	{r7}
 8006c36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006c38:	bf00      	nop
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006c42:	b480      	push	{r7}
 8006c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006c46:	e7fe      	b.n	8006c46 <HardFault_Handler+0x4>

08006c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006c4c:	e7fe      	b.n	8006c4c <MemManage_Handler+0x4>

08006c4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006c52:	e7fe      	b.n	8006c52 <BusFault_Handler+0x4>

08006c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006c54:	b480      	push	{r7}
 8006c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006c58:	e7fe      	b.n	8006c58 <UsageFault_Handler+0x4>

08006c5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006c5e:	bf00      	nop
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8006c6c:	4802      	ldr	r0, [pc, #8]	; (8006c78 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8006c6e:	f7fd faa3 	bl	80041b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8006c72:	bf00      	nop
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	200012e0 	.word	0x200012e0

08006c7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8006c80:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006c84:	f7fb f8d2 	bl	8001e2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006c88:	bf00      	nop
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006c94:	4a14      	ldr	r2, [pc, #80]	; (8006ce8 <_sbrk+0x5c>)
 8006c96:	4b15      	ldr	r3, [pc, #84]	; (8006cec <_sbrk+0x60>)
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006ca0:	4b13      	ldr	r3, [pc, #76]	; (8006cf0 <_sbrk+0x64>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d102      	bne.n	8006cae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006ca8:	4b11      	ldr	r3, [pc, #68]	; (8006cf0 <_sbrk+0x64>)
 8006caa:	4a12      	ldr	r2, [pc, #72]	; (8006cf4 <_sbrk+0x68>)
 8006cac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006cae:	4b10      	ldr	r3, [pc, #64]	; (8006cf0 <_sbrk+0x64>)
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d207      	bcs.n	8006ccc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006cbc:	f000 f87c 	bl	8006db8 <__errno>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	230c      	movs	r3, #12
 8006cc4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8006cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cca:	e009      	b.n	8006ce0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006ccc:	4b08      	ldr	r3, [pc, #32]	; (8006cf0 <_sbrk+0x64>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006cd2:	4b07      	ldr	r3, [pc, #28]	; (8006cf0 <_sbrk+0x64>)
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4413      	add	r3, r2
 8006cda:	4a05      	ldr	r2, [pc, #20]	; (8006cf0 <_sbrk+0x64>)
 8006cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006cde:	68fb      	ldr	r3, [r7, #12]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3718      	adds	r7, #24
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	20018000 	.word	0x20018000
 8006cec:	00000400 	.word	0x00000400
 8006cf0:	2000112c 	.word	0x2000112c
 8006cf4:	20001330 	.word	0x20001330

08006cf8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006cfc:	4b17      	ldr	r3, [pc, #92]	; (8006d5c <SystemInit+0x64>)
 8006cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d02:	4a16      	ldr	r2, [pc, #88]	; (8006d5c <SystemInit+0x64>)
 8006d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006d0c:	4b14      	ldr	r3, [pc, #80]	; (8006d60 <SystemInit+0x68>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a13      	ldr	r2, [pc, #76]	; (8006d60 <SystemInit+0x68>)
 8006d12:	f043 0301 	orr.w	r3, r3, #1
 8006d16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8006d18:	4b11      	ldr	r3, [pc, #68]	; (8006d60 <SystemInit+0x68>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8006d1e:	4b10      	ldr	r3, [pc, #64]	; (8006d60 <SystemInit+0x68>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a0f      	ldr	r2, [pc, #60]	; (8006d60 <SystemInit+0x68>)
 8006d24:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8006d28:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8006d2c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8006d2e:	4b0c      	ldr	r3, [pc, #48]	; (8006d60 <SystemInit+0x68>)
 8006d30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d34:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006d36:	4b0a      	ldr	r3, [pc, #40]	; (8006d60 <SystemInit+0x68>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a09      	ldr	r2, [pc, #36]	; (8006d60 <SystemInit+0x68>)
 8006d3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d40:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8006d42:	4b07      	ldr	r3, [pc, #28]	; (8006d60 <SystemInit+0x68>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006d48:	4b04      	ldr	r3, [pc, #16]	; (8006d5c <SystemInit+0x64>)
 8006d4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006d4e:	609a      	str	r2, [r3, #8]
#endif
}
 8006d50:	bf00      	nop
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	e000ed00 	.word	0xe000ed00
 8006d60:	40021000 	.word	0x40021000

08006d64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006d9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006d68:	f7ff ffc6 	bl	8006cf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006d6c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006d6e:	e003      	b.n	8006d78 <LoopCopyDataInit>

08006d70 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006d70:	4b0b      	ldr	r3, [pc, #44]	; (8006da0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006d72:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006d74:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006d76:	3104      	adds	r1, #4

08006d78 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006d78:	480a      	ldr	r0, [pc, #40]	; (8006da4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006d7a:	4b0b      	ldr	r3, [pc, #44]	; (8006da8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006d7c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006d7e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006d80:	d3f6      	bcc.n	8006d70 <CopyDataInit>
	ldr	r2, =_sbss
 8006d82:	4a0a      	ldr	r2, [pc, #40]	; (8006dac <LoopForever+0x12>)
	b	LoopFillZerobss
 8006d84:	e002      	b.n	8006d8c <LoopFillZerobss>

08006d86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006d86:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006d88:	f842 3b04 	str.w	r3, [r2], #4

08006d8c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006d8c:	4b08      	ldr	r3, [pc, #32]	; (8006db0 <LoopForever+0x16>)
	cmp	r2, r3
 8006d8e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006d90:	d3f9      	bcc.n	8006d86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006d92:	f000 f817 	bl	8006dc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006d96:	f7ff fb15 	bl	80063c4 <main>

08006d9a <LoopForever>:

LoopForever:
    b LoopForever
 8006d9a:	e7fe      	b.n	8006d9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006d9c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8006da0:	08007810 	.word	0x08007810
	ldr	r0, =_sdata
 8006da4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006da8:	20000138 	.word	0x20000138
	ldr	r2, =_sbss
 8006dac:	20000138 	.word	0x20000138
	ldr	r3, = _ebss
 8006db0:	20001330 	.word	0x20001330

08006db4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006db4:	e7fe      	b.n	8006db4 <ADC1_2_IRQHandler>
	...

08006db8 <__errno>:
 8006db8:	4b01      	ldr	r3, [pc, #4]	; (8006dc0 <__errno+0x8>)
 8006dba:	6818      	ldr	r0, [r3, #0]
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	200000d4 	.word	0x200000d4

08006dc4 <__libc_init_array>:
 8006dc4:	b570      	push	{r4, r5, r6, lr}
 8006dc6:	4e0d      	ldr	r6, [pc, #52]	; (8006dfc <__libc_init_array+0x38>)
 8006dc8:	4c0d      	ldr	r4, [pc, #52]	; (8006e00 <__libc_init_array+0x3c>)
 8006dca:	1ba4      	subs	r4, r4, r6
 8006dcc:	10a4      	asrs	r4, r4, #2
 8006dce:	2500      	movs	r5, #0
 8006dd0:	42a5      	cmp	r5, r4
 8006dd2:	d109      	bne.n	8006de8 <__libc_init_array+0x24>
 8006dd4:	4e0b      	ldr	r6, [pc, #44]	; (8006e04 <__libc_init_array+0x40>)
 8006dd6:	4c0c      	ldr	r4, [pc, #48]	; (8006e08 <__libc_init_array+0x44>)
 8006dd8:	f000 fc38 	bl	800764c <_init>
 8006ddc:	1ba4      	subs	r4, r4, r6
 8006dde:	10a4      	asrs	r4, r4, #2
 8006de0:	2500      	movs	r5, #0
 8006de2:	42a5      	cmp	r5, r4
 8006de4:	d105      	bne.n	8006df2 <__libc_init_array+0x2e>
 8006de6:	bd70      	pop	{r4, r5, r6, pc}
 8006de8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006dec:	4798      	blx	r3
 8006dee:	3501      	adds	r5, #1
 8006df0:	e7ee      	b.n	8006dd0 <__libc_init_array+0xc>
 8006df2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006df6:	4798      	blx	r3
 8006df8:	3501      	adds	r5, #1
 8006dfa:	e7f2      	b.n	8006de2 <__libc_init_array+0x1e>
 8006dfc:	08007808 	.word	0x08007808
 8006e00:	08007808 	.word	0x08007808
 8006e04:	08007808 	.word	0x08007808
 8006e08:	0800780c 	.word	0x0800780c

08006e0c <memcpy>:
 8006e0c:	b510      	push	{r4, lr}
 8006e0e:	1e43      	subs	r3, r0, #1
 8006e10:	440a      	add	r2, r1
 8006e12:	4291      	cmp	r1, r2
 8006e14:	d100      	bne.n	8006e18 <memcpy+0xc>
 8006e16:	bd10      	pop	{r4, pc}
 8006e18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e20:	e7f7      	b.n	8006e12 <memcpy+0x6>

08006e22 <memset>:
 8006e22:	4402      	add	r2, r0
 8006e24:	4603      	mov	r3, r0
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d100      	bne.n	8006e2c <memset+0xa>
 8006e2a:	4770      	bx	lr
 8006e2c:	f803 1b01 	strb.w	r1, [r3], #1
 8006e30:	e7f9      	b.n	8006e26 <memset+0x4>
	...

08006e34 <siprintf>:
 8006e34:	b40e      	push	{r1, r2, r3}
 8006e36:	b500      	push	{lr}
 8006e38:	b09c      	sub	sp, #112	; 0x70
 8006e3a:	ab1d      	add	r3, sp, #116	; 0x74
 8006e3c:	9002      	str	r0, [sp, #8]
 8006e3e:	9006      	str	r0, [sp, #24]
 8006e40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e44:	4809      	ldr	r0, [pc, #36]	; (8006e6c <siprintf+0x38>)
 8006e46:	9107      	str	r1, [sp, #28]
 8006e48:	9104      	str	r1, [sp, #16]
 8006e4a:	4909      	ldr	r1, [pc, #36]	; (8006e70 <siprintf+0x3c>)
 8006e4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e50:	9105      	str	r1, [sp, #20]
 8006e52:	6800      	ldr	r0, [r0, #0]
 8006e54:	9301      	str	r3, [sp, #4]
 8006e56:	a902      	add	r1, sp, #8
 8006e58:	f000 f876 	bl	8006f48 <_svfiprintf_r>
 8006e5c:	9b02      	ldr	r3, [sp, #8]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	701a      	strb	r2, [r3, #0]
 8006e62:	b01c      	add	sp, #112	; 0x70
 8006e64:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e68:	b003      	add	sp, #12
 8006e6a:	4770      	bx	lr
 8006e6c:	200000d4 	.word	0x200000d4
 8006e70:	ffff0208 	.word	0xffff0208

08006e74 <strcat>:
 8006e74:	b510      	push	{r4, lr}
 8006e76:	4603      	mov	r3, r0
 8006e78:	781a      	ldrb	r2, [r3, #0]
 8006e7a:	1c5c      	adds	r4, r3, #1
 8006e7c:	b93a      	cbnz	r2, 8006e8e <strcat+0x1a>
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e84:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e88:	2a00      	cmp	r2, #0
 8006e8a:	d1f9      	bne.n	8006e80 <strcat+0xc>
 8006e8c:	bd10      	pop	{r4, pc}
 8006e8e:	4623      	mov	r3, r4
 8006e90:	e7f2      	b.n	8006e78 <strcat+0x4>

08006e92 <__ssputs_r>:
 8006e92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e96:	688e      	ldr	r6, [r1, #8]
 8006e98:	429e      	cmp	r6, r3
 8006e9a:	4682      	mov	sl, r0
 8006e9c:	460c      	mov	r4, r1
 8006e9e:	4690      	mov	r8, r2
 8006ea0:	4699      	mov	r9, r3
 8006ea2:	d837      	bhi.n	8006f14 <__ssputs_r+0x82>
 8006ea4:	898a      	ldrh	r2, [r1, #12]
 8006ea6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006eaa:	d031      	beq.n	8006f10 <__ssputs_r+0x7e>
 8006eac:	6825      	ldr	r5, [r4, #0]
 8006eae:	6909      	ldr	r1, [r1, #16]
 8006eb0:	1a6f      	subs	r7, r5, r1
 8006eb2:	6965      	ldr	r5, [r4, #20]
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006eba:	fb95 f5f3 	sdiv	r5, r5, r3
 8006ebe:	f109 0301 	add.w	r3, r9, #1
 8006ec2:	443b      	add	r3, r7
 8006ec4:	429d      	cmp	r5, r3
 8006ec6:	bf38      	it	cc
 8006ec8:	461d      	movcc	r5, r3
 8006eca:	0553      	lsls	r3, r2, #21
 8006ecc:	d530      	bpl.n	8006f30 <__ssputs_r+0x9e>
 8006ece:	4629      	mov	r1, r5
 8006ed0:	f000 fb22 	bl	8007518 <_malloc_r>
 8006ed4:	4606      	mov	r6, r0
 8006ed6:	b950      	cbnz	r0, 8006eee <__ssputs_r+0x5c>
 8006ed8:	230c      	movs	r3, #12
 8006eda:	f8ca 3000 	str.w	r3, [sl]
 8006ede:	89a3      	ldrh	r3, [r4, #12]
 8006ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ee4:	81a3      	strh	r3, [r4, #12]
 8006ee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eee:	463a      	mov	r2, r7
 8006ef0:	6921      	ldr	r1, [r4, #16]
 8006ef2:	f7ff ff8b 	bl	8006e0c <memcpy>
 8006ef6:	89a3      	ldrh	r3, [r4, #12]
 8006ef8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f00:	81a3      	strh	r3, [r4, #12]
 8006f02:	6126      	str	r6, [r4, #16]
 8006f04:	6165      	str	r5, [r4, #20]
 8006f06:	443e      	add	r6, r7
 8006f08:	1bed      	subs	r5, r5, r7
 8006f0a:	6026      	str	r6, [r4, #0]
 8006f0c:	60a5      	str	r5, [r4, #8]
 8006f0e:	464e      	mov	r6, r9
 8006f10:	454e      	cmp	r6, r9
 8006f12:	d900      	bls.n	8006f16 <__ssputs_r+0x84>
 8006f14:	464e      	mov	r6, r9
 8006f16:	4632      	mov	r2, r6
 8006f18:	4641      	mov	r1, r8
 8006f1a:	6820      	ldr	r0, [r4, #0]
 8006f1c:	f000 fa94 	bl	8007448 <memmove>
 8006f20:	68a3      	ldr	r3, [r4, #8]
 8006f22:	1b9b      	subs	r3, r3, r6
 8006f24:	60a3      	str	r3, [r4, #8]
 8006f26:	6823      	ldr	r3, [r4, #0]
 8006f28:	441e      	add	r6, r3
 8006f2a:	6026      	str	r6, [r4, #0]
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	e7dc      	b.n	8006eea <__ssputs_r+0x58>
 8006f30:	462a      	mov	r2, r5
 8006f32:	f000 fb4b 	bl	80075cc <_realloc_r>
 8006f36:	4606      	mov	r6, r0
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	d1e2      	bne.n	8006f02 <__ssputs_r+0x70>
 8006f3c:	6921      	ldr	r1, [r4, #16]
 8006f3e:	4650      	mov	r0, sl
 8006f40:	f000 fa9c 	bl	800747c <_free_r>
 8006f44:	e7c8      	b.n	8006ed8 <__ssputs_r+0x46>
	...

08006f48 <_svfiprintf_r>:
 8006f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f4c:	461d      	mov	r5, r3
 8006f4e:	898b      	ldrh	r3, [r1, #12]
 8006f50:	061f      	lsls	r7, r3, #24
 8006f52:	b09d      	sub	sp, #116	; 0x74
 8006f54:	4680      	mov	r8, r0
 8006f56:	460c      	mov	r4, r1
 8006f58:	4616      	mov	r6, r2
 8006f5a:	d50f      	bpl.n	8006f7c <_svfiprintf_r+0x34>
 8006f5c:	690b      	ldr	r3, [r1, #16]
 8006f5e:	b96b      	cbnz	r3, 8006f7c <_svfiprintf_r+0x34>
 8006f60:	2140      	movs	r1, #64	; 0x40
 8006f62:	f000 fad9 	bl	8007518 <_malloc_r>
 8006f66:	6020      	str	r0, [r4, #0]
 8006f68:	6120      	str	r0, [r4, #16]
 8006f6a:	b928      	cbnz	r0, 8006f78 <_svfiprintf_r+0x30>
 8006f6c:	230c      	movs	r3, #12
 8006f6e:	f8c8 3000 	str.w	r3, [r8]
 8006f72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f76:	e0c8      	b.n	800710a <_svfiprintf_r+0x1c2>
 8006f78:	2340      	movs	r3, #64	; 0x40
 8006f7a:	6163      	str	r3, [r4, #20]
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f80:	2320      	movs	r3, #32
 8006f82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f86:	2330      	movs	r3, #48	; 0x30
 8006f88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f8c:	9503      	str	r5, [sp, #12]
 8006f8e:	f04f 0b01 	mov.w	fp, #1
 8006f92:	4637      	mov	r7, r6
 8006f94:	463d      	mov	r5, r7
 8006f96:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006f9a:	b10b      	cbz	r3, 8006fa0 <_svfiprintf_r+0x58>
 8006f9c:	2b25      	cmp	r3, #37	; 0x25
 8006f9e:	d13e      	bne.n	800701e <_svfiprintf_r+0xd6>
 8006fa0:	ebb7 0a06 	subs.w	sl, r7, r6
 8006fa4:	d00b      	beq.n	8006fbe <_svfiprintf_r+0x76>
 8006fa6:	4653      	mov	r3, sl
 8006fa8:	4632      	mov	r2, r6
 8006faa:	4621      	mov	r1, r4
 8006fac:	4640      	mov	r0, r8
 8006fae:	f7ff ff70 	bl	8006e92 <__ssputs_r>
 8006fb2:	3001      	adds	r0, #1
 8006fb4:	f000 80a4 	beq.w	8007100 <_svfiprintf_r+0x1b8>
 8006fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fba:	4453      	add	r3, sl
 8006fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8006fbe:	783b      	ldrb	r3, [r7, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f000 809d 	beq.w	8007100 <_svfiprintf_r+0x1b8>
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fd0:	9304      	str	r3, [sp, #16]
 8006fd2:	9307      	str	r3, [sp, #28]
 8006fd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fd8:	931a      	str	r3, [sp, #104]	; 0x68
 8006fda:	462f      	mov	r7, r5
 8006fdc:	2205      	movs	r2, #5
 8006fde:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006fe2:	4850      	ldr	r0, [pc, #320]	; (8007124 <_svfiprintf_r+0x1dc>)
 8006fe4:	f7f9 f8fc 	bl	80001e0 <memchr>
 8006fe8:	9b04      	ldr	r3, [sp, #16]
 8006fea:	b9d0      	cbnz	r0, 8007022 <_svfiprintf_r+0xda>
 8006fec:	06d9      	lsls	r1, r3, #27
 8006fee:	bf44      	itt	mi
 8006ff0:	2220      	movmi	r2, #32
 8006ff2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ff6:	071a      	lsls	r2, r3, #28
 8006ff8:	bf44      	itt	mi
 8006ffa:	222b      	movmi	r2, #43	; 0x2b
 8006ffc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007000:	782a      	ldrb	r2, [r5, #0]
 8007002:	2a2a      	cmp	r2, #42	; 0x2a
 8007004:	d015      	beq.n	8007032 <_svfiprintf_r+0xea>
 8007006:	9a07      	ldr	r2, [sp, #28]
 8007008:	462f      	mov	r7, r5
 800700a:	2000      	movs	r0, #0
 800700c:	250a      	movs	r5, #10
 800700e:	4639      	mov	r1, r7
 8007010:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007014:	3b30      	subs	r3, #48	; 0x30
 8007016:	2b09      	cmp	r3, #9
 8007018:	d94d      	bls.n	80070b6 <_svfiprintf_r+0x16e>
 800701a:	b1b8      	cbz	r0, 800704c <_svfiprintf_r+0x104>
 800701c:	e00f      	b.n	800703e <_svfiprintf_r+0xf6>
 800701e:	462f      	mov	r7, r5
 8007020:	e7b8      	b.n	8006f94 <_svfiprintf_r+0x4c>
 8007022:	4a40      	ldr	r2, [pc, #256]	; (8007124 <_svfiprintf_r+0x1dc>)
 8007024:	1a80      	subs	r0, r0, r2
 8007026:	fa0b f000 	lsl.w	r0, fp, r0
 800702a:	4318      	orrs	r0, r3
 800702c:	9004      	str	r0, [sp, #16]
 800702e:	463d      	mov	r5, r7
 8007030:	e7d3      	b.n	8006fda <_svfiprintf_r+0x92>
 8007032:	9a03      	ldr	r2, [sp, #12]
 8007034:	1d11      	adds	r1, r2, #4
 8007036:	6812      	ldr	r2, [r2, #0]
 8007038:	9103      	str	r1, [sp, #12]
 800703a:	2a00      	cmp	r2, #0
 800703c:	db01      	blt.n	8007042 <_svfiprintf_r+0xfa>
 800703e:	9207      	str	r2, [sp, #28]
 8007040:	e004      	b.n	800704c <_svfiprintf_r+0x104>
 8007042:	4252      	negs	r2, r2
 8007044:	f043 0302 	orr.w	r3, r3, #2
 8007048:	9207      	str	r2, [sp, #28]
 800704a:	9304      	str	r3, [sp, #16]
 800704c:	783b      	ldrb	r3, [r7, #0]
 800704e:	2b2e      	cmp	r3, #46	; 0x2e
 8007050:	d10c      	bne.n	800706c <_svfiprintf_r+0x124>
 8007052:	787b      	ldrb	r3, [r7, #1]
 8007054:	2b2a      	cmp	r3, #42	; 0x2a
 8007056:	d133      	bne.n	80070c0 <_svfiprintf_r+0x178>
 8007058:	9b03      	ldr	r3, [sp, #12]
 800705a:	1d1a      	adds	r2, r3, #4
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	9203      	str	r2, [sp, #12]
 8007060:	2b00      	cmp	r3, #0
 8007062:	bfb8      	it	lt
 8007064:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007068:	3702      	adds	r7, #2
 800706a:	9305      	str	r3, [sp, #20]
 800706c:	4d2e      	ldr	r5, [pc, #184]	; (8007128 <_svfiprintf_r+0x1e0>)
 800706e:	7839      	ldrb	r1, [r7, #0]
 8007070:	2203      	movs	r2, #3
 8007072:	4628      	mov	r0, r5
 8007074:	f7f9 f8b4 	bl	80001e0 <memchr>
 8007078:	b138      	cbz	r0, 800708a <_svfiprintf_r+0x142>
 800707a:	2340      	movs	r3, #64	; 0x40
 800707c:	1b40      	subs	r0, r0, r5
 800707e:	fa03 f000 	lsl.w	r0, r3, r0
 8007082:	9b04      	ldr	r3, [sp, #16]
 8007084:	4303      	orrs	r3, r0
 8007086:	3701      	adds	r7, #1
 8007088:	9304      	str	r3, [sp, #16]
 800708a:	7839      	ldrb	r1, [r7, #0]
 800708c:	4827      	ldr	r0, [pc, #156]	; (800712c <_svfiprintf_r+0x1e4>)
 800708e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007092:	2206      	movs	r2, #6
 8007094:	1c7e      	adds	r6, r7, #1
 8007096:	f7f9 f8a3 	bl	80001e0 <memchr>
 800709a:	2800      	cmp	r0, #0
 800709c:	d038      	beq.n	8007110 <_svfiprintf_r+0x1c8>
 800709e:	4b24      	ldr	r3, [pc, #144]	; (8007130 <_svfiprintf_r+0x1e8>)
 80070a0:	bb13      	cbnz	r3, 80070e8 <_svfiprintf_r+0x1a0>
 80070a2:	9b03      	ldr	r3, [sp, #12]
 80070a4:	3307      	adds	r3, #7
 80070a6:	f023 0307 	bic.w	r3, r3, #7
 80070aa:	3308      	adds	r3, #8
 80070ac:	9303      	str	r3, [sp, #12]
 80070ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b0:	444b      	add	r3, r9
 80070b2:	9309      	str	r3, [sp, #36]	; 0x24
 80070b4:	e76d      	b.n	8006f92 <_svfiprintf_r+0x4a>
 80070b6:	fb05 3202 	mla	r2, r5, r2, r3
 80070ba:	2001      	movs	r0, #1
 80070bc:	460f      	mov	r7, r1
 80070be:	e7a6      	b.n	800700e <_svfiprintf_r+0xc6>
 80070c0:	2300      	movs	r3, #0
 80070c2:	3701      	adds	r7, #1
 80070c4:	9305      	str	r3, [sp, #20]
 80070c6:	4619      	mov	r1, r3
 80070c8:	250a      	movs	r5, #10
 80070ca:	4638      	mov	r0, r7
 80070cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070d0:	3a30      	subs	r2, #48	; 0x30
 80070d2:	2a09      	cmp	r2, #9
 80070d4:	d903      	bls.n	80070de <_svfiprintf_r+0x196>
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d0c8      	beq.n	800706c <_svfiprintf_r+0x124>
 80070da:	9105      	str	r1, [sp, #20]
 80070dc:	e7c6      	b.n	800706c <_svfiprintf_r+0x124>
 80070de:	fb05 2101 	mla	r1, r5, r1, r2
 80070e2:	2301      	movs	r3, #1
 80070e4:	4607      	mov	r7, r0
 80070e6:	e7f0      	b.n	80070ca <_svfiprintf_r+0x182>
 80070e8:	ab03      	add	r3, sp, #12
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	4622      	mov	r2, r4
 80070ee:	4b11      	ldr	r3, [pc, #68]	; (8007134 <_svfiprintf_r+0x1ec>)
 80070f0:	a904      	add	r1, sp, #16
 80070f2:	4640      	mov	r0, r8
 80070f4:	f3af 8000 	nop.w
 80070f8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80070fc:	4681      	mov	r9, r0
 80070fe:	d1d6      	bne.n	80070ae <_svfiprintf_r+0x166>
 8007100:	89a3      	ldrh	r3, [r4, #12]
 8007102:	065b      	lsls	r3, r3, #25
 8007104:	f53f af35 	bmi.w	8006f72 <_svfiprintf_r+0x2a>
 8007108:	9809      	ldr	r0, [sp, #36]	; 0x24
 800710a:	b01d      	add	sp, #116	; 0x74
 800710c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007110:	ab03      	add	r3, sp, #12
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	4622      	mov	r2, r4
 8007116:	4b07      	ldr	r3, [pc, #28]	; (8007134 <_svfiprintf_r+0x1ec>)
 8007118:	a904      	add	r1, sp, #16
 800711a:	4640      	mov	r0, r8
 800711c:	f000 f882 	bl	8007224 <_printf_i>
 8007120:	e7ea      	b.n	80070f8 <_svfiprintf_r+0x1b0>
 8007122:	bf00      	nop
 8007124:	080077cc 	.word	0x080077cc
 8007128:	080077d2 	.word	0x080077d2
 800712c:	080077d6 	.word	0x080077d6
 8007130:	00000000 	.word	0x00000000
 8007134:	08006e93 	.word	0x08006e93

08007138 <_printf_common>:
 8007138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800713c:	4691      	mov	r9, r2
 800713e:	461f      	mov	r7, r3
 8007140:	688a      	ldr	r2, [r1, #8]
 8007142:	690b      	ldr	r3, [r1, #16]
 8007144:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007148:	4293      	cmp	r3, r2
 800714a:	bfb8      	it	lt
 800714c:	4613      	movlt	r3, r2
 800714e:	f8c9 3000 	str.w	r3, [r9]
 8007152:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007156:	4606      	mov	r6, r0
 8007158:	460c      	mov	r4, r1
 800715a:	b112      	cbz	r2, 8007162 <_printf_common+0x2a>
 800715c:	3301      	adds	r3, #1
 800715e:	f8c9 3000 	str.w	r3, [r9]
 8007162:	6823      	ldr	r3, [r4, #0]
 8007164:	0699      	lsls	r1, r3, #26
 8007166:	bf42      	ittt	mi
 8007168:	f8d9 3000 	ldrmi.w	r3, [r9]
 800716c:	3302      	addmi	r3, #2
 800716e:	f8c9 3000 	strmi.w	r3, [r9]
 8007172:	6825      	ldr	r5, [r4, #0]
 8007174:	f015 0506 	ands.w	r5, r5, #6
 8007178:	d107      	bne.n	800718a <_printf_common+0x52>
 800717a:	f104 0a19 	add.w	sl, r4, #25
 800717e:	68e3      	ldr	r3, [r4, #12]
 8007180:	f8d9 2000 	ldr.w	r2, [r9]
 8007184:	1a9b      	subs	r3, r3, r2
 8007186:	42ab      	cmp	r3, r5
 8007188:	dc28      	bgt.n	80071dc <_printf_common+0xa4>
 800718a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800718e:	6822      	ldr	r2, [r4, #0]
 8007190:	3300      	adds	r3, #0
 8007192:	bf18      	it	ne
 8007194:	2301      	movne	r3, #1
 8007196:	0692      	lsls	r2, r2, #26
 8007198:	d42d      	bmi.n	80071f6 <_printf_common+0xbe>
 800719a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800719e:	4639      	mov	r1, r7
 80071a0:	4630      	mov	r0, r6
 80071a2:	47c0      	blx	r8
 80071a4:	3001      	adds	r0, #1
 80071a6:	d020      	beq.n	80071ea <_printf_common+0xb2>
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	68e5      	ldr	r5, [r4, #12]
 80071ac:	f8d9 2000 	ldr.w	r2, [r9]
 80071b0:	f003 0306 	and.w	r3, r3, #6
 80071b4:	2b04      	cmp	r3, #4
 80071b6:	bf08      	it	eq
 80071b8:	1aad      	subeq	r5, r5, r2
 80071ba:	68a3      	ldr	r3, [r4, #8]
 80071bc:	6922      	ldr	r2, [r4, #16]
 80071be:	bf0c      	ite	eq
 80071c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071c4:	2500      	movne	r5, #0
 80071c6:	4293      	cmp	r3, r2
 80071c8:	bfc4      	itt	gt
 80071ca:	1a9b      	subgt	r3, r3, r2
 80071cc:	18ed      	addgt	r5, r5, r3
 80071ce:	f04f 0900 	mov.w	r9, #0
 80071d2:	341a      	adds	r4, #26
 80071d4:	454d      	cmp	r5, r9
 80071d6:	d11a      	bne.n	800720e <_printf_common+0xd6>
 80071d8:	2000      	movs	r0, #0
 80071da:	e008      	b.n	80071ee <_printf_common+0xb6>
 80071dc:	2301      	movs	r3, #1
 80071de:	4652      	mov	r2, sl
 80071e0:	4639      	mov	r1, r7
 80071e2:	4630      	mov	r0, r6
 80071e4:	47c0      	blx	r8
 80071e6:	3001      	adds	r0, #1
 80071e8:	d103      	bne.n	80071f2 <_printf_common+0xba>
 80071ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071f2:	3501      	adds	r5, #1
 80071f4:	e7c3      	b.n	800717e <_printf_common+0x46>
 80071f6:	18e1      	adds	r1, r4, r3
 80071f8:	1c5a      	adds	r2, r3, #1
 80071fa:	2030      	movs	r0, #48	; 0x30
 80071fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007200:	4422      	add	r2, r4
 8007202:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007206:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800720a:	3302      	adds	r3, #2
 800720c:	e7c5      	b.n	800719a <_printf_common+0x62>
 800720e:	2301      	movs	r3, #1
 8007210:	4622      	mov	r2, r4
 8007212:	4639      	mov	r1, r7
 8007214:	4630      	mov	r0, r6
 8007216:	47c0      	blx	r8
 8007218:	3001      	adds	r0, #1
 800721a:	d0e6      	beq.n	80071ea <_printf_common+0xb2>
 800721c:	f109 0901 	add.w	r9, r9, #1
 8007220:	e7d8      	b.n	80071d4 <_printf_common+0x9c>
	...

08007224 <_printf_i>:
 8007224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007228:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800722c:	460c      	mov	r4, r1
 800722e:	7e09      	ldrb	r1, [r1, #24]
 8007230:	b085      	sub	sp, #20
 8007232:	296e      	cmp	r1, #110	; 0x6e
 8007234:	4617      	mov	r7, r2
 8007236:	4606      	mov	r6, r0
 8007238:	4698      	mov	r8, r3
 800723a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800723c:	f000 80b3 	beq.w	80073a6 <_printf_i+0x182>
 8007240:	d822      	bhi.n	8007288 <_printf_i+0x64>
 8007242:	2963      	cmp	r1, #99	; 0x63
 8007244:	d036      	beq.n	80072b4 <_printf_i+0x90>
 8007246:	d80a      	bhi.n	800725e <_printf_i+0x3a>
 8007248:	2900      	cmp	r1, #0
 800724a:	f000 80b9 	beq.w	80073c0 <_printf_i+0x19c>
 800724e:	2958      	cmp	r1, #88	; 0x58
 8007250:	f000 8083 	beq.w	800735a <_printf_i+0x136>
 8007254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007258:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800725c:	e032      	b.n	80072c4 <_printf_i+0xa0>
 800725e:	2964      	cmp	r1, #100	; 0x64
 8007260:	d001      	beq.n	8007266 <_printf_i+0x42>
 8007262:	2969      	cmp	r1, #105	; 0x69
 8007264:	d1f6      	bne.n	8007254 <_printf_i+0x30>
 8007266:	6820      	ldr	r0, [r4, #0]
 8007268:	6813      	ldr	r3, [r2, #0]
 800726a:	0605      	lsls	r5, r0, #24
 800726c:	f103 0104 	add.w	r1, r3, #4
 8007270:	d52a      	bpl.n	80072c8 <_printf_i+0xa4>
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6011      	str	r1, [r2, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	da03      	bge.n	8007282 <_printf_i+0x5e>
 800727a:	222d      	movs	r2, #45	; 0x2d
 800727c:	425b      	negs	r3, r3
 800727e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007282:	486f      	ldr	r0, [pc, #444]	; (8007440 <_printf_i+0x21c>)
 8007284:	220a      	movs	r2, #10
 8007286:	e039      	b.n	80072fc <_printf_i+0xd8>
 8007288:	2973      	cmp	r1, #115	; 0x73
 800728a:	f000 809d 	beq.w	80073c8 <_printf_i+0x1a4>
 800728e:	d808      	bhi.n	80072a2 <_printf_i+0x7e>
 8007290:	296f      	cmp	r1, #111	; 0x6f
 8007292:	d020      	beq.n	80072d6 <_printf_i+0xb2>
 8007294:	2970      	cmp	r1, #112	; 0x70
 8007296:	d1dd      	bne.n	8007254 <_printf_i+0x30>
 8007298:	6823      	ldr	r3, [r4, #0]
 800729a:	f043 0320 	orr.w	r3, r3, #32
 800729e:	6023      	str	r3, [r4, #0]
 80072a0:	e003      	b.n	80072aa <_printf_i+0x86>
 80072a2:	2975      	cmp	r1, #117	; 0x75
 80072a4:	d017      	beq.n	80072d6 <_printf_i+0xb2>
 80072a6:	2978      	cmp	r1, #120	; 0x78
 80072a8:	d1d4      	bne.n	8007254 <_printf_i+0x30>
 80072aa:	2378      	movs	r3, #120	; 0x78
 80072ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072b0:	4864      	ldr	r0, [pc, #400]	; (8007444 <_printf_i+0x220>)
 80072b2:	e055      	b.n	8007360 <_printf_i+0x13c>
 80072b4:	6813      	ldr	r3, [r2, #0]
 80072b6:	1d19      	adds	r1, r3, #4
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	6011      	str	r1, [r2, #0]
 80072bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072c4:	2301      	movs	r3, #1
 80072c6:	e08c      	b.n	80073e2 <_printf_i+0x1be>
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	6011      	str	r1, [r2, #0]
 80072cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80072d0:	bf18      	it	ne
 80072d2:	b21b      	sxthne	r3, r3
 80072d4:	e7cf      	b.n	8007276 <_printf_i+0x52>
 80072d6:	6813      	ldr	r3, [r2, #0]
 80072d8:	6825      	ldr	r5, [r4, #0]
 80072da:	1d18      	adds	r0, r3, #4
 80072dc:	6010      	str	r0, [r2, #0]
 80072de:	0628      	lsls	r0, r5, #24
 80072e0:	d501      	bpl.n	80072e6 <_printf_i+0xc2>
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	e002      	b.n	80072ec <_printf_i+0xc8>
 80072e6:	0668      	lsls	r0, r5, #25
 80072e8:	d5fb      	bpl.n	80072e2 <_printf_i+0xbe>
 80072ea:	881b      	ldrh	r3, [r3, #0]
 80072ec:	4854      	ldr	r0, [pc, #336]	; (8007440 <_printf_i+0x21c>)
 80072ee:	296f      	cmp	r1, #111	; 0x6f
 80072f0:	bf14      	ite	ne
 80072f2:	220a      	movne	r2, #10
 80072f4:	2208      	moveq	r2, #8
 80072f6:	2100      	movs	r1, #0
 80072f8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072fc:	6865      	ldr	r5, [r4, #4]
 80072fe:	60a5      	str	r5, [r4, #8]
 8007300:	2d00      	cmp	r5, #0
 8007302:	f2c0 8095 	blt.w	8007430 <_printf_i+0x20c>
 8007306:	6821      	ldr	r1, [r4, #0]
 8007308:	f021 0104 	bic.w	r1, r1, #4
 800730c:	6021      	str	r1, [r4, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d13d      	bne.n	800738e <_printf_i+0x16a>
 8007312:	2d00      	cmp	r5, #0
 8007314:	f040 808e 	bne.w	8007434 <_printf_i+0x210>
 8007318:	4665      	mov	r5, ip
 800731a:	2a08      	cmp	r2, #8
 800731c:	d10b      	bne.n	8007336 <_printf_i+0x112>
 800731e:	6823      	ldr	r3, [r4, #0]
 8007320:	07db      	lsls	r3, r3, #31
 8007322:	d508      	bpl.n	8007336 <_printf_i+0x112>
 8007324:	6923      	ldr	r3, [r4, #16]
 8007326:	6862      	ldr	r2, [r4, #4]
 8007328:	429a      	cmp	r2, r3
 800732a:	bfde      	ittt	le
 800732c:	2330      	movle	r3, #48	; 0x30
 800732e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007332:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007336:	ebac 0305 	sub.w	r3, ip, r5
 800733a:	6123      	str	r3, [r4, #16]
 800733c:	f8cd 8000 	str.w	r8, [sp]
 8007340:	463b      	mov	r3, r7
 8007342:	aa03      	add	r2, sp, #12
 8007344:	4621      	mov	r1, r4
 8007346:	4630      	mov	r0, r6
 8007348:	f7ff fef6 	bl	8007138 <_printf_common>
 800734c:	3001      	adds	r0, #1
 800734e:	d14d      	bne.n	80073ec <_printf_i+0x1c8>
 8007350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007354:	b005      	add	sp, #20
 8007356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800735a:	4839      	ldr	r0, [pc, #228]	; (8007440 <_printf_i+0x21c>)
 800735c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007360:	6813      	ldr	r3, [r2, #0]
 8007362:	6821      	ldr	r1, [r4, #0]
 8007364:	1d1d      	adds	r5, r3, #4
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6015      	str	r5, [r2, #0]
 800736a:	060a      	lsls	r2, r1, #24
 800736c:	d50b      	bpl.n	8007386 <_printf_i+0x162>
 800736e:	07ca      	lsls	r2, r1, #31
 8007370:	bf44      	itt	mi
 8007372:	f041 0120 	orrmi.w	r1, r1, #32
 8007376:	6021      	strmi	r1, [r4, #0]
 8007378:	b91b      	cbnz	r3, 8007382 <_printf_i+0x15e>
 800737a:	6822      	ldr	r2, [r4, #0]
 800737c:	f022 0220 	bic.w	r2, r2, #32
 8007380:	6022      	str	r2, [r4, #0]
 8007382:	2210      	movs	r2, #16
 8007384:	e7b7      	b.n	80072f6 <_printf_i+0xd2>
 8007386:	064d      	lsls	r5, r1, #25
 8007388:	bf48      	it	mi
 800738a:	b29b      	uxthmi	r3, r3
 800738c:	e7ef      	b.n	800736e <_printf_i+0x14a>
 800738e:	4665      	mov	r5, ip
 8007390:	fbb3 f1f2 	udiv	r1, r3, r2
 8007394:	fb02 3311 	mls	r3, r2, r1, r3
 8007398:	5cc3      	ldrb	r3, [r0, r3]
 800739a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800739e:	460b      	mov	r3, r1
 80073a0:	2900      	cmp	r1, #0
 80073a2:	d1f5      	bne.n	8007390 <_printf_i+0x16c>
 80073a4:	e7b9      	b.n	800731a <_printf_i+0xf6>
 80073a6:	6813      	ldr	r3, [r2, #0]
 80073a8:	6825      	ldr	r5, [r4, #0]
 80073aa:	6961      	ldr	r1, [r4, #20]
 80073ac:	1d18      	adds	r0, r3, #4
 80073ae:	6010      	str	r0, [r2, #0]
 80073b0:	0628      	lsls	r0, r5, #24
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	d501      	bpl.n	80073ba <_printf_i+0x196>
 80073b6:	6019      	str	r1, [r3, #0]
 80073b8:	e002      	b.n	80073c0 <_printf_i+0x19c>
 80073ba:	066a      	lsls	r2, r5, #25
 80073bc:	d5fb      	bpl.n	80073b6 <_printf_i+0x192>
 80073be:	8019      	strh	r1, [r3, #0]
 80073c0:	2300      	movs	r3, #0
 80073c2:	6123      	str	r3, [r4, #16]
 80073c4:	4665      	mov	r5, ip
 80073c6:	e7b9      	b.n	800733c <_printf_i+0x118>
 80073c8:	6813      	ldr	r3, [r2, #0]
 80073ca:	1d19      	adds	r1, r3, #4
 80073cc:	6011      	str	r1, [r2, #0]
 80073ce:	681d      	ldr	r5, [r3, #0]
 80073d0:	6862      	ldr	r2, [r4, #4]
 80073d2:	2100      	movs	r1, #0
 80073d4:	4628      	mov	r0, r5
 80073d6:	f7f8 ff03 	bl	80001e0 <memchr>
 80073da:	b108      	cbz	r0, 80073e0 <_printf_i+0x1bc>
 80073dc:	1b40      	subs	r0, r0, r5
 80073de:	6060      	str	r0, [r4, #4]
 80073e0:	6863      	ldr	r3, [r4, #4]
 80073e2:	6123      	str	r3, [r4, #16]
 80073e4:	2300      	movs	r3, #0
 80073e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073ea:	e7a7      	b.n	800733c <_printf_i+0x118>
 80073ec:	6923      	ldr	r3, [r4, #16]
 80073ee:	462a      	mov	r2, r5
 80073f0:	4639      	mov	r1, r7
 80073f2:	4630      	mov	r0, r6
 80073f4:	47c0      	blx	r8
 80073f6:	3001      	adds	r0, #1
 80073f8:	d0aa      	beq.n	8007350 <_printf_i+0x12c>
 80073fa:	6823      	ldr	r3, [r4, #0]
 80073fc:	079b      	lsls	r3, r3, #30
 80073fe:	d413      	bmi.n	8007428 <_printf_i+0x204>
 8007400:	68e0      	ldr	r0, [r4, #12]
 8007402:	9b03      	ldr	r3, [sp, #12]
 8007404:	4298      	cmp	r0, r3
 8007406:	bfb8      	it	lt
 8007408:	4618      	movlt	r0, r3
 800740a:	e7a3      	b.n	8007354 <_printf_i+0x130>
 800740c:	2301      	movs	r3, #1
 800740e:	464a      	mov	r2, r9
 8007410:	4639      	mov	r1, r7
 8007412:	4630      	mov	r0, r6
 8007414:	47c0      	blx	r8
 8007416:	3001      	adds	r0, #1
 8007418:	d09a      	beq.n	8007350 <_printf_i+0x12c>
 800741a:	3501      	adds	r5, #1
 800741c:	68e3      	ldr	r3, [r4, #12]
 800741e:	9a03      	ldr	r2, [sp, #12]
 8007420:	1a9b      	subs	r3, r3, r2
 8007422:	42ab      	cmp	r3, r5
 8007424:	dcf2      	bgt.n	800740c <_printf_i+0x1e8>
 8007426:	e7eb      	b.n	8007400 <_printf_i+0x1dc>
 8007428:	2500      	movs	r5, #0
 800742a:	f104 0919 	add.w	r9, r4, #25
 800742e:	e7f5      	b.n	800741c <_printf_i+0x1f8>
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1ac      	bne.n	800738e <_printf_i+0x16a>
 8007434:	7803      	ldrb	r3, [r0, #0]
 8007436:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800743a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800743e:	e76c      	b.n	800731a <_printf_i+0xf6>
 8007440:	080077dd 	.word	0x080077dd
 8007444:	080077ee 	.word	0x080077ee

08007448 <memmove>:
 8007448:	4288      	cmp	r0, r1
 800744a:	b510      	push	{r4, lr}
 800744c:	eb01 0302 	add.w	r3, r1, r2
 8007450:	d807      	bhi.n	8007462 <memmove+0x1a>
 8007452:	1e42      	subs	r2, r0, #1
 8007454:	4299      	cmp	r1, r3
 8007456:	d00a      	beq.n	800746e <memmove+0x26>
 8007458:	f811 4b01 	ldrb.w	r4, [r1], #1
 800745c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007460:	e7f8      	b.n	8007454 <memmove+0xc>
 8007462:	4283      	cmp	r3, r0
 8007464:	d9f5      	bls.n	8007452 <memmove+0xa>
 8007466:	1881      	adds	r1, r0, r2
 8007468:	1ad2      	subs	r2, r2, r3
 800746a:	42d3      	cmn	r3, r2
 800746c:	d100      	bne.n	8007470 <memmove+0x28>
 800746e:	bd10      	pop	{r4, pc}
 8007470:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007474:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007478:	e7f7      	b.n	800746a <memmove+0x22>
	...

0800747c <_free_r>:
 800747c:	b538      	push	{r3, r4, r5, lr}
 800747e:	4605      	mov	r5, r0
 8007480:	2900      	cmp	r1, #0
 8007482:	d045      	beq.n	8007510 <_free_r+0x94>
 8007484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007488:	1f0c      	subs	r4, r1, #4
 800748a:	2b00      	cmp	r3, #0
 800748c:	bfb8      	it	lt
 800748e:	18e4      	addlt	r4, r4, r3
 8007490:	f000 f8d2 	bl	8007638 <__malloc_lock>
 8007494:	4a1f      	ldr	r2, [pc, #124]	; (8007514 <_free_r+0x98>)
 8007496:	6813      	ldr	r3, [r2, #0]
 8007498:	4610      	mov	r0, r2
 800749a:	b933      	cbnz	r3, 80074aa <_free_r+0x2e>
 800749c:	6063      	str	r3, [r4, #4]
 800749e:	6014      	str	r4, [r2, #0]
 80074a0:	4628      	mov	r0, r5
 80074a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074a6:	f000 b8c8 	b.w	800763a <__malloc_unlock>
 80074aa:	42a3      	cmp	r3, r4
 80074ac:	d90c      	bls.n	80074c8 <_free_r+0x4c>
 80074ae:	6821      	ldr	r1, [r4, #0]
 80074b0:	1862      	adds	r2, r4, r1
 80074b2:	4293      	cmp	r3, r2
 80074b4:	bf04      	itt	eq
 80074b6:	681a      	ldreq	r2, [r3, #0]
 80074b8:	685b      	ldreq	r3, [r3, #4]
 80074ba:	6063      	str	r3, [r4, #4]
 80074bc:	bf04      	itt	eq
 80074be:	1852      	addeq	r2, r2, r1
 80074c0:	6022      	streq	r2, [r4, #0]
 80074c2:	6004      	str	r4, [r0, #0]
 80074c4:	e7ec      	b.n	80074a0 <_free_r+0x24>
 80074c6:	4613      	mov	r3, r2
 80074c8:	685a      	ldr	r2, [r3, #4]
 80074ca:	b10a      	cbz	r2, 80074d0 <_free_r+0x54>
 80074cc:	42a2      	cmp	r2, r4
 80074ce:	d9fa      	bls.n	80074c6 <_free_r+0x4a>
 80074d0:	6819      	ldr	r1, [r3, #0]
 80074d2:	1858      	adds	r0, r3, r1
 80074d4:	42a0      	cmp	r0, r4
 80074d6:	d10b      	bne.n	80074f0 <_free_r+0x74>
 80074d8:	6820      	ldr	r0, [r4, #0]
 80074da:	4401      	add	r1, r0
 80074dc:	1858      	adds	r0, r3, r1
 80074de:	4282      	cmp	r2, r0
 80074e0:	6019      	str	r1, [r3, #0]
 80074e2:	d1dd      	bne.n	80074a0 <_free_r+0x24>
 80074e4:	6810      	ldr	r0, [r2, #0]
 80074e6:	6852      	ldr	r2, [r2, #4]
 80074e8:	605a      	str	r2, [r3, #4]
 80074ea:	4401      	add	r1, r0
 80074ec:	6019      	str	r1, [r3, #0]
 80074ee:	e7d7      	b.n	80074a0 <_free_r+0x24>
 80074f0:	d902      	bls.n	80074f8 <_free_r+0x7c>
 80074f2:	230c      	movs	r3, #12
 80074f4:	602b      	str	r3, [r5, #0]
 80074f6:	e7d3      	b.n	80074a0 <_free_r+0x24>
 80074f8:	6820      	ldr	r0, [r4, #0]
 80074fa:	1821      	adds	r1, r4, r0
 80074fc:	428a      	cmp	r2, r1
 80074fe:	bf04      	itt	eq
 8007500:	6811      	ldreq	r1, [r2, #0]
 8007502:	6852      	ldreq	r2, [r2, #4]
 8007504:	6062      	str	r2, [r4, #4]
 8007506:	bf04      	itt	eq
 8007508:	1809      	addeq	r1, r1, r0
 800750a:	6021      	streq	r1, [r4, #0]
 800750c:	605c      	str	r4, [r3, #4]
 800750e:	e7c7      	b.n	80074a0 <_free_r+0x24>
 8007510:	bd38      	pop	{r3, r4, r5, pc}
 8007512:	bf00      	nop
 8007514:	20001130 	.word	0x20001130

08007518 <_malloc_r>:
 8007518:	b570      	push	{r4, r5, r6, lr}
 800751a:	1ccd      	adds	r5, r1, #3
 800751c:	f025 0503 	bic.w	r5, r5, #3
 8007520:	3508      	adds	r5, #8
 8007522:	2d0c      	cmp	r5, #12
 8007524:	bf38      	it	cc
 8007526:	250c      	movcc	r5, #12
 8007528:	2d00      	cmp	r5, #0
 800752a:	4606      	mov	r6, r0
 800752c:	db01      	blt.n	8007532 <_malloc_r+0x1a>
 800752e:	42a9      	cmp	r1, r5
 8007530:	d903      	bls.n	800753a <_malloc_r+0x22>
 8007532:	230c      	movs	r3, #12
 8007534:	6033      	str	r3, [r6, #0]
 8007536:	2000      	movs	r0, #0
 8007538:	bd70      	pop	{r4, r5, r6, pc}
 800753a:	f000 f87d 	bl	8007638 <__malloc_lock>
 800753e:	4a21      	ldr	r2, [pc, #132]	; (80075c4 <_malloc_r+0xac>)
 8007540:	6814      	ldr	r4, [r2, #0]
 8007542:	4621      	mov	r1, r4
 8007544:	b991      	cbnz	r1, 800756c <_malloc_r+0x54>
 8007546:	4c20      	ldr	r4, [pc, #128]	; (80075c8 <_malloc_r+0xb0>)
 8007548:	6823      	ldr	r3, [r4, #0]
 800754a:	b91b      	cbnz	r3, 8007554 <_malloc_r+0x3c>
 800754c:	4630      	mov	r0, r6
 800754e:	f000 f863 	bl	8007618 <_sbrk_r>
 8007552:	6020      	str	r0, [r4, #0]
 8007554:	4629      	mov	r1, r5
 8007556:	4630      	mov	r0, r6
 8007558:	f000 f85e 	bl	8007618 <_sbrk_r>
 800755c:	1c43      	adds	r3, r0, #1
 800755e:	d124      	bne.n	80075aa <_malloc_r+0x92>
 8007560:	230c      	movs	r3, #12
 8007562:	6033      	str	r3, [r6, #0]
 8007564:	4630      	mov	r0, r6
 8007566:	f000 f868 	bl	800763a <__malloc_unlock>
 800756a:	e7e4      	b.n	8007536 <_malloc_r+0x1e>
 800756c:	680b      	ldr	r3, [r1, #0]
 800756e:	1b5b      	subs	r3, r3, r5
 8007570:	d418      	bmi.n	80075a4 <_malloc_r+0x8c>
 8007572:	2b0b      	cmp	r3, #11
 8007574:	d90f      	bls.n	8007596 <_malloc_r+0x7e>
 8007576:	600b      	str	r3, [r1, #0]
 8007578:	50cd      	str	r5, [r1, r3]
 800757a:	18cc      	adds	r4, r1, r3
 800757c:	4630      	mov	r0, r6
 800757e:	f000 f85c 	bl	800763a <__malloc_unlock>
 8007582:	f104 000b 	add.w	r0, r4, #11
 8007586:	1d23      	adds	r3, r4, #4
 8007588:	f020 0007 	bic.w	r0, r0, #7
 800758c:	1ac3      	subs	r3, r0, r3
 800758e:	d0d3      	beq.n	8007538 <_malloc_r+0x20>
 8007590:	425a      	negs	r2, r3
 8007592:	50e2      	str	r2, [r4, r3]
 8007594:	e7d0      	b.n	8007538 <_malloc_r+0x20>
 8007596:	428c      	cmp	r4, r1
 8007598:	684b      	ldr	r3, [r1, #4]
 800759a:	bf16      	itet	ne
 800759c:	6063      	strne	r3, [r4, #4]
 800759e:	6013      	streq	r3, [r2, #0]
 80075a0:	460c      	movne	r4, r1
 80075a2:	e7eb      	b.n	800757c <_malloc_r+0x64>
 80075a4:	460c      	mov	r4, r1
 80075a6:	6849      	ldr	r1, [r1, #4]
 80075a8:	e7cc      	b.n	8007544 <_malloc_r+0x2c>
 80075aa:	1cc4      	adds	r4, r0, #3
 80075ac:	f024 0403 	bic.w	r4, r4, #3
 80075b0:	42a0      	cmp	r0, r4
 80075b2:	d005      	beq.n	80075c0 <_malloc_r+0xa8>
 80075b4:	1a21      	subs	r1, r4, r0
 80075b6:	4630      	mov	r0, r6
 80075b8:	f000 f82e 	bl	8007618 <_sbrk_r>
 80075bc:	3001      	adds	r0, #1
 80075be:	d0cf      	beq.n	8007560 <_malloc_r+0x48>
 80075c0:	6025      	str	r5, [r4, #0]
 80075c2:	e7db      	b.n	800757c <_malloc_r+0x64>
 80075c4:	20001130 	.word	0x20001130
 80075c8:	20001134 	.word	0x20001134

080075cc <_realloc_r>:
 80075cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ce:	4607      	mov	r7, r0
 80075d0:	4614      	mov	r4, r2
 80075d2:	460e      	mov	r6, r1
 80075d4:	b921      	cbnz	r1, 80075e0 <_realloc_r+0x14>
 80075d6:	4611      	mov	r1, r2
 80075d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80075dc:	f7ff bf9c 	b.w	8007518 <_malloc_r>
 80075e0:	b922      	cbnz	r2, 80075ec <_realloc_r+0x20>
 80075e2:	f7ff ff4b 	bl	800747c <_free_r>
 80075e6:	4625      	mov	r5, r4
 80075e8:	4628      	mov	r0, r5
 80075ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075ec:	f000 f826 	bl	800763c <_malloc_usable_size_r>
 80075f0:	42a0      	cmp	r0, r4
 80075f2:	d20f      	bcs.n	8007614 <_realloc_r+0x48>
 80075f4:	4621      	mov	r1, r4
 80075f6:	4638      	mov	r0, r7
 80075f8:	f7ff ff8e 	bl	8007518 <_malloc_r>
 80075fc:	4605      	mov	r5, r0
 80075fe:	2800      	cmp	r0, #0
 8007600:	d0f2      	beq.n	80075e8 <_realloc_r+0x1c>
 8007602:	4631      	mov	r1, r6
 8007604:	4622      	mov	r2, r4
 8007606:	f7ff fc01 	bl	8006e0c <memcpy>
 800760a:	4631      	mov	r1, r6
 800760c:	4638      	mov	r0, r7
 800760e:	f7ff ff35 	bl	800747c <_free_r>
 8007612:	e7e9      	b.n	80075e8 <_realloc_r+0x1c>
 8007614:	4635      	mov	r5, r6
 8007616:	e7e7      	b.n	80075e8 <_realloc_r+0x1c>

08007618 <_sbrk_r>:
 8007618:	b538      	push	{r3, r4, r5, lr}
 800761a:	4c06      	ldr	r4, [pc, #24]	; (8007634 <_sbrk_r+0x1c>)
 800761c:	2300      	movs	r3, #0
 800761e:	4605      	mov	r5, r0
 8007620:	4608      	mov	r0, r1
 8007622:	6023      	str	r3, [r4, #0]
 8007624:	f7ff fb32 	bl	8006c8c <_sbrk>
 8007628:	1c43      	adds	r3, r0, #1
 800762a:	d102      	bne.n	8007632 <_sbrk_r+0x1a>
 800762c:	6823      	ldr	r3, [r4, #0]
 800762e:	b103      	cbz	r3, 8007632 <_sbrk_r+0x1a>
 8007630:	602b      	str	r3, [r5, #0]
 8007632:	bd38      	pop	{r3, r4, r5, pc}
 8007634:	2000132c 	.word	0x2000132c

08007638 <__malloc_lock>:
 8007638:	4770      	bx	lr

0800763a <__malloc_unlock>:
 800763a:	4770      	bx	lr

0800763c <_malloc_usable_size_r>:
 800763c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007640:	1f18      	subs	r0, r3, #4
 8007642:	2b00      	cmp	r3, #0
 8007644:	bfbc      	itt	lt
 8007646:	580b      	ldrlt	r3, [r1, r0]
 8007648:	18c0      	addlt	r0, r0, r3
 800764a:	4770      	bx	lr

0800764c <_init>:
 800764c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764e:	bf00      	nop
 8007650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007652:	bc08      	pop	{r3}
 8007654:	469e      	mov	lr, r3
 8007656:	4770      	bx	lr

08007658 <_fini>:
 8007658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800765a:	bf00      	nop
 800765c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800765e:	bc08      	pop	{r3}
 8007660:	469e      	mov	lr, r3
 8007662:	4770      	bx	lr
