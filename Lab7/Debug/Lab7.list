
Lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08005b54  08005b54  00015b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c6c  08005c6c  00020134  2**0
                  CONTENTS
  4 .ARM          00000008  08005c6c  08005c6c  00015c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c74  08005c74  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c74  08005c74  00015c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c78  08005c78  00015c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  08005c7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000134  08005db0  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  08005db0  0002037c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012395  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a2b  00000000  00000000  000324f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f18  00000000  00000000  00034f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d80  00000000  00000000  00035e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027774  00000000  00000000  00036bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e5e4  00000000  00000000  0005e334  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ecfc3  00000000  00000000  0006c918  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001598db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e44  00000000  00000000  00159958  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000134 	.word	0x20000134
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b3c 	.word	0x08005b3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000138 	.word	0x20000138
 80001cc:	08005b3c 	.word	0x08005b3c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	; 0x28
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000588:	4b27      	ldr	r3, [pc, #156]	; (8000628 <I2Cx_MspInit+0xa8>)
 800058a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058c:	4a26      	ldr	r2, [pc, #152]	; (8000628 <I2Cx_MspInit+0xa8>)
 800058e:	f043 0302 	orr.w	r3, r3, #2
 8000592:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000594:	4b24      	ldr	r3, [pc, #144]	; (8000628 <I2Cx_MspInit+0xa8>)
 8000596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000598:	f003 0302 	and.w	r3, r3, #2
 800059c:	613b      	str	r3, [r7, #16]
 800059e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80005a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005a4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80005a6:	2312      	movs	r3, #18
 80005a8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80005aa:	2301      	movs	r3, #1
 80005ac:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ae:	2303      	movs	r3, #3
 80005b0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80005b2:	2304      	movs	r3, #4
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4619      	mov	r1, r3
 80005bc:	481b      	ldr	r0, [pc, #108]	; (800062c <I2Cx_MspInit+0xac>)
 80005be:	f001 f9dd 	bl	800197c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4619      	mov	r1, r3
 80005c8:	4818      	ldr	r0, [pc, #96]	; (800062c <I2Cx_MspInit+0xac>)
 80005ca:	f001 f9d7 	bl	800197c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80005ce:	4b16      	ldr	r3, [pc, #88]	; (8000628 <I2Cx_MspInit+0xa8>)
 80005d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d2:	4a15      	ldr	r2, [pc, #84]	; (8000628 <I2Cx_MspInit+0xa8>)
 80005d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005d8:	6593      	str	r3, [r2, #88]	; 0x58
 80005da:	4b13      	ldr	r3, [pc, #76]	; (8000628 <I2Cx_MspInit+0xa8>)
 80005dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <I2Cx_MspInit+0xa8>)
 80005e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005ea:	4a0f      	ldr	r2, [pc, #60]	; (8000628 <I2Cx_MspInit+0xa8>)
 80005ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005f0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <I2Cx_MspInit+0xa8>)
 80005f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005f6:	4a0c      	ldr	r2, [pc, #48]	; (8000628 <I2Cx_MspInit+0xa8>)
 80005f8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80005fc:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80005fe:	2200      	movs	r2, #0
 8000600:	210f      	movs	r1, #15
 8000602:	2021      	movs	r0, #33	; 0x21
 8000604:	f001 f983 	bl	800190e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000608:	2021      	movs	r0, #33	; 0x21
 800060a:	f001 f99c 	bl	8001946 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	210f      	movs	r1, #15
 8000612:	2022      	movs	r0, #34	; 0x22
 8000614:	f001 f97b 	bl	800190e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8000618:	2022      	movs	r0, #34	; 0x22
 800061a:	f001 f994 	bl	8001946 <HAL_NVIC_EnableIRQ>
}
 800061e:	bf00      	nop
 8000620:	3728      	adds	r7, #40	; 0x28
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000
 800062c:	48000400 	.word	0x48000400

08000630 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4a12      	ldr	r2, [pc, #72]	; (8000684 <I2Cx_Init+0x54>)
 800063c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4a11      	ldr	r2, [pc, #68]	; (8000688 <I2Cx_Init+0x58>)
 8000642:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2201      	movs	r2, #1
 800064e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2200      	movs	r2, #0
 8000654:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2200      	movs	r2, #0
 800065a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f7ff ff89 	bl	8000580 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f001 fc50 	bl	8001f14 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8000674:	2100      	movs	r1, #0
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f002 f954 	bl	8002924 <HAL_I2CEx_ConfigAnalogFilter>
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40005800 	.word	0x40005800
 8000688:	00702681 	.word	0x00702681

0800068c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af04      	add	r7, sp, #16
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	4608      	mov	r0, r1
 8000696:	4611      	mov	r1, r2
 8000698:	461a      	mov	r2, r3
 800069a:	4603      	mov	r3, r0
 800069c:	72fb      	strb	r3, [r7, #11]
 800069e:	460b      	mov	r3, r1
 80006a0:	813b      	strh	r3, [r7, #8]
 80006a2:	4613      	mov	r3, r2
 80006a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80006a6:	2300      	movs	r3, #0
 80006a8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80006aa:	7afb      	ldrb	r3, [r7, #11]
 80006ac:	b299      	uxth	r1, r3
 80006ae:	88f8      	ldrh	r0, [r7, #6]
 80006b0:	893a      	ldrh	r2, [r7, #8]
 80006b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b6:	9302      	str	r3, [sp, #8]
 80006b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	6a3b      	ldr	r3, [r7, #32]
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	4603      	mov	r3, r0
 80006c2:	68f8      	ldr	r0, [r7, #12]
 80006c4:	f001 fdf8 	bl	80022b8 <HAL_I2C_Mem_Read>
 80006c8:	4603      	mov	r3, r0
 80006ca:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80006cc:	7dfb      	ldrb	r3, [r7, #23]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d004      	beq.n	80006dc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 80006d2:	7afb      	ldrb	r3, [r7, #11]
 80006d4:	4619      	mov	r1, r3
 80006d6:	68f8      	ldr	r0, [r7, #12]
 80006d8:	f000 f832 	bl	8000740 <I2Cx_Error>
  }
  return status;
 80006dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3718      	adds	r7, #24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b08a      	sub	sp, #40	; 0x28
 80006ea:	af04      	add	r7, sp, #16
 80006ec:	60f8      	str	r0, [r7, #12]
 80006ee:	4608      	mov	r0, r1
 80006f0:	4611      	mov	r1, r2
 80006f2:	461a      	mov	r2, r3
 80006f4:	4603      	mov	r3, r0
 80006f6:	72fb      	strb	r3, [r7, #11]
 80006f8:	460b      	mov	r3, r1
 80006fa:	813b      	strh	r3, [r7, #8]
 80006fc:	4613      	mov	r3, r2
 80006fe:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000700:	2300      	movs	r3, #0
 8000702:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000704:	7afb      	ldrb	r3, [r7, #11]
 8000706:	b299      	uxth	r1, r3
 8000708:	88f8      	ldrh	r0, [r7, #6]
 800070a:	893a      	ldrh	r2, [r7, #8]
 800070c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000710:	9302      	str	r3, [sp, #8]
 8000712:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000714:	9301      	str	r3, [sp, #4]
 8000716:	6a3b      	ldr	r3, [r7, #32]
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	4603      	mov	r3, r0
 800071c:	68f8      	ldr	r0, [r7, #12]
 800071e:	f001 fcb7 	bl	8002090 <HAL_I2C_Mem_Write>
 8000722:	4603      	mov	r3, r0
 8000724:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000726:	7dfb      	ldrb	r3, [r7, #23]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d004      	beq.n	8000736 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800072c:	7afb      	ldrb	r3, [r7, #11]
 800072e:	4619      	mov	r1, r3
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f000 f805 	bl	8000740 <I2Cx_Error>
  }
  return status;
 8000736:	7dfb      	ldrb	r3, [r7, #23]
}
 8000738:	4618      	mov	r0, r3
 800073a:	3718      	adds	r7, #24
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	460b      	mov	r3, r1
 800074a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f001 fc70 	bl	8002032 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f7ff ff6c 	bl	8000630 <I2Cx_Init>
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8000764:	4802      	ldr	r0, [pc, #8]	; (8000770 <SENSOR_IO_Init+0x10>)
 8000766:	f7ff ff63 	bl	8000630 <I2Cx_Init>
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	2000025c 	.word	0x2000025c

08000774 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af02      	add	r7, sp, #8
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
 800077e:	460b      	mov	r3, r1
 8000780:	71bb      	strb	r3, [r7, #6]
 8000782:	4613      	mov	r3, r2
 8000784:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8000786:	79bb      	ldrb	r3, [r7, #6]
 8000788:	b29a      	uxth	r2, r3
 800078a:	79f9      	ldrb	r1, [r7, #7]
 800078c:	2301      	movs	r3, #1
 800078e:	9301      	str	r3, [sp, #4]
 8000790:	1d7b      	adds	r3, r7, #5
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	2301      	movs	r3, #1
 8000796:	4803      	ldr	r0, [pc, #12]	; (80007a4 <SENSOR_IO_Write+0x30>)
 8000798:	f7ff ffa5 	bl	80006e6 <I2Cx_WriteMultiple>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2000025c 	.word	0x2000025c

080007a8 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af02      	add	r7, sp, #8
 80007ae:	4603      	mov	r3, r0
 80007b0:	460a      	mov	r2, r1
 80007b2:	71fb      	strb	r3, [r7, #7]
 80007b4:	4613      	mov	r3, r2
 80007b6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80007bc:	79bb      	ldrb	r3, [r7, #6]
 80007be:	b29a      	uxth	r2, r3
 80007c0:	79f9      	ldrb	r1, [r7, #7]
 80007c2:	2301      	movs	r3, #1
 80007c4:	9301      	str	r3, [sp, #4]
 80007c6:	f107 030f 	add.w	r3, r7, #15
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	2301      	movs	r3, #1
 80007ce:	4804      	ldr	r0, [pc, #16]	; (80007e0 <SENSOR_IO_Read+0x38>)
 80007d0:	f7ff ff5c 	bl	800068c <I2Cx_ReadMultiple>

  return read_value;
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	2000025c 	.word	0x2000025c

080007e4 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af02      	add	r7, sp, #8
 80007ea:	603a      	str	r2, [r7, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
 80007f2:	460b      	mov	r3, r1
 80007f4:	71bb      	strb	r3, [r7, #6]
 80007f6:	4613      	mov	r3, r2
 80007f8:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	79f9      	ldrb	r1, [r7, #7]
 8000800:	88bb      	ldrh	r3, [r7, #4]
 8000802:	9301      	str	r3, [sp, #4]
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2301      	movs	r3, #1
 800080a:	4804      	ldr	r0, [pc, #16]	; (800081c <SENSOR_IO_ReadMultiple+0x38>)
 800080c:	f7ff ff3e 	bl	800068c <I2Cx_ReadMultiple>
 8000810:	4603      	mov	r3, r0
 8000812:	b29b      	uxth	r3, r3
}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	2000025c 	.word	0x2000025c

08000820 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8000826:	2300      	movs	r3, #0
 8000828:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800082a:	2300      	movs	r3, #0
 800082c:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800082e:	4b19      	ldr	r3, [pc, #100]	; (8000894 <BSP_ACCELERO_Init+0x74>)
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	4798      	blx	r3
 8000834:	4603      	mov	r3, r0
 8000836:	2b6a      	cmp	r3, #106	; 0x6a
 8000838:	d002      	beq.n	8000840 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800083a:	2301      	movs	r3, #1
 800083c:	73fb      	strb	r3, [r7, #15]
 800083e:	e024      	b.n	800088a <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8000840:	4b15      	ldr	r3, [pc, #84]	; (8000898 <BSP_ACCELERO_Init+0x78>)
 8000842:	4a14      	ldr	r2, [pc, #80]	; (8000894 <BSP_ACCELERO_Init+0x74>)
 8000844:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8000846:	2330      	movs	r3, #48	; 0x30
 8000848:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800084e:	2300      	movs	r3, #0
 8000850:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8000852:	2340      	movs	r3, #64	; 0x40
 8000854:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800085e:	797a      	ldrb	r2, [r7, #5]
 8000860:	7abb      	ldrb	r3, [r7, #10]
 8000862:	4313      	orrs	r3, r2
 8000864:	b2db      	uxtb	r3, r3
 8000866:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8000868:	7a3b      	ldrb	r3, [r7, #8]
 800086a:	f043 0304 	orr.w	r3, r3, #4
 800086e:	b2db      	uxtb	r3, r3
 8000870:	021b      	lsls	r3, r3, #8
 8000872:	b21a      	sxth	r2, r3
 8000874:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000878:	4313      	orrs	r3, r2
 800087a:	b21b      	sxth	r3, r3
 800087c:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <BSP_ACCELERO_Init+0x78>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	89ba      	ldrh	r2, [r7, #12]
 8000886:	4610      	mov	r0, r2
 8000888:	4798      	blx	r3
  }  

  return ret;
 800088a:	7bfb      	ldrb	r3, [r7, #15]
}
 800088c:	4618      	mov	r0, r3
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	2000005c 	.word	0x2000005c
 8000898:	20000150 	.word	0x20000150

0800089c <BSP_ACCELERO_LowPower>:
  * @brief  Set/Unset the ACCELERO in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  * @retval None
  */
void BSP_ACCELERO_LowPower(uint16_t status)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	80fb      	strh	r3, [r7, #6]
  /* Set/Unset the ACCELERO in low power mode */
  if(AccelerometerDrv != NULL)
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <BSP_ACCELERO_LowPower+0x30>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d00a      	beq.n	80008c4 <BSP_ACCELERO_LowPower+0x28>
  {
    if(AccelerometerDrv->LowPower != NULL)
 80008ae:	4b07      	ldr	r3, [pc, #28]	; (80008cc <BSP_ACCELERO_LowPower+0x30>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	691b      	ldr	r3, [r3, #16]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d005      	beq.n	80008c4 <BSP_ACCELERO_LowPower+0x28>
    {
      AccelerometerDrv->LowPower(status);
 80008b8:	4b04      	ldr	r3, [pc, #16]	; (80008cc <BSP_ACCELERO_LowPower+0x30>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	691b      	ldr	r3, [r3, #16]
 80008be:	88fa      	ldrh	r2, [r7, #6]
 80008c0:	4610      	mov	r0, r2
 80008c2:	4798      	blx	r3
    }
  }
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000150 	.word	0x20000150

080008d0 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80008da:	2300      	movs	r3, #0
 80008dc:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80008de:	4b1b      	ldr	r3, [pc, #108]	; (800094c <BSP_GYRO_Init+0x7c>)
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	4798      	blx	r3
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b6a      	cmp	r3, #106	; 0x6a
 80008e8:	d002      	beq.n	80008f0 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	73fb      	strb	r3, [r7, #15]
 80008ee:	e028      	b.n	8000942 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <BSP_GYRO_Init+0x80>)
 80008f2:	4a16      	ldr	r2, [pc, #88]	; (800094c <BSP_GYRO_Init+0x7c>)
 80008f4:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 80008fa:	2330      	movs	r3, #48	; 0x30
 80008fc:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8000906:	2340      	movs	r3, #64	; 0x40
 8000908:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 800090e:	230c      	movs	r3, #12
 8000910:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8000912:	7aba      	ldrb	r2, [r7, #10]
 8000914:	797b      	ldrb	r3, [r7, #5]
 8000916:	4313      	orrs	r3, r2
 8000918:	b2db      	uxtb	r3, r3
 800091a:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800091c:	7a3b      	ldrb	r3, [r7, #8]
 800091e:	f043 0304 	orr.w	r3, r3, #4
 8000922:	b2db      	uxtb	r3, r3
 8000924:	021b      	lsls	r3, r3, #8
 8000926:	b21a      	sxth	r2, r3
 8000928:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800092c:	4313      	orrs	r3, r2
 800092e:	b21b      	sxth	r3, r3
 8000930:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8000932:	4b07      	ldr	r3, [pc, #28]	; (8000950 <BSP_GYRO_Init+0x80>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	89ba      	ldrh	r2, [r7, #12]
 800093a:	4610      	mov	r0, r2
 800093c:	4798      	blx	r3
    
    ret = GYRO_OK;
 800093e:	2300      	movs	r3, #0
 8000940:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8000942:	7bfb      	ldrb	r3, [r7, #15]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000090 	.word	0x20000090
 8000950:	20000154 	.word	0x20000154

08000954 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <BSP_GYRO_GetXYZ+0x2c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d009      	beq.n	8000978 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <BSP_GYRO_GetXYZ+0x2c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	2b00      	cmp	r3, #0
 800096c:	d004      	beq.n	8000978 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 800096e:	4b04      	ldr	r3, [pc, #16]	; (8000980 <BSP_GYRO_GetXYZ+0x2c>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	4798      	blx	r3
    }
  }
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000154 	.word	0x20000154

08000984 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <BSP_HSENSOR_Init+0x38>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	20be      	movs	r0, #190	; 0xbe
 8000990:	4798      	blx	r3
 8000992:	4603      	mov	r3, r0
 8000994:	2bbc      	cmp	r3, #188	; 0xbc
 8000996:	d002      	beq.n	800099e <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	e009      	b.n	80009b2 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <BSP_HSENSOR_Init+0x3c>)
 80009a0:	4a06      	ldr	r2, [pc, #24]	; (80009bc <BSP_HSENSOR_Init+0x38>)
 80009a2:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <BSP_HSENSOR_Init+0x3c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	20be      	movs	r0, #190	; 0xbe
 80009ac:	4798      	blx	r3
    ret = HSENSOR_OK;
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80009b2:	687b      	ldr	r3, [r7, #4]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000000 	.word	0x20000000
 80009c0:	20000158 	.word	0x20000158

080009c4 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <BSP_HSENSOR_ReadHumidity+0x18>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	20be      	movs	r0, #190	; 0xbe
 80009d0:	4798      	blx	r3
 80009d2:	eef0 7a40 	vmov.f32	s15, s0
}
 80009d6:	eeb0 0a67 	vmov.f32	s0, s15
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000158 	.word	0x20000158

080009e0 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 80009e6:	2300      	movs	r3, #0
 80009e8:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <BSP_MAGNETO_Init+0x50>)
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	4798      	blx	r3
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b3d      	cmp	r3, #61	; 0x3d
 80009f4:	d002      	beq.n	80009fc <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	71fb      	strb	r3, [r7, #7]
 80009fa:	e013      	b.n	8000a24 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 80009fc:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <BSP_MAGNETO_Init+0x54>)
 80009fe:	4a0c      	ldr	r2, [pc, #48]	; (8000a30 <BSP_MAGNETO_Init+0x50>)
 8000a00:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8000a02:	2358      	movs	r3, #88	; 0x58
 8000a04:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8000a06:	2300      	movs	r3, #0
 8000a08:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8000a0e:	2308      	movs	r3, #8
 8000a10:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8000a12:	2340      	movs	r3, #64	; 0x40
 8000a14:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8000a16:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <BSP_MAGNETO_Init+0x54>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	463a      	mov	r2, r7
 8000a1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a22:	4798      	blx	r3
  } 

  return ret;  
 8000a24:	79fb      	ldrb	r3, [r7, #7]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	2000001c 	.word	0x2000001c
 8000a34:	2000015c 	.word	0x2000015c

08000a38 <BSP_MAGNETO_LowPower>:

/**
  * @brief  Set/Unset the MAGNETO in low power mode.
  */
void BSP_MAGNETO_LowPower(uint16_t status)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	80fb      	strh	r3, [r7, #6]
  /* Put the magnetometer in low power mode */
  if(MagnetoDrv != NULL)
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <BSP_MAGNETO_LowPower+0x30>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d00a      	beq.n	8000a60 <BSP_MAGNETO_LowPower+0x28>
  {
    if(MagnetoDrv->LowPower != NULL)
 8000a4a:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <BSP_MAGNETO_LowPower+0x30>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	691b      	ldr	r3, [r3, #16]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d005      	beq.n	8000a60 <BSP_MAGNETO_LowPower+0x28>
    {
      MagnetoDrv->LowPower(status);
 8000a54:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <BSP_MAGNETO_LowPower+0x30>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	691b      	ldr	r3, [r3, #16]
 8000a5a:	88fa      	ldrh	r2, [r7, #6]
 8000a5c:	4610      	mov	r0, r2
 8000a5e:	4798      	blx	r3
    }
  }
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2000015c 	.word	0x2000015c

08000a6c <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <BSP_MAGNETO_GetXYZ+0x2c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d009      	beq.n	8000a90 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <BSP_MAGNETO_GetXYZ+0x2c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d004      	beq.n	8000a90 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8000a86:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <BSP_MAGNETO_GetXYZ+0x2c>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	4798      	blx	r3
    }
  }
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	2000015c 	.word	0x2000015c

08000a9c <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <BSP_PSENSOR_Init+0x38>)
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	20ba      	movs	r0, #186	; 0xba
 8000aa8:	4798      	blx	r3
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2bb1      	cmp	r3, #177	; 0xb1
 8000aae:	d002      	beq.n	8000ab6 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	e009      	b.n	8000aca <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <BSP_PSENSOR_Init+0x3c>)
 8000ab8:	4a06      	ldr	r2, [pc, #24]	; (8000ad4 <BSP_PSENSOR_Init+0x38>)
 8000aba:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <BSP_PSENSOR_Init+0x3c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	20ba      	movs	r0, #186	; 0xba
 8000ac4:	4798      	blx	r3
    ret = PSENSOR_OK;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8000aca:	687b      	ldr	r3, [r7, #4]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000050 	.word	0x20000050
 8000ad8:	20000160 	.word	0x20000160

08000adc <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <BSP_PSENSOR_ReadPressure+0x18>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	20ba      	movs	r0, #186	; 0xba
 8000ae8:	4798      	blx	r3
 8000aea:	eef0 7a40 	vmov.f32	s15, s0
}
 8000aee:	eeb0 0a67 	vmov.f32	s0, s15
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000160 	.word	0x20000160

08000af8 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <BSP_TSENSOR_Init+0x30>)
 8000b04:	4a09      	ldr	r2, [pc, #36]	; (8000b2c <BSP_TSENSOR_Init+0x34>)
 8000b06:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8000b08:	f7ff fe2a 	bl	8000760 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <BSP_TSENSOR_Init+0x30>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2100      	movs	r1, #0
 8000b14:	20be      	movs	r0, #190	; 0xbe
 8000b16:	4798      	blx	r3

  ret = TSENSOR_OK;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000164 	.word	0x20000164
 8000b2c:	2000000c 	.word	0x2000000c

08000b30 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2120      	movs	r1, #32
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fe31 	bl	80007a8 <SENSOR_IO_Read>
 8000b46:	4603      	mov	r3, r0
 8000b48:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
 8000b4c:	f023 0304 	bic.w	r3, r3, #4
 8000b50:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
 8000b54:	f043 0304 	orr.w	r3, r3, #4
 8000b58:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	f023 0303 	bic.w	r3, r3, #3
 8000b60:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b70:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	7bfa      	ldrb	r2, [r7, #15]
 8000b78:	2120      	movs	r1, #32
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fdfa 	bl	8000774 <SENSOR_IO_Write>
}
 8000b80:	bf00      	nop
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000b92:	2300      	movs	r3, #0
 8000b94:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8000b96:	f7ff fde3 	bl	8000760 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8000b9a:	88fb      	ldrh	r3, [r7, #6]
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	210f      	movs	r1, #15
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fe01 	bl	80007a8 <SENSOR_IO_Read>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b088      	sub	sp, #32
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8000bbe:	88fb      	ldrh	r3, [r7, #6]
 8000bc0:	b2d8      	uxtb	r0, r3
 8000bc2:	f107 020c 	add.w	r2, r7, #12
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	21b0      	movs	r1, #176	; 0xb0
 8000bca:	f7ff fe0b 	bl	80007e4 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8000bce:	7b3b      	ldrb	r3, [r7, #12]
 8000bd0:	085b      	lsrs	r3, r3, #1
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8000bd6:	7b7b      	ldrb	r3, [r7, #13]
 8000bd8:	085b      	lsrs	r3, r3, #1
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8000bde:	88fb      	ldrh	r3, [r7, #6]
 8000be0:	b2d8      	uxtb	r0, r3
 8000be2:	f107 020c 	add.w	r2, r7, #12
 8000be6:	2302      	movs	r3, #2
 8000be8:	21b6      	movs	r1, #182	; 0xb6
 8000bea:	f7ff fdfb 	bl	80007e4 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000bee:	7b7b      	ldrb	r3, [r7, #13]
 8000bf0:	021b      	lsls	r3, r3, #8
 8000bf2:	b21a      	sxth	r2, r3
 8000bf4:	7b3b      	ldrb	r3, [r7, #12]
 8000bf6:	b21b      	sxth	r3, r3
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	b2d8      	uxtb	r0, r3
 8000c00:	f107 020c 	add.w	r2, r7, #12
 8000c04:	2302      	movs	r3, #2
 8000c06:	21ba      	movs	r1, #186	; 0xba
 8000c08:	f7ff fdec 	bl	80007e4 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000c0c:	7b7b      	ldrb	r3, [r7, #13]
 8000c0e:	021b      	lsls	r3, r3, #8
 8000c10:	b21a      	sxth	r2, r3
 8000c12:	7b3b      	ldrb	r3, [r7, #12]
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	4313      	orrs	r3, r2
 8000c18:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	b2d8      	uxtb	r0, r3
 8000c1e:	f107 020c 	add.w	r2, r7, #12
 8000c22:	2302      	movs	r3, #2
 8000c24:	21a8      	movs	r1, #168	; 0xa8
 8000c26:	f7ff fddd 	bl	80007e4 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000c2a:	7b7b      	ldrb	r3, [r7, #13]
 8000c2c:	021b      	lsls	r3, r3, #8
 8000c2e:	b21a      	sxth	r2, r3
 8000c30:	7b3b      	ldrb	r3, [r7, #12]
 8000c32:	b21b      	sxth	r3, r3
 8000c34:	4313      	orrs	r3, r2
 8000c36:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8000c38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000c3c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	ee07 3a90 	vmov	s15, r3
 8000c46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c4a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000c4e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	ee07 3a90 	vmov	s15, r3
 8000c58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c5c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000c60:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000c64:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	ee07 3a90 	vmov	s15, r3
 8000c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000c76:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000c7a:	ee07 3a90 	vmov	s15, r3
 8000c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c86:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8000c8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c8e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000c92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c96:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8000c9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c9e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000ce4 <HTS221_H_ReadHumidity+0x130>
 8000ca2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000caa:	dd01      	ble.n	8000cb0 <HTS221_H_ReadHumidity+0xfc>
 8000cac:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <HTS221_H_ReadHumidity+0x134>)
 8000cae:	e00a      	b.n	8000cc6 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8000cb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cbc:	d502      	bpl.n	8000cc4 <HTS221_H_ReadHumidity+0x110>
 8000cbe:	f04f 0300 	mov.w	r3, #0
 8000cc2:	e000      	b.n	8000cc6 <HTS221_H_ReadHumidity+0x112>
 8000cc4:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8000cc6:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8000cc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ccc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000cd0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000cd4:	eef0 7a66 	vmov.f32	s15, s13
}
 8000cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000cdc:	3720      	adds	r7, #32
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	447a0000 	.word	0x447a0000
 8000ce8:	447a0000 	.word	0x447a0000

08000cec <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	6039      	str	r1, [r7, #0]
 8000cf6:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2120      	movs	r1, #32
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fd52 	bl	80007a8 <SENSOR_IO_Read>
 8000d04:	4603      	mov	r3, r0
 8000d06:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
 8000d0a:	f023 0304 	bic.w	r3, r3, #4
 8000d0e:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	f043 0304 	orr.w	r3, r3, #4
 8000d16:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	f023 0303 	bic.w	r3, r3, #3
 8000d1e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d2e:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8000d30:	88fb      	ldrh	r3, [r7, #6]
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	7bfa      	ldrb	r2, [r7, #15]
 8000d36:	2120      	movs	r1, #32
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fd1b 	bl	8000774 <SENSOR_IO_Write>
}
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b088      	sub	sp, #32
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8000d50:	88fb      	ldrh	r3, [r7, #6]
 8000d52:	b2d8      	uxtb	r0, r3
 8000d54:	f107 0208 	add.w	r2, r7, #8
 8000d58:	2302      	movs	r3, #2
 8000d5a:	21b2      	movs	r1, #178	; 0xb2
 8000d5c:	f7ff fd42 	bl	80007e4 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8000d60:	88fb      	ldrh	r3, [r7, #6]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2135      	movs	r1, #53	; 0x35
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fd1e 	bl	80007a8 <SENSOR_IO_Read>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8000d70:	7ffb      	ldrb	r3, [r7, #31]
 8000d72:	021b      	lsls	r3, r3, #8
 8000d74:	b21b      	sxth	r3, r3
 8000d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000d7a:	b21a      	sxth	r2, r3
 8000d7c:	7a3b      	ldrb	r3, [r7, #8]
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	4313      	orrs	r3, r2
 8000d82:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8000d84:	7ffb      	ldrb	r3, [r7, #31]
 8000d86:	019b      	lsls	r3, r3, #6
 8000d88:	b21b      	sxth	r3, r3
 8000d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000d8e:	b21a      	sxth	r2, r3
 8000d90:	7a7b      	ldrb	r3, [r7, #9]
 8000d92:	b21b      	sxth	r3, r3
 8000d94:	4313      	orrs	r3, r2
 8000d96:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8000d98:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000d9c:	10db      	asrs	r3, r3, #3
 8000d9e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8000da0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000da4:	10db      	asrs	r3, r3, #3
 8000da6:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8000da8:	88fb      	ldrh	r3, [r7, #6]
 8000daa:	b2d8      	uxtb	r0, r3
 8000dac:	f107 0208 	add.w	r2, r7, #8
 8000db0:	2304      	movs	r3, #4
 8000db2:	21bc      	movs	r1, #188	; 0xbc
 8000db4:	f7ff fd16 	bl	80007e4 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000db8:	7a7b      	ldrb	r3, [r7, #9]
 8000dba:	021b      	lsls	r3, r3, #8
 8000dbc:	b21a      	sxth	r2, r3
 8000dbe:	7a3b      	ldrb	r3, [r7, #8]
 8000dc0:	b21b      	sxth	r3, r3
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8000dc6:	7afb      	ldrb	r3, [r7, #11]
 8000dc8:	021b      	lsls	r3, r3, #8
 8000dca:	b21a      	sxth	r2, r3
 8000dcc:	7abb      	ldrb	r3, [r7, #10]
 8000dce:	b21b      	sxth	r3, r3
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8000dd4:	88fb      	ldrh	r3, [r7, #6]
 8000dd6:	b2d8      	uxtb	r0, r3
 8000dd8:	f107 0208 	add.w	r2, r7, #8
 8000ddc:	2302      	movs	r3, #2
 8000dde:	21aa      	movs	r1, #170	; 0xaa
 8000de0:	f7ff fd00 	bl	80007e4 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000de4:	7a7b      	ldrb	r3, [r7, #9]
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	b21a      	sxth	r2, r3
 8000dea:	7a3b      	ldrb	r3, [r7, #8]
 8000dec:	b21b      	sxth	r3, r3
 8000dee:	4313      	orrs	r3, r2
 8000df0:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8000df2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000df6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	ee07 3a90 	vmov	s15, r3
 8000e00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000e08:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	ee07 3a90 	vmov	s15, r3
 8000e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e16:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000e1a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000e1e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	ee07 3a90 	vmov	s15, r3
 8000e28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000e30:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000e34:	ee07 3a90 	vmov	s15, r3
 8000e38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e40:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	ee07 3a90 	vmov	s15, r3
}
 8000e4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e4e:	3720      	adds	r7, #32
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8000e60:	783b      	ldrb	r3, [r7, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	2120      	movs	r1, #32
 8000e66:	203c      	movs	r0, #60	; 0x3c
 8000e68:	f7ff fc84 	bl	8000774 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8000e6c:	787b      	ldrb	r3, [r7, #1]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	2121      	movs	r1, #33	; 0x21
 8000e72:	203c      	movs	r0, #60	; 0x3c
 8000e74:	f7ff fc7e 	bl	8000774 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8000e78:	78bb      	ldrb	r3, [r7, #2]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	2122      	movs	r1, #34	; 0x22
 8000e7e:	203c      	movs	r0, #60	; 0x3c
 8000e80:	f7ff fc78 	bl	8000774 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8000e84:	78fb      	ldrb	r3, [r7, #3]
 8000e86:	461a      	mov	r2, r3
 8000e88:	2123      	movs	r1, #35	; 0x23
 8000e8a:	203c      	movs	r0, #60	; 0x3c
 8000e8c:	f7ff fc72 	bl	8000774 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8000e90:	793b      	ldrb	r3, [r7, #4]
 8000e92:	461a      	mov	r2, r3
 8000e94:	2124      	movs	r1, #36	; 0x24
 8000e96:	203c      	movs	r0, #60	; 0x3c
 8000e98:	f7ff fc6c 	bl	8000774 <SENSOR_IO_Write>
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8000eae:	2122      	movs	r1, #34	; 0x22
 8000eb0:	203c      	movs	r0, #60	; 0x3c
 8000eb2:	f7ff fc79 	bl	80007a8 <SENSOR_IO_Read>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	f023 0303 	bic.w	r3, r3, #3
 8000ec0:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	f043 0303 	orr.w	r3, r3, #3
 8000ec8:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	2122      	movs	r1, #34	; 0x22
 8000ed0:	203c      	movs	r0, #60	; 0x3c
 8000ed2:	f7ff fc4f 	bl	8000774 <SENSOR_IO_Write>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8000ee2:	f7ff fc3d 	bl	8000760 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8000ee6:	210f      	movs	r1, #15
 8000ee8:	203c      	movs	r0, #60	; 0x3c
 8000eea:	f7ff fc5d 	bl	80007a8 <SENSOR_IO_Read>
 8000eee:	4603      	mov	r3, r0
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8000f02:	2122      	movs	r1, #34	; 0x22
 8000f04:	203c      	movs	r0, #60	; 0x3c
 8000f06:	f7ff fc4f 	bl	80007a8 <SENSOR_IO_Read>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	f023 0320 	bic.w	r3, r3, #32
 8000f14:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	f043 0320 	orr.w	r3, r3, #32
 8000f22:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	461a      	mov	r2, r3
 8000f28:	2122      	movs	r1, #34	; 0x22
 8000f2a:	203c      	movs	r0, #60	; 0x3c
 8000f2c:	f7ff fc22 	bl	8000774 <SENSOR_IO_Write>
}
 8000f30:	bf00      	nop
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8000f48:	f04f 0300 	mov.w	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8000f4e:	2121      	movs	r1, #33	; 0x21
 8000f50:	203c      	movs	r0, #60	; 0x3c
 8000f52:	f7ff fc29 	bl	80007a8 <SENSOR_IO_Read>
 8000f56:	4603      	mov	r3, r0
 8000f58:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8000f5a:	f107 0208 	add.w	r2, r7, #8
 8000f5e:	2306      	movs	r3, #6
 8000f60:	21a8      	movs	r1, #168	; 0xa8
 8000f62:	203c      	movs	r0, #60	; 0x3c
 8000f64:	f7ff fc3e 	bl	80007e4 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8000f68:	2300      	movs	r3, #0
 8000f6a:	77fb      	strb	r3, [r7, #31]
 8000f6c:	e01f      	b.n	8000fae <LIS3MDL_MagReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8000f6e:	7ffb      	ldrb	r3, [r7, #31]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	3301      	adds	r3, #1
 8000f74:	f107 0220 	add.w	r2, r7, #32
 8000f78:	4413      	add	r3, r2
 8000f7a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	7ffb      	ldrb	r3, [r7, #31]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	f107 0120 	add.w	r1, r7, #32
 8000f8c:	440b      	add	r3, r1
 8000f8e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	4413      	add	r3, r2
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	7ffb      	ldrb	r3, [r7, #31]
 8000f9a:	b212      	sxth	r2, r2
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	f107 0120 	add.w	r1, r7, #32
 8000fa2:	440b      	add	r3, r1
 8000fa4:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8000fa8:	7ffb      	ldrb	r3, [r7, #31]
 8000faa:	3301      	adds	r3, #1
 8000fac:	77fb      	strb	r3, [r7, #31]
 8000fae:	7ffb      	ldrb	r3, [r7, #31]
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d9dc      	bls.n	8000f6e <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8000fb4:	7dfb      	ldrb	r3, [r7, #23]
 8000fb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8000fba:	2b20      	cmp	r3, #32
 8000fbc:	d00c      	beq.n	8000fd8 <LIS3MDL_MagReadXYZ+0xa0>
 8000fbe:	2b20      	cmp	r3, #32
 8000fc0:	dc02      	bgt.n	8000fc8 <LIS3MDL_MagReadXYZ+0x90>
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d005      	beq.n	8000fd2 <LIS3MDL_MagReadXYZ+0x9a>
 8000fc6:	e010      	b.n	8000fea <LIS3MDL_MagReadXYZ+0xb2>
 8000fc8:	2b40      	cmp	r3, #64	; 0x40
 8000fca:	d008      	beq.n	8000fde <LIS3MDL_MagReadXYZ+0xa6>
 8000fcc:	2b60      	cmp	r3, #96	; 0x60
 8000fce:	d009      	beq.n	8000fe4 <LIS3MDL_MagReadXYZ+0xac>
 8000fd0:	e00b      	b.n	8000fea <LIS3MDL_MagReadXYZ+0xb2>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8000fd2:	4b19      	ldr	r3, [pc, #100]	; (8001038 <LIS3MDL_MagReadXYZ+0x100>)
 8000fd4:	61bb      	str	r3, [r7, #24]
    break;
 8000fd6:	e008      	b.n	8000fea <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8000fd8:	4b18      	ldr	r3, [pc, #96]	; (800103c <LIS3MDL_MagReadXYZ+0x104>)
 8000fda:	61bb      	str	r3, [r7, #24]
    break;
 8000fdc:	e005      	b.n	8000fea <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8000fde:	4b18      	ldr	r3, [pc, #96]	; (8001040 <LIS3MDL_MagReadXYZ+0x108>)
 8000fe0:	61bb      	str	r3, [r7, #24]
    break;
 8000fe2:	e002      	b.n	8000fea <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8000fe4:	4b17      	ldr	r3, [pc, #92]	; (8001044 <LIS3MDL_MagReadXYZ+0x10c>)
 8000fe6:	61bb      	str	r3, [r7, #24]
    break;    
 8000fe8:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	77fb      	strb	r3, [r7, #31]
 8000fee:	e01b      	b.n	8001028 <LIS3MDL_MagReadXYZ+0xf0>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8000ff0:	7ffb      	ldrb	r3, [r7, #31]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	f107 0220 	add.w	r2, r7, #32
 8000ff8:	4413      	add	r3, r2
 8000ffa:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8000ffe:	ee07 3a90 	vmov	s15, r3
 8001002:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001006:	edd7 7a06 	vldr	s15, [r7, #24]
 800100a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800100e:	7ffb      	ldrb	r3, [r7, #31]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800101a:	ee17 2a90 	vmov	r2, s15
 800101e:	b212      	sxth	r2, r2
 8001020:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001022:	7ffb      	ldrb	r3, [r7, #31]
 8001024:	3301      	adds	r3, #1
 8001026:	77fb      	strb	r3, [r7, #31]
 8001028:	7ffb      	ldrb	r3, [r7, #31]
 800102a:	2b02      	cmp	r3, #2
 800102c:	d9e0      	bls.n	8000ff0 <LIS3MDL_MagReadXYZ+0xb8>
  }
}
 800102e:	bf00      	nop
 8001030:	3720      	adds	r7, #32
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	3e0f5c29 	.word	0x3e0f5c29
 800103c:	3e947ae1 	.word	0x3e947ae1
 8001040:	3edc28f6 	.word	0x3edc28f6
 8001044:	3f147ae1 	.word	0x3f147ae1

08001048 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f87b 	bl	8001150 <LPS22HB_Init>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8001062:	b580      	push	{r7, lr}
 8001064:	b084      	sub	sp, #16
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800106c:	2300      	movs	r3, #0
 800106e:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001070:	f7ff fb76 	bl	8000760 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8001074:	88fb      	ldrh	r3, [r7, #6]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	210f      	movs	r1, #15
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fb94 	bl	80007a8 <SENSOR_IO_Read>
 8001080:	4603      	mov	r3, r0
 8001082:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001084:	7bfb      	ldrb	r3, [r7, #15]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b087      	sub	sp, #28
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 800109e:	2300      	movs	r3, #0
 80010a0:	74fb      	strb	r3, [r7, #19]
 80010a2:	e013      	b.n	80010cc <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80010a4:	88fb      	ldrh	r3, [r7, #6]
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	7cfb      	ldrb	r3, [r7, #19]
 80010aa:	3328      	adds	r3, #40	; 0x28
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	7cfc      	ldrb	r4, [r7, #19]
 80010b0:	4619      	mov	r1, r3
 80010b2:	4610      	mov	r0, r2
 80010b4:	f7ff fb78 	bl	80007a8 <SENSOR_IO_Read>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	f107 0318 	add.w	r3, r7, #24
 80010c0:	4423      	add	r3, r4
 80010c2:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80010c6:	7cfb      	ldrb	r3, [r7, #19]
 80010c8:	3301      	adds	r3, #1
 80010ca:	74fb      	strb	r3, [r7, #19]
 80010cc:	7cfb      	ldrb	r3, [r7, #19]
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d9e8      	bls.n	80010a4 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	74fb      	strb	r3, [r7, #19]
 80010d6:	e010      	b.n	80010fa <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80010d8:	7cfb      	ldrb	r3, [r7, #19]
 80010da:	f107 0218 	add.w	r2, r7, #24
 80010de:	4413      	add	r3, r2
 80010e0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80010e4:	461a      	mov	r2, r3
 80010e6:	7cfb      	ldrb	r3, [r7, #19]
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80010f4:	7cfb      	ldrb	r3, [r7, #19]
 80010f6:	3301      	adds	r3, #1
 80010f8:	74fb      	strb	r3, [r7, #19]
 80010fa:	7cfb      	ldrb	r3, [r7, #19]
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d9eb      	bls.n	80010d8 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001110:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2264      	movs	r2, #100	; 0x64
 800111a:	fb02 f303 	mul.w	r3, r2, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	da01      	bge.n	8001126 <LPS22HB_P_ReadPressure+0x96>
 8001122:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001126:	131b      	asrs	r3, r3, #12
 8001128:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	ee07 3a90 	vmov	s15, r3
 8001130:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001134:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800114c <LPS22HB_P_ReadPressure+0xbc>
 8001138:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800113c:	eef0 7a66 	vmov.f32	s15, s13
}
 8001140:	eeb0 0a67 	vmov.f32	s0, s15
 8001144:	371c      	adds	r7, #28
 8001146:	46bd      	mov	sp, r7
 8001148:	bd90      	pop	{r4, r7, pc}
 800114a:	bf00      	nop
 800114c:	42c80000 	.word	0x42c80000

08001150 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 800115a:	88fb      	ldrh	r3, [r7, #6]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	211a      	movs	r1, #26
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fb21 	bl	80007a8 <SENSOR_IO_Read>
 8001166:	4603      	mov	r3, r0
 8001168:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	f023 0301 	bic.w	r3, r3, #1
 8001170:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	7bfa      	ldrb	r2, [r7, #15]
 8001180:	211a      	movs	r1, #26
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff faf6 	bl	8000774 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2110      	movs	r1, #16
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fb0a 	bl	80007a8 <SENSOR_IO_Read>
 8001194:	4603      	mov	r3, r0
 8001196:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800119e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80011a6:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	f023 0302 	bic.w	r3, r3, #2
 80011ae:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	f043 0302 	orr.w	r3, r3, #2
 80011b6:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80011b8:	88fb      	ldrh	r3, [r7, #6]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	2110      	movs	r1, #16
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fad7 	bl	8000774 <SENSOR_IO_Write>
}  
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80011d8:	2300      	movs	r3, #0
 80011da:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80011dc:	2110      	movs	r1, #16
 80011de:	20d4      	movs	r0, #212	; 0xd4
 80011e0:	f7ff fae2 	bl	80007a8 <SENSOR_IO_Read>
 80011e4:	4603      	mov	r3, r0
 80011e6:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80011e8:	88fb      	ldrh	r3, [r7, #6]
 80011ea:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80011ec:	7bbb      	ldrb	r3, [r7, #14]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80011f4:	7bba      	ldrb	r2, [r7, #14]
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80011fc:	7bbb      	ldrb	r3, [r7, #14]
 80011fe:	461a      	mov	r2, r3
 8001200:	2110      	movs	r1, #16
 8001202:	20d4      	movs	r0, #212	; 0xd4
 8001204:	f7ff fab6 	bl	8000774 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001208:	2112      	movs	r1, #18
 800120a:	20d4      	movs	r0, #212	; 0xd4
 800120c:	f7ff facc 	bl	80007a8 <SENSOR_IO_Read>
 8001210:	4603      	mov	r3, r0
 8001212:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	0a1b      	lsrs	r3, r3, #8
 8001218:	b29b      	uxth	r3, r3
 800121a:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800121c:	7bbb      	ldrb	r3, [r7, #14]
 800121e:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8001222:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001224:	7bba      	ldrb	r2, [r7, #14]
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	4313      	orrs	r3, r2
 800122a:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800122c:	7bbb      	ldrb	r3, [r7, #14]
 800122e:	461a      	mov	r2, r3
 8001230:	2112      	movs	r1, #18
 8001232:	20d4      	movs	r0, #212	; 0xd4
 8001234:	f7ff fa9e 	bl	8000774 <SENSOR_IO_Write>
}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001246:	2300      	movs	r3, #0
 8001248:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800124a:	2110      	movs	r1, #16
 800124c:	20d4      	movs	r0, #212	; 0xd4
 800124e:	f7ff faab 	bl	80007a8 <SENSOR_IO_Read>
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	f003 030f 	and.w	r3, r3, #15
 800125c:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	461a      	mov	r2, r3
 8001262:	2110      	movs	r1, #16
 8001264:	20d4      	movs	r0, #212	; 0xd4
 8001266:	f7ff fa85 	bl	8000774 <SENSOR_IO_Write>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8001272:	b580      	push	{r7, lr}
 8001274:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8001276:	f7ff fa73 	bl	8000760 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800127a:	210f      	movs	r1, #15
 800127c:	20d4      	movs	r0, #212	; 0xd4
 800127e:	f7ff fa93 	bl	80007a8 <SENSOR_IO_Read>
 8001282:	4603      	mov	r3, r0
}
 8001284:	4618      	mov	r0, r3
 8001286:	bd80      	pop	{r7, pc}

08001288 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001292:	2300      	movs	r3, #0
 8001294:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8001296:	2115      	movs	r1, #21
 8001298:	20d4      	movs	r0, #212	; 0xd4
 800129a:	f7ff fa85 	bl	80007a8 <SENSOR_IO_Read>
 800129e:	4603      	mov	r3, r0
 80012a0:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	f023 0310 	bic.w	r3, r3, #16
 80012a8:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	f043 0310 	orr.w	r3, r3, #16
 80012b6:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	461a      	mov	r2, r3
 80012bc:	2115      	movs	r1, #21
 80012be:	20d4      	movs	r0, #212	; 0xd4
 80012c0:	f7ff fa58 	bl	8000774 <SENSOR_IO_Write>
}
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80012dc:	f04f 0300 	mov.w	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80012e2:	2110      	movs	r1, #16
 80012e4:	20d4      	movs	r0, #212	; 0xd4
 80012e6:	f7ff fa5f 	bl	80007a8 <SENSOR_IO_Read>
 80012ea:	4603      	mov	r3, r0
 80012ec:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80012ee:	f107 0208 	add.w	r2, r7, #8
 80012f2:	2306      	movs	r3, #6
 80012f4:	2128      	movs	r1, #40	; 0x28
 80012f6:	20d4      	movs	r0, #212	; 0xd4
 80012f8:	f7ff fa74 	bl	80007e4 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80012fc:	2300      	movs	r3, #0
 80012fe:	77fb      	strb	r3, [r7, #31]
 8001300:	e01f      	b.n	8001342 <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001302:	7ffb      	ldrb	r3, [r7, #31]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	3301      	adds	r3, #1
 8001308:	f107 0220 	add.w	r2, r7, #32
 800130c:	4413      	add	r3, r2
 800130e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001312:	b29b      	uxth	r3, r3
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	b29a      	uxth	r2, r3
 8001318:	7ffb      	ldrb	r3, [r7, #31]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	f107 0120 	add.w	r1, r7, #32
 8001320:	440b      	add	r3, r1
 8001322:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001326:	b29b      	uxth	r3, r3
 8001328:	4413      	add	r3, r2
 800132a:	b29a      	uxth	r2, r3
 800132c:	7ffb      	ldrb	r3, [r7, #31]
 800132e:	b212      	sxth	r2, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	f107 0120 	add.w	r1, r7, #32
 8001336:	440b      	add	r3, r1
 8001338:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800133c:	7ffb      	ldrb	r3, [r7, #31]
 800133e:	3301      	adds	r3, #1
 8001340:	77fb      	strb	r3, [r7, #31]
 8001342:	7ffb      	ldrb	r3, [r7, #31]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d9dc      	bls.n	8001302 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8001348:	7dfb      	ldrb	r3, [r7, #23]
 800134a:	f003 030c 	and.w	r3, r3, #12
 800134e:	2b0c      	cmp	r3, #12
 8001350:	d828      	bhi.n	80013a4 <LSM6DSL_AccReadXYZ+0xd8>
 8001352:	a201      	add	r2, pc, #4	; (adr r2, 8001358 <LSM6DSL_AccReadXYZ+0x8c>)
 8001354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001358:	0800138d 	.word	0x0800138d
 800135c:	080013a5 	.word	0x080013a5
 8001360:	080013a5 	.word	0x080013a5
 8001364:	080013a5 	.word	0x080013a5
 8001368:	0800139f 	.word	0x0800139f
 800136c:	080013a5 	.word	0x080013a5
 8001370:	080013a5 	.word	0x080013a5
 8001374:	080013a5 	.word	0x080013a5
 8001378:	08001393 	.word	0x08001393
 800137c:	080013a5 	.word	0x080013a5
 8001380:	080013a5 	.word	0x080013a5
 8001384:	080013a5 	.word	0x080013a5
 8001388:	08001399 	.word	0x08001399
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 800138c:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <LSM6DSL_AccReadXYZ+0x124>)
 800138e:	61bb      	str	r3, [r7, #24]
    break;
 8001390:	e008      	b.n	80013a4 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8001392:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <LSM6DSL_AccReadXYZ+0x128>)
 8001394:	61bb      	str	r3, [r7, #24]
    break;
 8001396:	e005      	b.n	80013a4 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8001398:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <LSM6DSL_AccReadXYZ+0x12c>)
 800139a:	61bb      	str	r3, [r7, #24]
    break;
 800139c:	e002      	b.n	80013a4 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800139e:	4b17      	ldr	r3, [pc, #92]	; (80013fc <LSM6DSL_AccReadXYZ+0x130>)
 80013a0:	61bb      	str	r3, [r7, #24]
    break;    
 80013a2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80013a4:	2300      	movs	r3, #0
 80013a6:	77fb      	strb	r3, [r7, #31]
 80013a8:	e01b      	b.n	80013e2 <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80013aa:	7ffb      	ldrb	r3, [r7, #31]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	f107 0220 	add.w	r2, r7, #32
 80013b2:	4413      	add	r3, r2
 80013b4:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80013b8:	ee07 3a90 	vmov	s15, r3
 80013bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80013c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c8:	7ffb      	ldrb	r3, [r7, #31]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	4413      	add	r3, r2
 80013d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013d4:	ee17 2a90 	vmov	r2, s15
 80013d8:	b212      	sxth	r2, r2
 80013da:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80013dc:	7ffb      	ldrb	r3, [r7, #31]
 80013de:	3301      	adds	r3, #1
 80013e0:	77fb      	strb	r3, [r7, #31]
 80013e2:	7ffb      	ldrb	r3, [r7, #31]
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d9e0      	bls.n	80013aa <LSM6DSL_AccReadXYZ+0xde>
  }
}
 80013e8:	bf00      	nop
 80013ea:	3720      	adds	r7, #32
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	3d79db23 	.word	0x3d79db23
 80013f4:	3df9db23 	.word	0x3df9db23
 80013f8:	3e79db23 	.word	0x3e79db23
 80013fc:	3ef9db23 	.word	0x3ef9db23

08001400 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800140a:	2300      	movs	r3, #0
 800140c:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800140e:	2111      	movs	r1, #17
 8001410:	20d4      	movs	r0, #212	; 0xd4
 8001412:	f7ff f9c9 	bl	80007a8 <SENSOR_IO_Read>
 8001416:	4603      	mov	r3, r0
 8001418:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800141a:	88fb      	ldrh	r3, [r7, #6]
 800141c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800141e:	7bbb      	ldrb	r3, [r7, #14]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001426:	7bba      	ldrb	r2, [r7, #14]
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	4313      	orrs	r3, r2
 800142c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 800142e:	7bbb      	ldrb	r3, [r7, #14]
 8001430:	461a      	mov	r2, r3
 8001432:	2111      	movs	r1, #17
 8001434:	20d4      	movs	r0, #212	; 0xd4
 8001436:	f7ff f99d 	bl	8000774 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800143a:	2112      	movs	r1, #18
 800143c:	20d4      	movs	r0, #212	; 0xd4
 800143e:	f7ff f9b3 	bl	80007a8 <SENSOR_IO_Read>
 8001442:	4603      	mov	r3, r0
 8001444:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	b29b      	uxth	r3, r3
 800144c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800144e:	7bbb      	ldrb	r3, [r7, #14]
 8001450:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8001454:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001456:	7bba      	ldrb	r2, [r7, #14]
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	4313      	orrs	r3, r2
 800145c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800145e:	7bbb      	ldrb	r3, [r7, #14]
 8001460:	461a      	mov	r2, r3
 8001462:	2112      	movs	r1, #18
 8001464:	20d4      	movs	r0, #212	; 0xd4
 8001466:	f7ff f985 	bl	8000774 <SENSOR_IO_Write>
}
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001478:	2300      	movs	r3, #0
 800147a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800147c:	2111      	movs	r1, #17
 800147e:	20d4      	movs	r0, #212	; 0xd4
 8001480:	f7ff f992 	bl	80007a8 <SENSOR_IO_Read>
 8001484:	4603      	mov	r3, r0
 8001486:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	461a      	mov	r2, r3
 8001494:	2111      	movs	r1, #17
 8001496:	20d4      	movs	r0, #212	; 0xd4
 8001498:	f7ff f96c 	bl	8000774 <SENSOR_IO_Write>
}
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80014a8:	f7ff f95a 	bl	8000760 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 80014ac:	210f      	movs	r1, #15
 80014ae:	20d4      	movs	r0, #212	; 0xd4
 80014b0:	f7ff f97a 	bl	80007a8 <SENSOR_IO_Read>
 80014b4:	4603      	mov	r3, r0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	bd80      	pop	{r7, pc}

080014ba <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b084      	sub	sp, #16
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80014c4:	2300      	movs	r3, #0
 80014c6:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80014c8:	2116      	movs	r1, #22
 80014ca:	20d4      	movs	r0, #212	; 0xd4
 80014cc:	f7ff f96c 	bl	80007a8 <SENSOR_IO_Read>
 80014d0:	4603      	mov	r3, r0
 80014d2:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014da:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014e8:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	461a      	mov	r2, r3
 80014ee:	2116      	movs	r1, #22
 80014f0:	20d4      	movs	r0, #212	; 0xd4
 80014f2:	f7ff f93f 	bl	8000774 <SENSOR_IO_Write>
}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8001508:	2300      	movs	r3, #0
 800150a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001516:	2111      	movs	r1, #17
 8001518:	20d4      	movs	r0, #212	; 0xd4
 800151a:	f7ff f945 	bl	80007a8 <SENSOR_IO_Read>
 800151e:	4603      	mov	r3, r0
 8001520:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8001522:	f107 0208 	add.w	r2, r7, #8
 8001526:	2306      	movs	r3, #6
 8001528:	2122      	movs	r1, #34	; 0x22
 800152a:	20d4      	movs	r0, #212	; 0xd4
 800152c:	f7ff f95a 	bl	80007e4 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001530:	2300      	movs	r3, #0
 8001532:	77fb      	strb	r3, [r7, #31]
 8001534:	e01f      	b.n	8001576 <LSM6DSL_GyroReadXYZAngRate+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001536:	7ffb      	ldrb	r3, [r7, #31]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	3301      	adds	r3, #1
 800153c:	f107 0220 	add.w	r2, r7, #32
 8001540:	4413      	add	r3, r2
 8001542:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001546:	b29b      	uxth	r3, r3
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	b29a      	uxth	r2, r3
 800154c:	7ffb      	ldrb	r3, [r7, #31]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	f107 0120 	add.w	r1, r7, #32
 8001554:	440b      	add	r3, r1
 8001556:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800155a:	b29b      	uxth	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b29a      	uxth	r2, r3
 8001560:	7ffb      	ldrb	r3, [r7, #31]
 8001562:	b212      	sxth	r2, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	f107 0120 	add.w	r1, r7, #32
 800156a:	440b      	add	r3, r1
 800156c:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001570:	7ffb      	ldrb	r3, [r7, #31]
 8001572:	3301      	adds	r3, #1
 8001574:	77fb      	strb	r3, [r7, #31]
 8001576:	7ffb      	ldrb	r3, [r7, #31]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d9dc      	bls.n	8001536 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 800157c:	7dfb      	ldrb	r3, [r7, #23]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b0c      	cmp	r3, #12
 8001584:	d828      	bhi.n	80015d8 <LSM6DSL_GyroReadXYZAngRate+0xd8>
 8001586:	a201      	add	r2, pc, #4	; (adr r2, 800158c <LSM6DSL_GyroReadXYZAngRate+0x8c>)
 8001588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158c:	080015c1 	.word	0x080015c1
 8001590:	080015d9 	.word	0x080015d9
 8001594:	080015d9 	.word	0x080015d9
 8001598:	080015d9 	.word	0x080015d9
 800159c:	080015c7 	.word	0x080015c7
 80015a0:	080015d9 	.word	0x080015d9
 80015a4:	080015d9 	.word	0x080015d9
 80015a8:	080015d9 	.word	0x080015d9
 80015ac:	080015cd 	.word	0x080015cd
 80015b0:	080015d9 	.word	0x080015d9
 80015b4:	080015d9 	.word	0x080015d9
 80015b8:	080015d9 	.word	0x080015d9
 80015bc:	080015d3 	.word	0x080015d3
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 80015c0:	4b16      	ldr	r3, [pc, #88]	; (800161c <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 80015c2:	61bb      	str	r3, [r7, #24]
    break;
 80015c4:	e008      	b.n	80015d8 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 80015c6:	4b16      	ldr	r3, [pc, #88]	; (8001620 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 80015c8:	61bb      	str	r3, [r7, #24]
    break;
 80015ca:	e005      	b.n	80015d8 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 80015cc:	4b15      	ldr	r3, [pc, #84]	; (8001624 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 80015ce:	61bb      	str	r3, [r7, #24]
    break;
 80015d0:	e002      	b.n	80015d8 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <LSM6DSL_GyroReadXYZAngRate+0x128>)
 80015d4:	61bb      	str	r3, [r7, #24]
    break;    
 80015d6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80015d8:	2300      	movs	r3, #0
 80015da:	77fb      	strb	r3, [r7, #31]
 80015dc:	e017      	b.n	800160e <LSM6DSL_GyroReadXYZAngRate+0x10e>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 80015de:	7ffb      	ldrb	r3, [r7, #31]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	f107 0220 	add.w	r2, r7, #32
 80015e6:	4413      	add	r3, r2
 80015e8:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80015ec:	ee07 3a90 	vmov	s15, r3
 80015f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f4:	7ffb      	ldrb	r3, [r7, #31]
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	4413      	add	r3, r2
 80015fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001604:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001608:	7ffb      	ldrb	r3, [r7, #31]
 800160a:	3301      	adds	r3, #1
 800160c:	77fb      	strb	r3, [r7, #31]
 800160e:	7ffb      	ldrb	r3, [r7, #31]
 8001610:	2b02      	cmp	r3, #2
 8001612:	d9e4      	bls.n	80015de <LSM6DSL_GyroReadXYZAngRate+0xde>
  }
}
 8001614:	bf00      	nop
 8001616:	3720      	adds	r7, #32
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	410c0000 	.word	0x410c0000
 8001620:	418c0000 	.word	0x418c0000
 8001624:	420c0000 	.word	0x420c0000
 8001628:	428c0000 	.word	0x428c0000

0800162c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001636:	2003      	movs	r0, #3
 8001638:	f000 f95e 	bl	80018f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800163c:	2000      	movs	r0, #0
 800163e:	f000 f80d 	bl	800165c <HAL_InitTick>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	71fb      	strb	r3, [r7, #7]
 800164c:	e001      	b.n	8001652 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800164e:	f003 fc91 	bl	8004f74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001652:	79fb      	ldrb	r3, [r7, #7]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001664:	2300      	movs	r3, #0
 8001666:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <HAL_InitTick+0x6c>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d023      	beq.n	80016b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001670:	4b16      	ldr	r3, [pc, #88]	; (80016cc <HAL_InitTick+0x70>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <HAL_InitTick+0x6c>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	4619      	mov	r1, r3
 800167a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001682:	fbb2 f3f3 	udiv	r3, r2, r3
 8001686:	4618      	mov	r0, r3
 8001688:	f000 f96b 	bl	8001962 <HAL_SYSTICK_Config>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10f      	bne.n	80016b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b0f      	cmp	r3, #15
 8001696:	d809      	bhi.n	80016ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001698:	2200      	movs	r2, #0
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016a0:	f000 f935 	bl	800190e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016a4:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <HAL_InitTick+0x74>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	e007      	b.n	80016bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	73fb      	strb	r3, [r7, #15]
 80016b0:	e004      	b.n	80016bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	73fb      	strb	r3, [r7, #15]
 80016b6:	e001      	b.n	80016bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200000c8 	.word	0x200000c8
 80016cc:	200000cc 	.word	0x200000cc
 80016d0:	200000c4 	.word	0x200000c4

080016d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_IncTick+0x20>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_IncTick+0x24>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <HAL_IncTick+0x24>)
 80016e6:	6013      	str	r3, [r2, #0]
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	200000c8 	.word	0x200000c8
 80016f8:	200002a8 	.word	0x200002a8

080016fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <HAL_GetTick+0x14>)
 8001702:	681b      	ldr	r3, [r3, #0]
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	200002a8 	.word	0x200002a8

08001714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800171c:	f7ff ffee 	bl	80016fc <HAL_GetTick>
 8001720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800172c:	d005      	beq.n	800173a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_Delay+0x40>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	461a      	mov	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4413      	add	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800173a:	bf00      	nop
 800173c:	f7ff ffde 	bl	80016fc <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	429a      	cmp	r2, r3
 800174a:	d8f7      	bhi.n	800173c <HAL_Delay+0x28>
  {
  }
}
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	200000c8 	.word	0x200000c8

08001758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001774:	4013      	ands	r3, r2
 8001776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178a:	4a04      	ldr	r2, [pc, #16]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	60d3      	str	r3, [r2, #12]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <__NVIC_GetPriorityGrouping+0x18>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	f003 0307 	and.w	r3, r3, #7
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	db0b      	blt.n	80017e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	f003 021f 	and.w	r2, r3, #31
 80017d4:	4907      	ldr	r1, [pc, #28]	; (80017f4 <__NVIC_EnableIRQ+0x38>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	2001      	movs	r0, #1
 80017de:	fa00 f202 	lsl.w	r2, r0, r2
 80017e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000e100 	.word	0xe000e100

080017f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	2b00      	cmp	r3, #0
 800180a:	db0a      	blt.n	8001822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	490c      	ldr	r1, [pc, #48]	; (8001844 <__NVIC_SetPriority+0x4c>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	0112      	lsls	r2, r2, #4
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	440b      	add	r3, r1
 800181c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001820:	e00a      	b.n	8001838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4908      	ldr	r1, [pc, #32]	; (8001848 <__NVIC_SetPriority+0x50>)
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	3b04      	subs	r3, #4
 8001830:	0112      	lsls	r2, r2, #4
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	440b      	add	r3, r1
 8001836:	761a      	strb	r2, [r3, #24]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000e100 	.word	0xe000e100
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	; 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f1c3 0307 	rsb	r3, r3, #7
 8001866:	2b04      	cmp	r3, #4
 8001868:	bf28      	it	cs
 800186a:	2304      	movcs	r3, #4
 800186c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3304      	adds	r3, #4
 8001872:	2b06      	cmp	r3, #6
 8001874:	d902      	bls.n	800187c <NVIC_EncodePriority+0x30>
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3b03      	subs	r3, #3
 800187a:	e000      	b.n	800187e <NVIC_EncodePriority+0x32>
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43da      	mvns	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	401a      	ands	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001894:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	43d9      	mvns	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	4313      	orrs	r3, r2
         );
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3724      	adds	r7, #36	; 0x24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c4:	d301      	bcc.n	80018ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00f      	b.n	80018ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ca:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <SysTick_Config+0x40>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d2:	210f      	movs	r1, #15
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018d8:	f7ff ff8e 	bl	80017f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <SysTick_Config+0x40>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e2:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <SysTick_Config+0x40>)
 80018e4:	2207      	movs	r2, #7
 80018e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	e000e010 	.word	0xe000e010

080018f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff29 	bl	8001758 <__NVIC_SetPriorityGrouping>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	4603      	mov	r3, r0
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001920:	f7ff ff3e 	bl	80017a0 <__NVIC_GetPriorityGrouping>
 8001924:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	6978      	ldr	r0, [r7, #20]
 800192c:	f7ff ff8e 	bl	800184c <NVIC_EncodePriority>
 8001930:	4602      	mov	r2, r0
 8001932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff5d 	bl	80017f8 <__NVIC_SetPriority>
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff31 	bl	80017bc <__NVIC_EnableIRQ>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ffa2 	bl	80018b4 <SysTick_Config>
 8001970:	4603      	mov	r3, r0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800197c:	b480      	push	{r7}
 800197e:	b087      	sub	sp, #28
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800198a:	e17f      	b.n	8001c8c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	2101      	movs	r1, #1
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	fa01 f303 	lsl.w	r3, r1, r3
 8001998:	4013      	ands	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 8171 	beq.w	8001c86 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d00b      	beq.n	80019c4 <HAL_GPIO_Init+0x48>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d007      	beq.n	80019c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019b8:	2b11      	cmp	r3, #17
 80019ba:	d003      	beq.n	80019c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b12      	cmp	r3, #18
 80019c2:	d130      	bne.n	8001a26 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019fa:	2201      	movs	r2, #1
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	091b      	lsrs	r3, r3, #4
 8001a10:	f003 0201 	and.w	r2, r3, #1
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d118      	bne.n	8001a64 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a38:	2201      	movs	r2, #1
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	08db      	lsrs	r3, r3, #3
 8001a4e:	f003 0201 	and.w	r2, r3, #1
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	2203      	movs	r2, #3
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x128>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b12      	cmp	r3, #18
 8001aa2:	d123      	bne.n	8001aec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	08da      	lsrs	r2, r3, #3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3208      	adds	r2, #8
 8001aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	220f      	movs	r2, #15
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	691a      	ldr	r2, [r3, #16]
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	08da      	lsrs	r2, r3, #3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3208      	adds	r2, #8
 8001ae6:	6939      	ldr	r1, [r7, #16]
 8001ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	2203      	movs	r2, #3
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0203 	and.w	r2, r3, #3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 80ac 	beq.w	8001c86 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2e:	4b5e      	ldr	r3, [pc, #376]	; (8001ca8 <HAL_GPIO_Init+0x32c>)
 8001b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b32:	4a5d      	ldr	r2, [pc, #372]	; (8001ca8 <HAL_GPIO_Init+0x32c>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6613      	str	r3, [r2, #96]	; 0x60
 8001b3a:	4b5b      	ldr	r3, [pc, #364]	; (8001ca8 <HAL_GPIO_Init+0x32c>)
 8001b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b46:	4a59      	ldr	r2, [pc, #356]	; (8001cac <HAL_GPIO_Init+0x330>)
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	089b      	lsrs	r3, r3, #2
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b52:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	220f      	movs	r2, #15
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b70:	d025      	beq.n	8001bbe <HAL_GPIO_Init+0x242>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4e      	ldr	r2, [pc, #312]	; (8001cb0 <HAL_GPIO_Init+0x334>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d01f      	beq.n	8001bba <HAL_GPIO_Init+0x23e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4d      	ldr	r2, [pc, #308]	; (8001cb4 <HAL_GPIO_Init+0x338>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d019      	beq.n	8001bb6 <HAL_GPIO_Init+0x23a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4c      	ldr	r2, [pc, #304]	; (8001cb8 <HAL_GPIO_Init+0x33c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d013      	beq.n	8001bb2 <HAL_GPIO_Init+0x236>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4b      	ldr	r2, [pc, #300]	; (8001cbc <HAL_GPIO_Init+0x340>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d00d      	beq.n	8001bae <HAL_GPIO_Init+0x232>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4a      	ldr	r2, [pc, #296]	; (8001cc0 <HAL_GPIO_Init+0x344>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d007      	beq.n	8001baa <HAL_GPIO_Init+0x22e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a49      	ldr	r2, [pc, #292]	; (8001cc4 <HAL_GPIO_Init+0x348>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d101      	bne.n	8001ba6 <HAL_GPIO_Init+0x22a>
 8001ba2:	2306      	movs	r3, #6
 8001ba4:	e00c      	b.n	8001bc0 <HAL_GPIO_Init+0x244>
 8001ba6:	2307      	movs	r3, #7
 8001ba8:	e00a      	b.n	8001bc0 <HAL_GPIO_Init+0x244>
 8001baa:	2305      	movs	r3, #5
 8001bac:	e008      	b.n	8001bc0 <HAL_GPIO_Init+0x244>
 8001bae:	2304      	movs	r3, #4
 8001bb0:	e006      	b.n	8001bc0 <HAL_GPIO_Init+0x244>
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e004      	b.n	8001bc0 <HAL_GPIO_Init+0x244>
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	e002      	b.n	8001bc0 <HAL_GPIO_Init+0x244>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <HAL_GPIO_Init+0x244>
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	f002 0203 	and.w	r2, r2, #3
 8001bc6:	0092      	lsls	r2, r2, #2
 8001bc8:	4093      	lsls	r3, r2
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bd0:	4936      	ldr	r1, [pc, #216]	; (8001cac <HAL_GPIO_Init+0x330>)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	089b      	lsrs	r3, r3, #2
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001bde:	4b3a      	ldr	r3, [pc, #232]	; (8001cc8 <HAL_GPIO_Init+0x34c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c02:	4a31      	ldr	r2, [pc, #196]	; (8001cc8 <HAL_GPIO_Init+0x34c>)
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001c08:	4b2f      	ldr	r3, [pc, #188]	; (8001cc8 <HAL_GPIO_Init+0x34c>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c2c:	4a26      	ldr	r2, [pc, #152]	; (8001cc8 <HAL_GPIO_Init+0x34c>)
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c32:	4b25      	ldr	r3, [pc, #148]	; (8001cc8 <HAL_GPIO_Init+0x34c>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c56:	4a1c      	ldr	r2, [pc, #112]	; (8001cc8 <HAL_GPIO_Init+0x34c>)
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c5c:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <HAL_GPIO_Init+0x34c>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c80:	4a11      	ldr	r2, [pc, #68]	; (8001cc8 <HAL_GPIO_Init+0x34c>)
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	fa22 f303 	lsr.w	r3, r2, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f47f ae78 	bne.w	800198c <HAL_GPIO_Init+0x10>
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	371c      	adds	r7, #28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40010000 	.word	0x40010000
 8001cb0:	48000400 	.word	0x48000400
 8001cb4:	48000800 	.word	0x48000800
 8001cb8:	48000c00 	.word	0x48000c00
 8001cbc:	48001000 	.word	0x48001000
 8001cc0:	48001400 	.word	0x48001400
 8001cc4:	48001800 	.word	0x48001800
 8001cc8:	40010400 	.word	0x40010400

08001ccc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b087      	sub	sp, #28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001cda:	e0cd      	b.n	8001e78 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001cdc:	2201      	movs	r2, #1
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 80c0 	beq.w	8001e72 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001cf2:	4a68      	ldr	r2, [pc, #416]	; (8001e94 <HAL_GPIO_DeInit+0x1c8>)
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	089b      	lsrs	r3, r3, #2
 8001cf8:	3302      	adds	r3, #2
 8001cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfe:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	220f      	movs	r2, #15
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	4013      	ands	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d1a:	d025      	beq.n	8001d68 <HAL_GPIO_DeInit+0x9c>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a5e      	ldr	r2, [pc, #376]	; (8001e98 <HAL_GPIO_DeInit+0x1cc>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d01f      	beq.n	8001d64 <HAL_GPIO_DeInit+0x98>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a5d      	ldr	r2, [pc, #372]	; (8001e9c <HAL_GPIO_DeInit+0x1d0>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d019      	beq.n	8001d60 <HAL_GPIO_DeInit+0x94>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a5c      	ldr	r2, [pc, #368]	; (8001ea0 <HAL_GPIO_DeInit+0x1d4>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d013      	beq.n	8001d5c <HAL_GPIO_DeInit+0x90>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a5b      	ldr	r2, [pc, #364]	; (8001ea4 <HAL_GPIO_DeInit+0x1d8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d00d      	beq.n	8001d58 <HAL_GPIO_DeInit+0x8c>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a5a      	ldr	r2, [pc, #360]	; (8001ea8 <HAL_GPIO_DeInit+0x1dc>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d007      	beq.n	8001d54 <HAL_GPIO_DeInit+0x88>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a59      	ldr	r2, [pc, #356]	; (8001eac <HAL_GPIO_DeInit+0x1e0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d101      	bne.n	8001d50 <HAL_GPIO_DeInit+0x84>
 8001d4c:	2306      	movs	r3, #6
 8001d4e:	e00c      	b.n	8001d6a <HAL_GPIO_DeInit+0x9e>
 8001d50:	2307      	movs	r3, #7
 8001d52:	e00a      	b.n	8001d6a <HAL_GPIO_DeInit+0x9e>
 8001d54:	2305      	movs	r3, #5
 8001d56:	e008      	b.n	8001d6a <HAL_GPIO_DeInit+0x9e>
 8001d58:	2304      	movs	r3, #4
 8001d5a:	e006      	b.n	8001d6a <HAL_GPIO_DeInit+0x9e>
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e004      	b.n	8001d6a <HAL_GPIO_DeInit+0x9e>
 8001d60:	2302      	movs	r3, #2
 8001d62:	e002      	b.n	8001d6a <HAL_GPIO_DeInit+0x9e>
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <HAL_GPIO_DeInit+0x9e>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	f002 0203 	and.w	r2, r2, #3
 8001d70:	0092      	lsls	r2, r2, #2
 8001d72:	4093      	lsls	r3, r2
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d132      	bne.n	8001de0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001d7a:	4b4d      	ldr	r3, [pc, #308]	; (8001eb0 <HAL_GPIO_DeInit+0x1e4>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	494b      	ldr	r1, [pc, #300]	; (8001eb0 <HAL_GPIO_DeInit+0x1e4>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001d88:	4b49      	ldr	r3, [pc, #292]	; (8001eb0 <HAL_GPIO_DeInit+0x1e4>)
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	4947      	ldr	r1, [pc, #284]	; (8001eb0 <HAL_GPIO_DeInit+0x1e4>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001d96:	4b46      	ldr	r3, [pc, #280]	; (8001eb0 <HAL_GPIO_DeInit+0x1e4>)
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	4944      	ldr	r1, [pc, #272]	; (8001eb0 <HAL_GPIO_DeInit+0x1e4>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001da4:	4b42      	ldr	r3, [pc, #264]	; (8001eb0 <HAL_GPIO_DeInit+0x1e4>)
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	43db      	mvns	r3, r3
 8001dac:	4940      	ldr	r1, [pc, #256]	; (8001eb0 <HAL_GPIO_DeInit+0x1e4>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	220f      	movs	r2, #15
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001dc2:	4a34      	ldr	r2, [pc, #208]	; (8001e94 <HAL_GPIO_DeInit+0x1c8>)
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	089b      	lsrs	r3, r3, #2
 8001dc8:	3302      	adds	r3, #2
 8001dca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	43da      	mvns	r2, r3
 8001dd2:	4830      	ldr	r0, [pc, #192]	; (8001e94 <HAL_GPIO_DeInit+0x1c8>)
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	400a      	ands	r2, r1
 8001dda:	3302      	adds	r3, #2
 8001ddc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	2103      	movs	r1, #3
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	08da      	lsrs	r2, r3, #3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3208      	adds	r2, #8
 8001dfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	220f      	movs	r2, #15
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	08d2      	lsrs	r2, r2, #3
 8001e14:	4019      	ands	r1, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3208      	adds	r2, #8
 8001e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	2103      	movs	r1, #3
 8001e28:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	401a      	ands	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	2101      	movs	r1, #1
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	401a      	ands	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	2103      	movs	r1, #3
 8001e52:	fa01 f303 	lsl.w	r3, r1, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	401a      	ands	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e62:	2101      	movs	r1, #1
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	3301      	adds	r3, #1
 8001e76:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f47f af2b 	bne.w	8001cdc <HAL_GPIO_DeInit+0x10>
  }
}
 8001e86:	bf00      	nop
 8001e88:	371c      	adds	r7, #28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40010000 	.word	0x40010000
 8001e98:	48000400 	.word	0x48000400
 8001e9c:	48000800 	.word	0x48000800
 8001ea0:	48000c00 	.word	0x48000c00
 8001ea4:	48001000 	.word	0x48001000
 8001ea8:	48001400 	.word	0x48001400
 8001eac:	48001800 	.word	0x48001800
 8001eb0:	40010400 	.word	0x40010400

08001eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	807b      	strh	r3, [r7, #2]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ec4:	787b      	ldrb	r3, [r7, #1]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eca:	887a      	ldrh	r2, [r7, #2]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ed0:	e002      	b.n	8001ed8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ed2:	887a      	ldrh	r2, [r7, #2]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001eee:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ef0:	695a      	ldr	r2, [r3, #20]
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d006      	beq.n	8001f08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001efa:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f00:	88fb      	ldrh	r3, [r7, #6]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f003 f810 	bl	8004f28 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40010400 	.word	0x40010400

08001f14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e081      	b.n	800202a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d106      	bne.n	8001f40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f003 f83e 	bl	8004fbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2224      	movs	r2, #36	; 0x24
 8001f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0201 	bic.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d107      	bne.n	8001f8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	e006      	b.n	8001f9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d104      	bne.n	8001fae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fc0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fd0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691a      	ldr	r2, [r3, #16]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	ea42 0103 	orr.w	r1, r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	021a      	lsls	r2, r3, #8
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69d9      	ldr	r1, [r3, #28]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a1a      	ldr	r2, [r3, #32]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0201 	orr.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2220      	movs	r2, #32
 8002016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e021      	b.n	8002088 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2224      	movs	r2, #36	; 0x24
 8002048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0201 	bic.w	r2, r2, #1
 800205a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f002 fff1 	bl	8005044 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af02      	add	r7, sp, #8
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	4608      	mov	r0, r1
 800209a:	4611      	mov	r1, r2
 800209c:	461a      	mov	r2, r3
 800209e:	4603      	mov	r3, r0
 80020a0:	817b      	strh	r3, [r7, #10]
 80020a2:	460b      	mov	r3, r1
 80020a4:	813b      	strh	r3, [r7, #8]
 80020a6:	4613      	mov	r3, r2
 80020a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b20      	cmp	r3, #32
 80020b4:	f040 80f9 	bne.w	80022aa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020b8:	6a3b      	ldr	r3, [r7, #32]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d002      	beq.n	80020c4 <HAL_I2C_Mem_Write+0x34>
 80020be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d105      	bne.n	80020d0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0ed      	b.n	80022ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d101      	bne.n	80020de <HAL_I2C_Mem_Write+0x4e>
 80020da:	2302      	movs	r3, #2
 80020dc:	e0e6      	b.n	80022ac <HAL_I2C_Mem_Write+0x21c>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020e6:	f7ff fb09 	bl	80016fc <HAL_GetTick>
 80020ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	2319      	movs	r3, #25
 80020f2:	2201      	movs	r2, #1
 80020f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f000 fac3 	bl	8002684 <I2C_WaitOnFlagUntilTimeout>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e0d1      	b.n	80022ac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2221      	movs	r2, #33	; 0x21
 800210c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2240      	movs	r2, #64	; 0x40
 8002114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6a3a      	ldr	r2, [r7, #32]
 8002122:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002128:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002130:	88f8      	ldrh	r0, [r7, #6]
 8002132:	893a      	ldrh	r2, [r7, #8]
 8002134:	8979      	ldrh	r1, [r7, #10]
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	9301      	str	r3, [sp, #4]
 800213a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	4603      	mov	r3, r0
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 f9d3 	bl	80024ec <I2C_RequestMemoryWrite>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0a9      	b.n	80022ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215c:	b29b      	uxth	r3, r3
 800215e:	2bff      	cmp	r3, #255	; 0xff
 8002160:	d90e      	bls.n	8002180 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	22ff      	movs	r2, #255	; 0xff
 8002166:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216c:	b2da      	uxtb	r2, r3
 800216e:	8979      	ldrh	r1, [r7, #10]
 8002170:	2300      	movs	r3, #0
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f000 fba5 	bl	80028c8 <I2C_TransferConfig>
 800217e:	e00f      	b.n	80021a0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002184:	b29a      	uxth	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218e:	b2da      	uxtb	r2, r3
 8002190:	8979      	ldrh	r1, [r7, #10]
 8002192:	2300      	movs	r3, #0
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f000 fb94 	bl	80028c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 faad 	bl	8002704 <I2C_WaitOnTXISFlagUntilTimeout>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e07b      	b.n	80022ac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	781a      	ldrb	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	1c5a      	adds	r2, r3, #1
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021dc:	3b01      	subs	r3, #1
 80021de:	b29a      	uxth	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d034      	beq.n	8002258 <HAL_I2C_Mem_Write+0x1c8>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d130      	bne.n	8002258 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fc:	2200      	movs	r2, #0
 80021fe:	2180      	movs	r1, #128	; 0x80
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f000 fa3f 	bl	8002684 <I2C_WaitOnFlagUntilTimeout>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e04d      	b.n	80022ac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002214:	b29b      	uxth	r3, r3
 8002216:	2bff      	cmp	r3, #255	; 0xff
 8002218:	d90e      	bls.n	8002238 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	22ff      	movs	r2, #255	; 0xff
 800221e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002224:	b2da      	uxtb	r2, r3
 8002226:	8979      	ldrh	r1, [r7, #10]
 8002228:	2300      	movs	r3, #0
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 fb49 	bl	80028c8 <I2C_TransferConfig>
 8002236:	e00f      	b.n	8002258 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223c:	b29a      	uxth	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002246:	b2da      	uxtb	r2, r3
 8002248:	8979      	ldrh	r1, [r7, #10]
 800224a:	2300      	movs	r3, #0
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 fb38 	bl	80028c8 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225c:	b29b      	uxth	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d19e      	bne.n	80021a0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 fa8c 	bl	8002784 <I2C_WaitOnSTOPFlagUntilTimeout>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e01a      	b.n	80022ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2220      	movs	r2, #32
 800227c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6859      	ldr	r1, [r3, #4]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <HAL_I2C_Mem_Write+0x224>)
 800228a:	400b      	ands	r3, r1
 800228c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2220      	movs	r2, #32
 8002292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	e000      	b.n	80022ac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80022aa:	2302      	movs	r3, #2
  }
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	fe00e800 	.word	0xfe00e800

080022b8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af02      	add	r7, sp, #8
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	4608      	mov	r0, r1
 80022c2:	4611      	mov	r1, r2
 80022c4:	461a      	mov	r2, r3
 80022c6:	4603      	mov	r3, r0
 80022c8:	817b      	strh	r3, [r7, #10]
 80022ca:	460b      	mov	r3, r1
 80022cc:	813b      	strh	r3, [r7, #8]
 80022ce:	4613      	mov	r3, r2
 80022d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b20      	cmp	r3, #32
 80022dc:	f040 80fd 	bne.w	80024da <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <HAL_I2C_Mem_Read+0x34>
 80022e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d105      	bne.n	80022f8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0f1      	b.n	80024dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_I2C_Mem_Read+0x4e>
 8002302:	2302      	movs	r3, #2
 8002304:	e0ea      	b.n	80024dc <HAL_I2C_Mem_Read+0x224>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800230e:	f7ff f9f5 	bl	80016fc <HAL_GetTick>
 8002312:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	2319      	movs	r3, #25
 800231a:	2201      	movs	r2, #1
 800231c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f000 f9af 	bl	8002684 <I2C_WaitOnFlagUntilTimeout>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0d5      	b.n	80024dc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2222      	movs	r2, #34	; 0x22
 8002334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2240      	movs	r2, #64	; 0x40
 800233c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6a3a      	ldr	r2, [r7, #32]
 800234a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002350:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002358:	88f8      	ldrh	r0, [r7, #6]
 800235a:	893a      	ldrh	r2, [r7, #8]
 800235c:	8979      	ldrh	r1, [r7, #10]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	9301      	str	r3, [sp, #4]
 8002362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	4603      	mov	r3, r0
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 f913 	bl	8002594 <I2C_RequestMemoryRead>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d005      	beq.n	8002380 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0ad      	b.n	80024dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002384:	b29b      	uxth	r3, r3
 8002386:	2bff      	cmp	r3, #255	; 0xff
 8002388:	d90e      	bls.n	80023a8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	22ff      	movs	r2, #255	; 0xff
 800238e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002394:	b2da      	uxtb	r2, r3
 8002396:	8979      	ldrh	r1, [r7, #10]
 8002398:	4b52      	ldr	r3, [pc, #328]	; (80024e4 <HAL_I2C_Mem_Read+0x22c>)
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 fa91 	bl	80028c8 <I2C_TransferConfig>
 80023a6:	e00f      	b.n	80023c8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	8979      	ldrh	r1, [r7, #10]
 80023ba:	4b4a      	ldr	r3, [pc, #296]	; (80024e4 <HAL_I2C_Mem_Read+0x22c>)
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 fa80 	bl	80028c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ce:	2200      	movs	r2, #0
 80023d0:	2104      	movs	r1, #4
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 f956 	bl	8002684 <I2C_WaitOnFlagUntilTimeout>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e07c      	b.n	80024dc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240a:	b29b      	uxth	r3, r3
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002418:	b29b      	uxth	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d034      	beq.n	8002488 <HAL_I2C_Mem_Read+0x1d0>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002422:	2b00      	cmp	r3, #0
 8002424:	d130      	bne.n	8002488 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242c:	2200      	movs	r2, #0
 800242e:	2180      	movs	r1, #128	; 0x80
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 f927 	bl	8002684 <I2C_WaitOnFlagUntilTimeout>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e04d      	b.n	80024dc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002444:	b29b      	uxth	r3, r3
 8002446:	2bff      	cmp	r3, #255	; 0xff
 8002448:	d90e      	bls.n	8002468 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	22ff      	movs	r2, #255	; 0xff
 800244e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002454:	b2da      	uxtb	r2, r3
 8002456:	8979      	ldrh	r1, [r7, #10]
 8002458:	2300      	movs	r3, #0
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 fa31 	bl	80028c8 <I2C_TransferConfig>
 8002466:	e00f      	b.n	8002488 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002476:	b2da      	uxtb	r2, r3
 8002478:	8979      	ldrh	r1, [r7, #10]
 800247a:	2300      	movs	r3, #0
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 fa20 	bl	80028c8 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248c:	b29b      	uxth	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d19a      	bne.n	80023c8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 f974 	bl	8002784 <I2C_WaitOnSTOPFlagUntilTimeout>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e01a      	b.n	80024dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2220      	movs	r2, #32
 80024ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6859      	ldr	r1, [r3, #4]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <HAL_I2C_Mem_Read+0x230>)
 80024ba:	400b      	ands	r3, r1
 80024bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2220      	movs	r2, #32
 80024c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	e000      	b.n	80024dc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80024da:	2302      	movs	r3, #2
  }
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	80002400 	.word	0x80002400
 80024e8:	fe00e800 	.word	0xfe00e800

080024ec <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	4608      	mov	r0, r1
 80024f6:	4611      	mov	r1, r2
 80024f8:	461a      	mov	r2, r3
 80024fa:	4603      	mov	r3, r0
 80024fc:	817b      	strh	r3, [r7, #10]
 80024fe:	460b      	mov	r3, r1
 8002500:	813b      	strh	r3, [r7, #8]
 8002502:	4613      	mov	r3, r2
 8002504:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002506:	88fb      	ldrh	r3, [r7, #6]
 8002508:	b2da      	uxtb	r2, r3
 800250a:	8979      	ldrh	r1, [r7, #10]
 800250c:	4b20      	ldr	r3, [pc, #128]	; (8002590 <I2C_RequestMemoryWrite+0xa4>)
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f9d7 	bl	80028c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800251a:	69fa      	ldr	r2, [r7, #28]
 800251c:	69b9      	ldr	r1, [r7, #24]
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 f8f0 	bl	8002704 <I2C_WaitOnTXISFlagUntilTimeout>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e02c      	b.n	8002588 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d105      	bne.n	8002540 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002534:	893b      	ldrh	r3, [r7, #8]
 8002536:	b2da      	uxtb	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	629a      	str	r2, [r3, #40]	; 0x28
 800253e:	e015      	b.n	800256c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002540:	893b      	ldrh	r3, [r7, #8]
 8002542:	0a1b      	lsrs	r3, r3, #8
 8002544:	b29b      	uxth	r3, r3
 8002546:	b2da      	uxtb	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800254e:	69fa      	ldr	r2, [r7, #28]
 8002550:	69b9      	ldr	r1, [r7, #24]
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 f8d6 	bl	8002704 <I2C_WaitOnTXISFlagUntilTimeout>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e012      	b.n	8002588 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002562:	893b      	ldrh	r3, [r7, #8]
 8002564:	b2da      	uxtb	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	2200      	movs	r2, #0
 8002574:	2180      	movs	r1, #128	; 0x80
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 f884 	bl	8002684 <I2C_WaitOnFlagUntilTimeout>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	80002000 	.word	0x80002000

08002594 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af02      	add	r7, sp, #8
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	4608      	mov	r0, r1
 800259e:	4611      	mov	r1, r2
 80025a0:	461a      	mov	r2, r3
 80025a2:	4603      	mov	r3, r0
 80025a4:	817b      	strh	r3, [r7, #10]
 80025a6:	460b      	mov	r3, r1
 80025a8:	813b      	strh	r3, [r7, #8]
 80025aa:	4613      	mov	r3, r2
 80025ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80025ae:	88fb      	ldrh	r3, [r7, #6]
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	8979      	ldrh	r1, [r7, #10]
 80025b4:	4b20      	ldr	r3, [pc, #128]	; (8002638 <I2C_RequestMemoryRead+0xa4>)
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	2300      	movs	r3, #0
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 f984 	bl	80028c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	69b9      	ldr	r1, [r7, #24]
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 f89d 	bl	8002704 <I2C_WaitOnTXISFlagUntilTimeout>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e02c      	b.n	800262e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025d4:	88fb      	ldrh	r3, [r7, #6]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d105      	bne.n	80025e6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025da:	893b      	ldrh	r3, [r7, #8]
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	629a      	str	r2, [r3, #40]	; 0x28
 80025e4:	e015      	b.n	8002612 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80025e6:	893b      	ldrh	r3, [r7, #8]
 80025e8:	0a1b      	lsrs	r3, r3, #8
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025f4:	69fa      	ldr	r2, [r7, #28]
 80025f6:	69b9      	ldr	r1, [r7, #24]
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 f883 	bl	8002704 <I2C_WaitOnTXISFlagUntilTimeout>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e012      	b.n	800262e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002608:	893b      	ldrh	r3, [r7, #8]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	2200      	movs	r2, #0
 800261a:	2140      	movs	r1, #64	; 0x40
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 f831 	bl	8002684 <I2C_WaitOnFlagUntilTimeout>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e000      	b.n	800262e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	80002000 	.word	0x80002000

0800263c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b02      	cmp	r3, #2
 8002650:	d103      	bne.n	800265a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2200      	movs	r2, #0
 8002658:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b01      	cmp	r3, #1
 8002666:	d007      	beq.n	8002678 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699a      	ldr	r2, [r3, #24]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0201 	orr.w	r2, r2, #1
 8002676:	619a      	str	r2, [r3, #24]
  }
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	603b      	str	r3, [r7, #0]
 8002690:	4613      	mov	r3, r2
 8002692:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002694:	e022      	b.n	80026dc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800269c:	d01e      	beq.n	80026dc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800269e:	f7ff f82d 	bl	80016fc <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d302      	bcc.n	80026b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d113      	bne.n	80026dc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b8:	f043 0220 	orr.w	r2, r3, #32
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2220      	movs	r2, #32
 80026c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e00f      	b.n	80026fc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699a      	ldr	r2, [r3, #24]
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	4013      	ands	r3, r2
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	bf0c      	ite	eq
 80026ec:	2301      	moveq	r3, #1
 80026ee:	2300      	movne	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	461a      	mov	r2, r3
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d0cd      	beq.n	8002696 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002710:	e02c      	b.n	800276c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68b9      	ldr	r1, [r7, #8]
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f870 	bl	80027fc <I2C_IsAcknowledgeFailed>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e02a      	b.n	800277c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800272c:	d01e      	beq.n	800276c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800272e:	f7fe ffe5 	bl	80016fc <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	429a      	cmp	r2, r3
 800273c:	d302      	bcc.n	8002744 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d113      	bne.n	800276c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002748:	f043 0220 	orr.w	r2, r3, #32
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2220      	movs	r2, #32
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e007      	b.n	800277c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b02      	cmp	r3, #2
 8002778:	d1cb      	bne.n	8002712 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002790:	e028      	b.n	80027e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 f830 	bl	80027fc <I2C_IsAcknowledgeFailed>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e026      	b.n	80027f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a6:	f7fe ffa9 	bl	80016fc <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d302      	bcc.n	80027bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d113      	bne.n	80027e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c0:	f043 0220 	orr.w	r2, r3, #32
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2220      	movs	r2, #32
 80027cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e007      	b.n	80027f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	f003 0320 	and.w	r3, r3, #32
 80027ee:	2b20      	cmp	r3, #32
 80027f0:	d1cf      	bne.n	8002792 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	f003 0310 	and.w	r3, r3, #16
 8002812:	2b10      	cmp	r3, #16
 8002814:	d151      	bne.n	80028ba <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002816:	e022      	b.n	800285e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800281e:	d01e      	beq.n	800285e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002820:	f7fe ff6c 	bl	80016fc <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	429a      	cmp	r2, r3
 800282e:	d302      	bcc.n	8002836 <I2C_IsAcknowledgeFailed+0x3a>
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d113      	bne.n	800285e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	f043 0220 	orr.w	r2, r3, #32
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e02e      	b.n	80028bc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	f003 0320 	and.w	r3, r3, #32
 8002868:	2b20      	cmp	r3, #32
 800286a:	d1d5      	bne.n	8002818 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2210      	movs	r2, #16
 8002872:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2220      	movs	r2, #32
 800287a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f7ff fedd 	bl	800263c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6859      	ldr	r1, [r3, #4]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <I2C_IsAcknowledgeFailed+0xc8>)
 800288e:	400b      	ands	r3, r1
 8002890:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	f043 0204 	orr.w	r2, r3, #4
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2220      	movs	r2, #32
 80028a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	fe00e800 	.word	0xfe00e800

080028c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	607b      	str	r3, [r7, #4]
 80028d2:	460b      	mov	r3, r1
 80028d4:	817b      	strh	r3, [r7, #10]
 80028d6:	4613      	mov	r3, r2
 80028d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	0d5b      	lsrs	r3, r3, #21
 80028e4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80028e8:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <I2C_TransferConfig+0x58>)
 80028ea:	430b      	orrs	r3, r1
 80028ec:	43db      	mvns	r3, r3
 80028ee:	ea02 0103 	and.w	r1, r2, r3
 80028f2:	897b      	ldrh	r3, [r7, #10]
 80028f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028f8:	7a7b      	ldrb	r3, [r7, #9]
 80028fa:	041b      	lsls	r3, r3, #16
 80028fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002900:	431a      	orrs	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	431a      	orrs	r2, r3
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	431a      	orrs	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002912:	bf00      	nop
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	03ff63ff 	.word	0x03ff63ff

08002924 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b20      	cmp	r3, #32
 8002938:	d138      	bne.n	80029ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002944:	2302      	movs	r3, #2
 8002946:	e032      	b.n	80029ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2224      	movs	r2, #36	; 0x24
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0201 	bic.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002976:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6819      	ldr	r1, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	e000      	b.n	80029ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029ac:	2302      	movs	r3, #2
  }
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b085      	sub	sp, #20
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	d139      	bne.n	8002a44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d101      	bne.n	80029de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029da:	2302      	movs	r3, #2
 80029dc:	e033      	b.n	8002a46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2224      	movs	r2, #36	; 0x24
 80029ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0201 	bic.w	r2, r2, #1
 80029fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	021b      	lsls	r3, r3, #8
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	e000      	b.n	8002a46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a44:	2302      	movs	r3, #2
  }
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
	...

08002a54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a58:	4b04      	ldr	r3, [pc, #16]	; (8002a6c <HAL_PWREx_GetVoltageRange+0x18>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40007000 	.word	0x40007000

08002a70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a7e:	d130      	bne.n	8002ae2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a80:	4b23      	ldr	r3, [pc, #140]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a8c:	d038      	beq.n	8002b00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a8e:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a96:	4a1e      	ldr	r2, [pc, #120]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a9c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a9e:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2232      	movs	r2, #50	; 0x32
 8002aa4:	fb02 f303 	mul.w	r3, r2, r3
 8002aa8:	4a1b      	ldr	r2, [pc, #108]	; (8002b18 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002aae:	0c9b      	lsrs	r3, r3, #18
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ab4:	e002      	b.n	8002abc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002abc:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac8:	d102      	bne.n	8002ad0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1f2      	bne.n	8002ab6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002adc:	d110      	bne.n	8002b00 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e00f      	b.n	8002b02 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ae2:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aee:	d007      	beq.n	8002b00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002af0:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002af8:	4a05      	ldr	r2, [pc, #20]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002afa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002afe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	40007000 	.word	0x40007000
 8002b14:	200000cc 	.word	0x200000cc
 8002b18:	431bde83 	.word	0x431bde83

08002b1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b088      	sub	sp, #32
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e3d4      	b.n	80032d8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b2e:	4ba1      	ldr	r3, [pc, #644]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 030c 	and.w	r3, r3, #12
 8002b36:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b38:	4b9e      	ldr	r3, [pc, #632]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 80e4 	beq.w	8002d18 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d007      	beq.n	8002b66 <HAL_RCC_OscConfig+0x4a>
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	2b0c      	cmp	r3, #12
 8002b5a:	f040 808b 	bne.w	8002c74 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	f040 8087 	bne.w	8002c74 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b66:	4b93      	ldr	r3, [pc, #588]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <HAL_RCC_OscConfig+0x62>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e3ac      	b.n	80032d8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1a      	ldr	r2, [r3, #32]
 8002b82:	4b8c      	ldr	r3, [pc, #560]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d004      	beq.n	8002b98 <HAL_RCC_OscConfig+0x7c>
 8002b8e:	4b89      	ldr	r3, [pc, #548]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b96:	e005      	b.n	8002ba4 <HAL_RCC_OscConfig+0x88>
 8002b98:	4b86      	ldr	r3, [pc, #536]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b9e:	091b      	lsrs	r3, r3, #4
 8002ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d223      	bcs.n	8002bf0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 fd3f 	bl	8003630 <RCC_SetFlashLatencyFromMSIRange>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e38d      	b.n	80032d8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bbc:	4b7d      	ldr	r3, [pc, #500]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a7c      	ldr	r2, [pc, #496]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002bc2:	f043 0308 	orr.w	r3, r3, #8
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	4b7a      	ldr	r3, [pc, #488]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	4977      	ldr	r1, [pc, #476]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bda:	4b76      	ldr	r3, [pc, #472]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	021b      	lsls	r3, r3, #8
 8002be8:	4972      	ldr	r1, [pc, #456]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	604b      	str	r3, [r1, #4]
 8002bee:	e025      	b.n	8002c3c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bf0:	4b70      	ldr	r3, [pc, #448]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a6f      	ldr	r2, [pc, #444]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002bf6:	f043 0308 	orr.w	r3, r3, #8
 8002bfa:	6013      	str	r3, [r2, #0]
 8002bfc:	4b6d      	ldr	r3, [pc, #436]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	496a      	ldr	r1, [pc, #424]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c0e:	4b69      	ldr	r3, [pc, #420]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	021b      	lsls	r3, r3, #8
 8002c1c:	4965      	ldr	r1, [pc, #404]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d109      	bne.n	8002c3c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 fcff 	bl	8003630 <RCC_SetFlashLatencyFromMSIRange>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e34d      	b.n	80032d8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c3c:	f000 fc36 	bl	80034ac <HAL_RCC_GetSysClockFreq>
 8002c40:	4601      	mov	r1, r0
 8002c42:	4b5c      	ldr	r3, [pc, #368]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	091b      	lsrs	r3, r3, #4
 8002c48:	f003 030f 	and.w	r3, r3, #15
 8002c4c:	4a5a      	ldr	r2, [pc, #360]	; (8002db8 <HAL_RCC_OscConfig+0x29c>)
 8002c4e:	5cd3      	ldrb	r3, [r2, r3]
 8002c50:	f003 031f 	and.w	r3, r3, #31
 8002c54:	fa21 f303 	lsr.w	r3, r1, r3
 8002c58:	4a58      	ldr	r2, [pc, #352]	; (8002dbc <HAL_RCC_OscConfig+0x2a0>)
 8002c5a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c5c:	4b58      	ldr	r3, [pc, #352]	; (8002dc0 <HAL_RCC_OscConfig+0x2a4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fe fcfb 	bl	800165c <HAL_InitTick>
 8002c66:	4603      	mov	r3, r0
 8002c68:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d052      	beq.n	8002d16 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	e331      	b.n	80032d8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d032      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c7c:	4b4d      	ldr	r3, [pc, #308]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a4c      	ldr	r2, [pc, #304]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c88:	f7fe fd38 	bl	80016fc <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c90:	f7fe fd34 	bl	80016fc <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e31a      	b.n	80032d8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ca2:	4b44      	ldr	r3, [pc, #272]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cae:	4b41      	ldr	r3, [pc, #260]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a40      	ldr	r2, [pc, #256]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002cb4:	f043 0308 	orr.w	r3, r3, #8
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	4b3e      	ldr	r3, [pc, #248]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	493b      	ldr	r1, [pc, #236]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ccc:	4b39      	ldr	r3, [pc, #228]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	021b      	lsls	r3, r3, #8
 8002cda:	4936      	ldr	r1, [pc, #216]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	604b      	str	r3, [r1, #4]
 8002ce0:	e01a      	b.n	8002d18 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ce2:	4b34      	ldr	r3, [pc, #208]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a33      	ldr	r2, [pc, #204]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002ce8:	f023 0301 	bic.w	r3, r3, #1
 8002cec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cee:	f7fe fd05 	bl	80016fc <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cf6:	f7fe fd01 	bl	80016fc <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e2e7      	b.n	80032d8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d08:	4b2a      	ldr	r3, [pc, #168]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1f0      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x1da>
 8002d14:	e000      	b.n	8002d18 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d16:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d074      	beq.n	8002e0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d005      	beq.n	8002d36 <HAL_RCC_OscConfig+0x21a>
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	2b0c      	cmp	r3, #12
 8002d2e:	d10e      	bne.n	8002d4e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2b03      	cmp	r3, #3
 8002d34:	d10b      	bne.n	8002d4e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d36:	4b1f      	ldr	r3, [pc, #124]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d064      	beq.n	8002e0c <HAL_RCC_OscConfig+0x2f0>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d160      	bne.n	8002e0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e2c4      	b.n	80032d8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d56:	d106      	bne.n	8002d66 <HAL_RCC_OscConfig+0x24a>
 8002d58:	4b16      	ldr	r3, [pc, #88]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a15      	ldr	r2, [pc, #84]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	e01d      	b.n	8002da2 <HAL_RCC_OscConfig+0x286>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d6e:	d10c      	bne.n	8002d8a <HAL_RCC_OscConfig+0x26e>
 8002d70:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a0f      	ldr	r2, [pc, #60]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002d76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a0c      	ldr	r2, [pc, #48]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d86:	6013      	str	r3, [r2, #0]
 8002d88:	e00b      	b.n	8002da2 <HAL_RCC_OscConfig+0x286>
 8002d8a:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a09      	ldr	r2, [pc, #36]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	4b07      	ldr	r3, [pc, #28]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a06      	ldr	r2, [pc, #24]	; (8002db4 <HAL_RCC_OscConfig+0x298>)
 8002d9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002da0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d01c      	beq.n	8002de4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002daa:	f7fe fca7 	bl	80016fc <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002db0:	e011      	b.n	8002dd6 <HAL_RCC_OscConfig+0x2ba>
 8002db2:	bf00      	nop
 8002db4:	40021000 	.word	0x40021000
 8002db8:	08005bf0 	.word	0x08005bf0
 8002dbc:	200000cc 	.word	0x200000cc
 8002dc0:	200000c4 	.word	0x200000c4
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc4:	f7fe fc9a 	bl	80016fc <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b64      	cmp	r3, #100	; 0x64
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e280      	b.n	80032d8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dd6:	4baf      	ldr	r3, [pc, #700]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x2a8>
 8002de2:	e014      	b.n	8002e0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de4:	f7fe fc8a 	bl	80016fc <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dec:	f7fe fc86 	bl	80016fc <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b64      	cmp	r3, #100	; 0x64
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e26c      	b.n	80032d8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dfe:	4ba5      	ldr	r3, [pc, #660]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x2d0>
 8002e0a:	e000      	b.n	8002e0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d060      	beq.n	8002edc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d005      	beq.n	8002e2c <HAL_RCC_OscConfig+0x310>
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	2b0c      	cmp	r3, #12
 8002e24:	d119      	bne.n	8002e5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d116      	bne.n	8002e5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e2c:	4b99      	ldr	r3, [pc, #612]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <HAL_RCC_OscConfig+0x328>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e249      	b.n	80032d8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e44:	4b93      	ldr	r3, [pc, #588]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	061b      	lsls	r3, r3, #24
 8002e52:	4990      	ldr	r1, [pc, #576]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e58:	e040      	b.n	8002edc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d023      	beq.n	8002eaa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e62:	4b8c      	ldr	r3, [pc, #560]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a8b      	ldr	r2, [pc, #556]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6e:	f7fe fc45 	bl	80016fc <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e76:	f7fe fc41 	bl	80016fc <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e227      	b.n	80032d8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e88:	4b82      	ldr	r3, [pc, #520]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f0      	beq.n	8002e76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e94:	4b7f      	ldr	r3, [pc, #508]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	061b      	lsls	r3, r3, #24
 8002ea2:	497c      	ldr	r1, [pc, #496]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	604b      	str	r3, [r1, #4]
 8002ea8:	e018      	b.n	8002edc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eaa:	4b7a      	ldr	r3, [pc, #488]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a79      	ldr	r2, [pc, #484]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb6:	f7fe fc21 	bl	80016fc <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ebe:	f7fe fc1d 	bl	80016fc <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e203      	b.n	80032d8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ed0:	4b70      	ldr	r3, [pc, #448]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1f0      	bne.n	8002ebe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d03c      	beq.n	8002f62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d01c      	beq.n	8002f2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ef0:	4b68      	ldr	r3, [pc, #416]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef6:	4a67      	ldr	r2, [pc, #412]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f00:	f7fe fbfc 	bl	80016fc <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f08:	f7fe fbf8 	bl	80016fc <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e1de      	b.n	80032d8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f1a:	4b5e      	ldr	r3, [pc, #376]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0ef      	beq.n	8002f08 <HAL_RCC_OscConfig+0x3ec>
 8002f28:	e01b      	b.n	8002f62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f2a:	4b5a      	ldr	r3, [pc, #360]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f30:	4a58      	ldr	r2, [pc, #352]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002f32:	f023 0301 	bic.w	r3, r3, #1
 8002f36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3a:	f7fe fbdf 	bl	80016fc <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f42:	f7fe fbdb 	bl	80016fc <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e1c1      	b.n	80032d8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f54:	4b4f      	ldr	r3, [pc, #316]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1ef      	bne.n	8002f42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 80a6 	beq.w	80030bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f70:	2300      	movs	r3, #0
 8002f72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f74:	4b47      	ldr	r3, [pc, #284]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10d      	bne.n	8002f9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f80:	4b44      	ldr	r3, [pc, #272]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f84:	4a43      	ldr	r2, [pc, #268]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f8c:	4b41      	ldr	r3, [pc, #260]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f9c:	4b3e      	ldr	r3, [pc, #248]	; (8003098 <HAL_RCC_OscConfig+0x57c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d118      	bne.n	8002fda <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fa8:	4b3b      	ldr	r3, [pc, #236]	; (8003098 <HAL_RCC_OscConfig+0x57c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a3a      	ldr	r2, [pc, #232]	; (8003098 <HAL_RCC_OscConfig+0x57c>)
 8002fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb4:	f7fe fba2 	bl	80016fc <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fbc:	f7fe fb9e 	bl	80016fc <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e184      	b.n	80032d8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fce:	4b32      	ldr	r3, [pc, #200]	; (8003098 <HAL_RCC_OscConfig+0x57c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d108      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x4d8>
 8002fe2:	4b2c      	ldr	r3, [pc, #176]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe8:	4a2a      	ldr	r2, [pc, #168]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ff2:	e024      	b.n	800303e <HAL_RCC_OscConfig+0x522>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b05      	cmp	r3, #5
 8002ffa:	d110      	bne.n	800301e <HAL_RCC_OscConfig+0x502>
 8002ffc:	4b25      	ldr	r3, [pc, #148]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8002ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003002:	4a24      	ldr	r2, [pc, #144]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8003004:	f043 0304 	orr.w	r3, r3, #4
 8003008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800300c:	4b21      	ldr	r3, [pc, #132]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 800300e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003012:	4a20      	ldr	r2, [pc, #128]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800301c:	e00f      	b.n	800303e <HAL_RCC_OscConfig+0x522>
 800301e:	4b1d      	ldr	r3, [pc, #116]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8003020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003024:	4a1b      	ldr	r2, [pc, #108]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8003026:	f023 0301 	bic.w	r3, r3, #1
 800302a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800302e:	4b19      	ldr	r3, [pc, #100]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8003030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003034:	4a17      	ldr	r2, [pc, #92]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8003036:	f023 0304 	bic.w	r3, r3, #4
 800303a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d016      	beq.n	8003074 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003046:	f7fe fb59 	bl	80016fc <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800304c:	e00a      	b.n	8003064 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800304e:	f7fe fb55 	bl	80016fc <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	f241 3288 	movw	r2, #5000	; 0x1388
 800305c:	4293      	cmp	r3, r2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e139      	b.n	80032d8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_RCC_OscConfig+0x578>)
 8003066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0ed      	beq.n	800304e <HAL_RCC_OscConfig+0x532>
 8003072:	e01a      	b.n	80030aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003074:	f7fe fb42 	bl	80016fc <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800307a:	e00f      	b.n	800309c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307c:	f7fe fb3e 	bl	80016fc <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	f241 3288 	movw	r2, #5000	; 0x1388
 800308a:	4293      	cmp	r3, r2
 800308c:	d906      	bls.n	800309c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e122      	b.n	80032d8 <HAL_RCC_OscConfig+0x7bc>
 8003092:	bf00      	nop
 8003094:	40021000 	.word	0x40021000
 8003098:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800309c:	4b90      	ldr	r3, [pc, #576]	; (80032e0 <HAL_RCC_OscConfig+0x7c4>)
 800309e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1e8      	bne.n	800307c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030aa:	7ffb      	ldrb	r3, [r7, #31]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d105      	bne.n	80030bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b0:	4b8b      	ldr	r3, [pc, #556]	; (80032e0 <HAL_RCC_OscConfig+0x7c4>)
 80030b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b4:	4a8a      	ldr	r2, [pc, #552]	; (80032e0 <HAL_RCC_OscConfig+0x7c4>)
 80030b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ba:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 8108 	beq.w	80032d6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	f040 80d0 	bne.w	8003270 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80030d0:	4b83      	ldr	r3, [pc, #524]	; (80032e0 <HAL_RCC_OscConfig+0x7c4>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f003 0203 	and.w	r2, r3, #3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d130      	bne.n	8003146 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	3b01      	subs	r3, #1
 80030f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d127      	bne.n	8003146 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003100:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003102:	429a      	cmp	r2, r3
 8003104:	d11f      	bne.n	8003146 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003110:	2a07      	cmp	r2, #7
 8003112:	bf14      	ite	ne
 8003114:	2201      	movne	r2, #1
 8003116:	2200      	moveq	r2, #0
 8003118:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800311a:	4293      	cmp	r3, r2
 800311c:	d113      	bne.n	8003146 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003128:	085b      	lsrs	r3, r3, #1
 800312a:	3b01      	subs	r3, #1
 800312c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800312e:	429a      	cmp	r2, r3
 8003130:	d109      	bne.n	8003146 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	085b      	lsrs	r3, r3, #1
 800313e:	3b01      	subs	r3, #1
 8003140:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003142:	429a      	cmp	r2, r3
 8003144:	d06e      	beq.n	8003224 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	2b0c      	cmp	r3, #12
 800314a:	d069      	beq.n	8003220 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800314c:	4b64      	ldr	r3, [pc, #400]	; (80032e0 <HAL_RCC_OscConfig+0x7c4>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d105      	bne.n	8003164 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003158:	4b61      	ldr	r3, [pc, #388]	; (80032e0 <HAL_RCC_OscConfig+0x7c4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0b7      	b.n	80032d8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003168:	4b5d      	ldr	r3, [pc, #372]	; (80032e0 <HAL_RCC_OscConfig+0x7c4>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a5c      	ldr	r2, [pc, #368]	; (80032e0 <HAL_RCC_OscConfig+0x7c4>)
 800316e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003172:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003174:	f7fe fac2 	bl	80016fc <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317c:	f7fe fabe 	bl	80016fc <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e0a4      	b.n	80032d8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800318e:	4b54      	ldr	r3, [pc, #336]	; (80032e0 <HAL_RCC_OscConfig+0x7c4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800319a:	4b51      	ldr	r3, [pc, #324]	; (80032e0 <HAL_RCC_OscConfig+0x7c4>)
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	4b51      	ldr	r3, [pc, #324]	; (80032e4 <HAL_RCC_OscConfig+0x7c8>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031aa:	3a01      	subs	r2, #1
 80031ac:	0112      	lsls	r2, r2, #4
 80031ae:	4311      	orrs	r1, r2
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031b4:	0212      	lsls	r2, r2, #8
 80031b6:	4311      	orrs	r1, r2
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031bc:	0852      	lsrs	r2, r2, #1
 80031be:	3a01      	subs	r2, #1
 80031c0:	0552      	lsls	r2, r2, #21
 80031c2:	4311      	orrs	r1, r2
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031c8:	0852      	lsrs	r2, r2, #1
 80031ca:	3a01      	subs	r2, #1
 80031cc:	0652      	lsls	r2, r2, #25
 80031ce:	4311      	orrs	r1, r2
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031d4:	0912      	lsrs	r2, r2, #4
 80031d6:	0452      	lsls	r2, r2, #17
 80031d8:	430a      	orrs	r2, r1
 80031da:	4941      	ldr	r1, [pc, #260]	; (80032e0 <HAL_RCC_OscConfig+0x7c4>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80031e0:	4b3f      	ldr	r3, [pc, #252]	; (80032e0 <HAL_RCC_OscConfig+0x7c4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a3e      	ldr	r2, [pc, #248]	; (80032e0 <HAL_RCC_OscConfig+0x7c4>)
 80031e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031ec:	4b3c      	ldr	r3, [pc, #240]	; (80032e0 <HAL_RCC_OscConfig+0x7c4>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	4a3b      	ldr	r2, [pc, #236]	; (80032e0 <HAL_RCC_OscConfig+0x7c4>)
 80031f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031f8:	f7fe fa80 	bl	80016fc <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003200:	f7fe fa7c 	bl	80016fc <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e062      	b.n	80032d8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003212:	4b33      	ldr	r3, [pc, #204]	; (80032e0 <HAL_RCC_OscConfig+0x7c4>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800321e:	e05a      	b.n	80032d6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e059      	b.n	80032d8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003224:	4b2e      	ldr	r3, [pc, #184]	; (80032e0 <HAL_RCC_OscConfig+0x7c4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d152      	bne.n	80032d6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003230:	4b2b      	ldr	r3, [pc, #172]	; (80032e0 <HAL_RCC_OscConfig+0x7c4>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a2a      	ldr	r2, [pc, #168]	; (80032e0 <HAL_RCC_OscConfig+0x7c4>)
 8003236:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800323a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800323c:	4b28      	ldr	r3, [pc, #160]	; (80032e0 <HAL_RCC_OscConfig+0x7c4>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	4a27      	ldr	r2, [pc, #156]	; (80032e0 <HAL_RCC_OscConfig+0x7c4>)
 8003242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003246:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003248:	f7fe fa58 	bl	80016fc <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003250:	f7fe fa54 	bl	80016fc <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e03a      	b.n	80032d8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003262:	4b1f      	ldr	r3, [pc, #124]	; (80032e0 <HAL_RCC_OscConfig+0x7c4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCC_OscConfig+0x734>
 800326e:	e032      	b.n	80032d6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	2b0c      	cmp	r3, #12
 8003274:	d02d      	beq.n	80032d2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003276:	4b1a      	ldr	r3, [pc, #104]	; (80032e0 <HAL_RCC_OscConfig+0x7c4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a19      	ldr	r2, [pc, #100]	; (80032e0 <HAL_RCC_OscConfig+0x7c4>)
 800327c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003280:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003282:	4b17      	ldr	r3, [pc, #92]	; (80032e0 <HAL_RCC_OscConfig+0x7c4>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d105      	bne.n	800329a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800328e:	4b14      	ldr	r3, [pc, #80]	; (80032e0 <HAL_RCC_OscConfig+0x7c4>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	4a13      	ldr	r2, [pc, #76]	; (80032e0 <HAL_RCC_OscConfig+0x7c4>)
 8003294:	f023 0303 	bic.w	r3, r3, #3
 8003298:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800329a:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <HAL_RCC_OscConfig+0x7c4>)
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	4a10      	ldr	r2, [pc, #64]	; (80032e0 <HAL_RCC_OscConfig+0x7c4>)
 80032a0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80032a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032aa:	f7fe fa27 	bl	80016fc <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b2:	f7fe fa23 	bl	80016fc <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e009      	b.n	80032d8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032c4:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <HAL_RCC_OscConfig+0x7c4>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1f0      	bne.n	80032b2 <HAL_RCC_OscConfig+0x796>
 80032d0:	e001      	b.n	80032d6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3720      	adds	r7, #32
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40021000 	.word	0x40021000
 80032e4:	f99d808c 	.word	0xf99d808c

080032e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0c8      	b.n	800348e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032fc:	4b66      	ldr	r3, [pc, #408]	; (8003498 <HAL_RCC_ClockConfig+0x1b0>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d910      	bls.n	800332c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330a:	4b63      	ldr	r3, [pc, #396]	; (8003498 <HAL_RCC_ClockConfig+0x1b0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f023 0207 	bic.w	r2, r3, #7
 8003312:	4961      	ldr	r1, [pc, #388]	; (8003498 <HAL_RCC_ClockConfig+0x1b0>)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	4313      	orrs	r3, r2
 8003318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800331a:	4b5f      	ldr	r3, [pc, #380]	; (8003498 <HAL_RCC_ClockConfig+0x1b0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	429a      	cmp	r2, r3
 8003326:	d001      	beq.n	800332c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e0b0      	b.n	800348e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b00      	cmp	r3, #0
 8003336:	d04c      	beq.n	80033d2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b03      	cmp	r3, #3
 800333e:	d107      	bne.n	8003350 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003340:	4b56      	ldr	r3, [pc, #344]	; (800349c <HAL_RCC_ClockConfig+0x1b4>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d121      	bne.n	8003390 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e09e      	b.n	800348e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b02      	cmp	r3, #2
 8003356:	d107      	bne.n	8003368 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003358:	4b50      	ldr	r3, [pc, #320]	; (800349c <HAL_RCC_ClockConfig+0x1b4>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d115      	bne.n	8003390 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e092      	b.n	800348e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d107      	bne.n	8003380 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003370:	4b4a      	ldr	r3, [pc, #296]	; (800349c <HAL_RCC_ClockConfig+0x1b4>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d109      	bne.n	8003390 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e086      	b.n	800348e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003380:	4b46      	ldr	r3, [pc, #280]	; (800349c <HAL_RCC_ClockConfig+0x1b4>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e07e      	b.n	800348e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003390:	4b42      	ldr	r3, [pc, #264]	; (800349c <HAL_RCC_ClockConfig+0x1b4>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f023 0203 	bic.w	r2, r3, #3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	493f      	ldr	r1, [pc, #252]	; (800349c <HAL_RCC_ClockConfig+0x1b4>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033a2:	f7fe f9ab 	bl	80016fc <HAL_GetTick>
 80033a6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a8:	e00a      	b.n	80033c0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033aa:	f7fe f9a7 	bl	80016fc <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e066      	b.n	800348e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c0:	4b36      	ldr	r3, [pc, #216]	; (800349c <HAL_RCC_ClockConfig+0x1b4>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 020c 	and.w	r2, r3, #12
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d1eb      	bne.n	80033aa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d008      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033de:	4b2f      	ldr	r3, [pc, #188]	; (800349c <HAL_RCC_ClockConfig+0x1b4>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	492c      	ldr	r1, [pc, #176]	; (800349c <HAL_RCC_ClockConfig+0x1b4>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033f0:	4b29      	ldr	r3, [pc, #164]	; (8003498 <HAL_RCC_ClockConfig+0x1b0>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d210      	bcs.n	8003420 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fe:	4b26      	ldr	r3, [pc, #152]	; (8003498 <HAL_RCC_ClockConfig+0x1b0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f023 0207 	bic.w	r2, r3, #7
 8003406:	4924      	ldr	r1, [pc, #144]	; (8003498 <HAL_RCC_ClockConfig+0x1b0>)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	4313      	orrs	r3, r2
 800340c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800340e:	4b22      	ldr	r3, [pc, #136]	; (8003498 <HAL_RCC_ClockConfig+0x1b0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	429a      	cmp	r2, r3
 800341a:	d001      	beq.n	8003420 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e036      	b.n	800348e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	d008      	beq.n	800343e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800342c:	4b1b      	ldr	r3, [pc, #108]	; (800349c <HAL_RCC_ClockConfig+0x1b4>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	4918      	ldr	r1, [pc, #96]	; (800349c <HAL_RCC_ClockConfig+0x1b4>)
 800343a:	4313      	orrs	r3, r2
 800343c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	2b00      	cmp	r3, #0
 8003448:	d009      	beq.n	800345e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800344a:	4b14      	ldr	r3, [pc, #80]	; (800349c <HAL_RCC_ClockConfig+0x1b4>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	4910      	ldr	r1, [pc, #64]	; (800349c <HAL_RCC_ClockConfig+0x1b4>)
 800345a:	4313      	orrs	r3, r2
 800345c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800345e:	f000 f825 	bl	80034ac <HAL_RCC_GetSysClockFreq>
 8003462:	4601      	mov	r1, r0
 8003464:	4b0d      	ldr	r3, [pc, #52]	; (800349c <HAL_RCC_ClockConfig+0x1b4>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	091b      	lsrs	r3, r3, #4
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	4a0c      	ldr	r2, [pc, #48]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003470:	5cd3      	ldrb	r3, [r2, r3]
 8003472:	f003 031f 	and.w	r3, r3, #31
 8003476:	fa21 f303 	lsr.w	r3, r1, r3
 800347a:	4a0a      	ldr	r2, [pc, #40]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800347c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800347e:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f7fe f8ea 	bl	800165c <HAL_InitTick>
 8003488:	4603      	mov	r3, r0
 800348a:	72fb      	strb	r3, [r7, #11]

  return status;
 800348c:	7afb      	ldrb	r3, [r7, #11]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40022000 	.word	0x40022000
 800349c:	40021000 	.word	0x40021000
 80034a0:	08005bf0 	.word	0x08005bf0
 80034a4:	200000cc 	.word	0x200000cc
 80034a8:	200000c4 	.word	0x200000c4

080034ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b089      	sub	sp, #36	; 0x24
 80034b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]
 80034b6:	2300      	movs	r3, #0
 80034b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034ba:	4b3d      	ldr	r3, [pc, #244]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 030c 	and.w	r3, r3, #12
 80034c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034c4:	4b3a      	ldr	r3, [pc, #232]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0303 	and.w	r3, r3, #3
 80034cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d005      	beq.n	80034e0 <HAL_RCC_GetSysClockFreq+0x34>
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	2b0c      	cmp	r3, #12
 80034d8:	d121      	bne.n	800351e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d11e      	bne.n	800351e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80034e0:	4b33      	ldr	r3, [pc, #204]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0308 	and.w	r3, r3, #8
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d107      	bne.n	80034fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034ec:	4b30      	ldr	r3, [pc, #192]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80034ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034f2:	0a1b      	lsrs	r3, r3, #8
 80034f4:	f003 030f 	and.w	r3, r3, #15
 80034f8:	61fb      	str	r3, [r7, #28]
 80034fa:	e005      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034fc:	4b2c      	ldr	r3, [pc, #176]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	091b      	lsrs	r3, r3, #4
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003508:	4a2a      	ldr	r2, [pc, #168]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003510:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10d      	bne.n	8003534 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800351c:	e00a      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	2b04      	cmp	r3, #4
 8003522:	d102      	bne.n	800352a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003524:	4b24      	ldr	r3, [pc, #144]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003526:	61bb      	str	r3, [r7, #24]
 8003528:	e004      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	2b08      	cmp	r3, #8
 800352e:	d101      	bne.n	8003534 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003530:	4b22      	ldr	r3, [pc, #136]	; (80035bc <HAL_RCC_GetSysClockFreq+0x110>)
 8003532:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	2b0c      	cmp	r3, #12
 8003538:	d133      	bne.n	80035a2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800353a:	4b1d      	ldr	r3, [pc, #116]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x104>)
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d002      	beq.n	8003550 <HAL_RCC_GetSysClockFreq+0xa4>
 800354a:	2b03      	cmp	r3, #3
 800354c:	d003      	beq.n	8003556 <HAL_RCC_GetSysClockFreq+0xaa>
 800354e:	e005      	b.n	800355c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003550:	4b19      	ldr	r3, [pc, #100]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003552:	617b      	str	r3, [r7, #20]
      break;
 8003554:	e005      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003556:	4b19      	ldr	r3, [pc, #100]	; (80035bc <HAL_RCC_GetSysClockFreq+0x110>)
 8003558:	617b      	str	r3, [r7, #20]
      break;
 800355a:	e002      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	617b      	str	r3, [r7, #20]
      break;
 8003560:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003562:	4b13      	ldr	r3, [pc, #76]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	091b      	lsrs	r3, r3, #4
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	3301      	adds	r3, #1
 800356e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003570:	4b0f      	ldr	r3, [pc, #60]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	0a1b      	lsrs	r3, r3, #8
 8003576:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	fb02 f203 	mul.w	r2, r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	fbb2 f3f3 	udiv	r3, r2, r3
 8003586:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003588:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x104>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	0e5b      	lsrs	r3, r3, #25
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	3301      	adds	r3, #1
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80035a2:	69bb      	ldr	r3, [r7, #24]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3724      	adds	r7, #36	; 0x24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	40021000 	.word	0x40021000
 80035b4:	08005c08 	.word	0x08005c08
 80035b8:	00f42400 	.word	0x00f42400
 80035bc:	007a1200 	.word	0x007a1200

080035c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035c4:	4b03      	ldr	r3, [pc, #12]	; (80035d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80035c6:	681b      	ldr	r3, [r3, #0]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	200000cc 	.word	0x200000cc

080035d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80035dc:	f7ff fff0 	bl	80035c0 <HAL_RCC_GetHCLKFreq>
 80035e0:	4601      	mov	r1, r0
 80035e2:	4b06      	ldr	r3, [pc, #24]	; (80035fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	0a1b      	lsrs	r3, r3, #8
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	4a04      	ldr	r2, [pc, #16]	; (8003600 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035ee:	5cd3      	ldrb	r3, [r2, r3]
 80035f0:	f003 031f 	and.w	r3, r3, #31
 80035f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40021000 	.word	0x40021000
 8003600:	08005c00 	.word	0x08005c00

08003604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003608:	f7ff ffda 	bl	80035c0 <HAL_RCC_GetHCLKFreq>
 800360c:	4601      	mov	r1, r0
 800360e:	4b06      	ldr	r3, [pc, #24]	; (8003628 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	0adb      	lsrs	r3, r3, #11
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	4a04      	ldr	r2, [pc, #16]	; (800362c <HAL_RCC_GetPCLK2Freq+0x28>)
 800361a:	5cd3      	ldrb	r3, [r2, r3]
 800361c:	f003 031f 	and.w	r3, r3, #31
 8003620:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003624:	4618      	mov	r0, r3
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40021000 	.word	0x40021000
 800362c:	08005c00 	.word	0x08005c00

08003630 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003638:	2300      	movs	r3, #0
 800363a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800363c:	4b2a      	ldr	r3, [pc, #168]	; (80036e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800363e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003648:	f7ff fa04 	bl	8002a54 <HAL_PWREx_GetVoltageRange>
 800364c:	6178      	str	r0, [r7, #20]
 800364e:	e014      	b.n	800367a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003650:	4b25      	ldr	r3, [pc, #148]	; (80036e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003654:	4a24      	ldr	r2, [pc, #144]	; (80036e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800365a:	6593      	str	r3, [r2, #88]	; 0x58
 800365c:	4b22      	ldr	r3, [pc, #136]	; (80036e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800365e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003668:	f7ff f9f4 	bl	8002a54 <HAL_PWREx_GetVoltageRange>
 800366c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800366e:	4b1e      	ldr	r3, [pc, #120]	; (80036e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003672:	4a1d      	ldr	r2, [pc, #116]	; (80036e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003678:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003680:	d10b      	bne.n	800369a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b80      	cmp	r3, #128	; 0x80
 8003686:	d919      	bls.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2ba0      	cmp	r3, #160	; 0xa0
 800368c:	d902      	bls.n	8003694 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800368e:	2302      	movs	r3, #2
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	e013      	b.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003694:	2301      	movs	r3, #1
 8003696:	613b      	str	r3, [r7, #16]
 8003698:	e010      	b.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b80      	cmp	r3, #128	; 0x80
 800369e:	d902      	bls.n	80036a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80036a0:	2303      	movs	r3, #3
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	e00a      	b.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b80      	cmp	r3, #128	; 0x80
 80036aa:	d102      	bne.n	80036b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036ac:	2302      	movs	r3, #2
 80036ae:	613b      	str	r3, [r7, #16]
 80036b0:	e004      	b.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b70      	cmp	r3, #112	; 0x70
 80036b6:	d101      	bne.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036b8:	2301      	movs	r3, #1
 80036ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036bc:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f023 0207 	bic.w	r2, r3, #7
 80036c4:	4909      	ldr	r1, [pc, #36]	; (80036ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80036cc:	4b07      	ldr	r3, [pc, #28]	; (80036ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d001      	beq.n	80036de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40021000 	.word	0x40021000
 80036ec:	40022000 	.word	0x40022000

080036f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036f8:	2300      	movs	r3, #0
 80036fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036fc:	2300      	movs	r3, #0
 80036fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003708:	2b00      	cmp	r3, #0
 800370a:	d03f      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003710:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003714:	d01c      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003716:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800371a:	d802      	bhi.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00e      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003720:	e01f      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003722:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003726:	d003      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003728:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800372c:	d01c      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800372e:	e018      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003730:	4b85      	ldr	r3, [pc, #532]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	4a84      	ldr	r2, [pc, #528]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800373a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800373c:	e015      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	3304      	adds	r3, #4
 8003742:	2100      	movs	r1, #0
 8003744:	4618      	mov	r0, r3
 8003746:	f000 fab9 	bl	8003cbc <RCCEx_PLLSAI1_Config>
 800374a:	4603      	mov	r3, r0
 800374c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800374e:	e00c      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3320      	adds	r3, #32
 8003754:	2100      	movs	r1, #0
 8003756:	4618      	mov	r0, r3
 8003758:	f000 fba0 	bl	8003e9c <RCCEx_PLLSAI2_Config>
 800375c:	4603      	mov	r3, r0
 800375e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003760:	e003      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	74fb      	strb	r3, [r7, #19]
      break;
 8003766:	e000      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003768:	bf00      	nop
    }

    if(ret == HAL_OK)
 800376a:	7cfb      	ldrb	r3, [r7, #19]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10b      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003770:	4b75      	ldr	r3, [pc, #468]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003776:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800377e:	4972      	ldr	r1, [pc, #456]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003786:	e001      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003788:	7cfb      	ldrb	r3, [r7, #19]
 800378a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d03f      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800379c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037a0:	d01c      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80037a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037a6:	d802      	bhi.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00e      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0xda>
 80037ac:	e01f      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80037ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037b2:	d003      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80037b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037b8:	d01c      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80037ba:	e018      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037bc:	4b62      	ldr	r3, [pc, #392]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	4a61      	ldr	r2, [pc, #388]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037c8:	e015      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	3304      	adds	r3, #4
 80037ce:	2100      	movs	r1, #0
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 fa73 	bl	8003cbc <RCCEx_PLLSAI1_Config>
 80037d6:	4603      	mov	r3, r0
 80037d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037da:	e00c      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3320      	adds	r3, #32
 80037e0:	2100      	movs	r1, #0
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 fb5a 	bl	8003e9c <RCCEx_PLLSAI2_Config>
 80037e8:	4603      	mov	r3, r0
 80037ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037ec:	e003      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	74fb      	strb	r3, [r7, #19]
      break;
 80037f2:	e000      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80037f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037f6:	7cfb      	ldrb	r3, [r7, #19]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10b      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037fc:	4b52      	ldr	r3, [pc, #328]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003802:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800380a:	494f      	ldr	r1, [pc, #316]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003812:	e001      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003814:	7cfb      	ldrb	r3, [r7, #19]
 8003816:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 80a0 	beq.w	8003966 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003826:	2300      	movs	r3, #0
 8003828:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800382a:	4b47      	ldr	r3, [pc, #284]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800382c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800383a:	2300      	movs	r3, #0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00d      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003840:	4b41      	ldr	r3, [pc, #260]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003844:	4a40      	ldr	r2, [pc, #256]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800384a:	6593      	str	r3, [r2, #88]	; 0x58
 800384c:	4b3e      	ldr	r3, [pc, #248]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800384e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003854:	60bb      	str	r3, [r7, #8]
 8003856:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003858:	2301      	movs	r3, #1
 800385a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800385c:	4b3b      	ldr	r3, [pc, #236]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a3a      	ldr	r2, [pc, #232]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003866:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003868:	f7fd ff48 	bl	80016fc <HAL_GetTick>
 800386c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800386e:	e009      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003870:	f7fd ff44 	bl	80016fc <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d902      	bls.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	74fb      	strb	r3, [r7, #19]
        break;
 8003882:	e005      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003884:	4b31      	ldr	r3, [pc, #196]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0ef      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003890:	7cfb      	ldrb	r3, [r7, #19]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d15c      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003896:	4b2c      	ldr	r3, [pc, #176]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d01f      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d019      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038b4:	4b24      	ldr	r3, [pc, #144]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038c0:	4b21      	ldr	r3, [pc, #132]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c6:	4a20      	ldr	r2, [pc, #128]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038d0:	4b1d      	ldr	r3, [pc, #116]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d6:	4a1c      	ldr	r2, [pc, #112]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038e0:	4a19      	ldr	r2, [pc, #100]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d016      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f2:	f7fd ff03 	bl	80016fc <HAL_GetTick>
 80038f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038f8:	e00b      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038fa:	f7fd feff 	bl	80016fc <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	f241 3288 	movw	r2, #5000	; 0x1388
 8003908:	4293      	cmp	r3, r2
 800390a:	d902      	bls.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	74fb      	strb	r3, [r7, #19]
            break;
 8003910:	e006      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003912:	4b0d      	ldr	r3, [pc, #52]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0ec      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003920:	7cfb      	ldrb	r3, [r7, #19]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10c      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003926:	4b08      	ldr	r3, [pc, #32]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003936:	4904      	ldr	r1, [pc, #16]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003938:	4313      	orrs	r3, r2
 800393a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800393e:	e009      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003940:	7cfb      	ldrb	r3, [r7, #19]
 8003942:	74bb      	strb	r3, [r7, #18]
 8003944:	e006      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000
 800394c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003950:	7cfb      	ldrb	r3, [r7, #19]
 8003952:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003954:	7c7b      	ldrb	r3, [r7, #17]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d105      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800395a:	4b9e      	ldr	r3, [pc, #632]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800395c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395e:	4a9d      	ldr	r2, [pc, #628]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003964:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003972:	4b98      	ldr	r3, [pc, #608]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003978:	f023 0203 	bic.w	r2, r3, #3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003980:	4994      	ldr	r1, [pc, #592]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003994:	4b8f      	ldr	r3, [pc, #572]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399a:	f023 020c 	bic.w	r2, r3, #12
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a2:	498c      	ldr	r1, [pc, #560]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039b6:	4b87      	ldr	r3, [pc, #540]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	4983      	ldr	r1, [pc, #524]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00a      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039d8:	4b7e      	ldr	r3, [pc, #504]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e6:	497b      	ldr	r1, [pc, #492]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0310 	and.w	r3, r3, #16
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039fa:	4b76      	ldr	r3, [pc, #472]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a08:	4972      	ldr	r1, [pc, #456]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0320 	and.w	r3, r3, #32
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00a      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a1c:	4b6d      	ldr	r3, [pc, #436]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2a:	496a      	ldr	r1, [pc, #424]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00a      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a3e:	4b65      	ldr	r3, [pc, #404]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4c:	4961      	ldr	r1, [pc, #388]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00a      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a60:	4b5c      	ldr	r3, [pc, #368]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a6e:	4959      	ldr	r1, [pc, #356]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a82:	4b54      	ldr	r3, [pc, #336]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a90:	4950      	ldr	r1, [pc, #320]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00a      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003aa4:	4b4b      	ldr	r3, [pc, #300]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aaa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab2:	4948      	ldr	r1, [pc, #288]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ac6:	4b43      	ldr	r3, [pc, #268]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003acc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad4:	493f      	ldr	r1, [pc, #252]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d028      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ae8:	4b3a      	ldr	r3, [pc, #232]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003af6:	4937      	ldr	r1, [pc, #220]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b06:	d106      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b08:	4b32      	ldr	r3, [pc, #200]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	4a31      	ldr	r2, [pc, #196]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b12:	60d3      	str	r3, [r2, #12]
 8003b14:	e011      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b1e:	d10c      	bne.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3304      	adds	r3, #4
 8003b24:	2101      	movs	r1, #1
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 f8c8 	bl	8003cbc <RCCEx_PLLSAI1_Config>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b30:	7cfb      	ldrb	r3, [r7, #19]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003b36:	7cfb      	ldrb	r3, [r7, #19]
 8003b38:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d028      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b46:	4b23      	ldr	r3, [pc, #140]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b54:	491f      	ldr	r1, [pc, #124]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b64:	d106      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b66:	4b1b      	ldr	r3, [pc, #108]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	4a1a      	ldr	r2, [pc, #104]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b70:	60d3      	str	r3, [r2, #12]
 8003b72:	e011      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b7c:	d10c      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3304      	adds	r3, #4
 8003b82:	2101      	movs	r1, #1
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 f899 	bl	8003cbc <RCCEx_PLLSAI1_Config>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b8e:	7cfb      	ldrb	r3, [r7, #19]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003b94:	7cfb      	ldrb	r3, [r7, #19]
 8003b96:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d02b      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ba4:	4b0b      	ldr	r3, [pc, #44]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003baa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb2:	4908      	ldr	r1, [pc, #32]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bc2:	d109      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bc4:	4b03      	ldr	r3, [pc, #12]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	4a02      	ldr	r2, [pc, #8]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bce:	60d3      	str	r3, [r2, #12]
 8003bd0:	e014      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003bd2:	bf00      	nop
 8003bd4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bdc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003be0:	d10c      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	3304      	adds	r3, #4
 8003be6:	2101      	movs	r1, #1
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 f867 	bl	8003cbc <RCCEx_PLLSAI1_Config>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bf2:	7cfb      	ldrb	r3, [r7, #19]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003bf8:	7cfb      	ldrb	r3, [r7, #19]
 8003bfa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d02f      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c08:	4b2b      	ldr	r3, [pc, #172]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c16:	4928      	ldr	r1, [pc, #160]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c26:	d10d      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	2102      	movs	r1, #2
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 f844 	bl	8003cbc <RCCEx_PLLSAI1_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c38:	7cfb      	ldrb	r3, [r7, #19]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d014      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003c3e:	7cfb      	ldrb	r3, [r7, #19]
 8003c40:	74bb      	strb	r3, [r7, #18]
 8003c42:	e011      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c4c:	d10c      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3320      	adds	r3, #32
 8003c52:	2102      	movs	r1, #2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 f921 	bl	8003e9c <RCCEx_PLLSAI2_Config>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c5e:	7cfb      	ldrb	r3, [r7, #19]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003c64:	7cfb      	ldrb	r3, [r7, #19]
 8003c66:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00a      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c74:	4b10      	ldr	r3, [pc, #64]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c82:	490d      	ldr	r1, [pc, #52]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00b      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c96:	4b08      	ldr	r3, [pc, #32]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ca6:	4904      	ldr	r1, [pc, #16]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003cae:	7cbb      	ldrb	r3, [r7, #18]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40021000 	.word	0x40021000

08003cbc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cca:	4b73      	ldr	r3, [pc, #460]	; (8003e98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d018      	beq.n	8003d08 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003cd6:	4b70      	ldr	r3, [pc, #448]	; (8003e98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	f003 0203 	and.w	r2, r3, #3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d10d      	bne.n	8003d02 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
       ||
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d009      	beq.n	8003d02 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003cee:	4b6a      	ldr	r3, [pc, #424]	; (8003e98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	091b      	lsrs	r3, r3, #4
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
       ||
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d044      	beq.n	8003d8c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	73fb      	strb	r3, [r7, #15]
 8003d06:	e041      	b.n	8003d8c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d00c      	beq.n	8003d2a <RCCEx_PLLSAI1_Config+0x6e>
 8003d10:	2b03      	cmp	r3, #3
 8003d12:	d013      	beq.n	8003d3c <RCCEx_PLLSAI1_Config+0x80>
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d120      	bne.n	8003d5a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d18:	4b5f      	ldr	r3, [pc, #380]	; (8003e98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d11d      	bne.n	8003d60 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d28:	e01a      	b.n	8003d60 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d2a:	4b5b      	ldr	r3, [pc, #364]	; (8003e98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d116      	bne.n	8003d64 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d3a:	e013      	b.n	8003d64 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d3c:	4b56      	ldr	r3, [pc, #344]	; (8003e98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10f      	bne.n	8003d68 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d48:	4b53      	ldr	r3, [pc, #332]	; (8003e98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d109      	bne.n	8003d68 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d58:	e006      	b.n	8003d68 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	73fb      	strb	r3, [r7, #15]
      break;
 8003d5e:	e004      	b.n	8003d6a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003d60:	bf00      	nop
 8003d62:	e002      	b.n	8003d6a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003d64:	bf00      	nop
 8003d66:	e000      	b.n	8003d6a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003d68:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d6a:	7bfb      	ldrb	r3, [r7, #15]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10d      	bne.n	8003d8c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d70:	4b49      	ldr	r3, [pc, #292]	; (8003e98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6819      	ldr	r1, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	3b01      	subs	r3, #1
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	430b      	orrs	r3, r1
 8003d86:	4944      	ldr	r1, [pc, #272]	; (8003e98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d17d      	bne.n	8003e8e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d92:	4b41      	ldr	r3, [pc, #260]	; (8003e98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a40      	ldr	r2, [pc, #256]	; (8003e98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d9e:	f7fd fcad 	bl	80016fc <HAL_GetTick>
 8003da2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003da4:	e009      	b.n	8003dba <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003da6:	f7fd fca9 	bl	80016fc <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d902      	bls.n	8003dba <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	73fb      	strb	r3, [r7, #15]
        break;
 8003db8:	e005      	b.n	8003dc6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003dba:	4b37      	ldr	r3, [pc, #220]	; (8003e98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1ef      	bne.n	8003da6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d160      	bne.n	8003e8e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d111      	bne.n	8003df6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dd2:	4b31      	ldr	r3, [pc, #196]	; (8003e98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6892      	ldr	r2, [r2, #8]
 8003de2:	0211      	lsls	r1, r2, #8
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	68d2      	ldr	r2, [r2, #12]
 8003de8:	0912      	lsrs	r2, r2, #4
 8003dea:	0452      	lsls	r2, r2, #17
 8003dec:	430a      	orrs	r2, r1
 8003dee:	492a      	ldr	r1, [pc, #168]	; (8003e98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	610b      	str	r3, [r1, #16]
 8003df4:	e027      	b.n	8003e46 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d112      	bne.n	8003e22 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dfc:	4b26      	ldr	r3, [pc, #152]	; (8003e98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003e04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6892      	ldr	r2, [r2, #8]
 8003e0c:	0211      	lsls	r1, r2, #8
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6912      	ldr	r2, [r2, #16]
 8003e12:	0852      	lsrs	r2, r2, #1
 8003e14:	3a01      	subs	r2, #1
 8003e16:	0552      	lsls	r2, r2, #21
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	491f      	ldr	r1, [pc, #124]	; (8003e98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	610b      	str	r3, [r1, #16]
 8003e20:	e011      	b.n	8003e46 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e22:	4b1d      	ldr	r3, [pc, #116]	; (8003e98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e2a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6892      	ldr	r2, [r2, #8]
 8003e32:	0211      	lsls	r1, r2, #8
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6952      	ldr	r2, [r2, #20]
 8003e38:	0852      	lsrs	r2, r2, #1
 8003e3a:	3a01      	subs	r2, #1
 8003e3c:	0652      	lsls	r2, r2, #25
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	4915      	ldr	r1, [pc, #84]	; (8003e98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e46:	4b14      	ldr	r3, [pc, #80]	; (8003e98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a13      	ldr	r2, [pc, #76]	; (8003e98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e50:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e52:	f7fd fc53 	bl	80016fc <HAL_GetTick>
 8003e56:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e58:	e009      	b.n	8003e6e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e5a:	f7fd fc4f 	bl	80016fc <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d902      	bls.n	8003e6e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	73fb      	strb	r3, [r7, #15]
          break;
 8003e6c:	e005      	b.n	8003e7a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e6e:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0ef      	beq.n	8003e5a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d106      	bne.n	8003e8e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e80:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	4903      	ldr	r1, [pc, #12]	; (8003e98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40021000 	.word	0x40021000

08003e9c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003eaa:	4b68      	ldr	r3, [pc, #416]	; (800404c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	f003 0303 	and.w	r3, r3, #3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d018      	beq.n	8003ee8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003eb6:	4b65      	ldr	r3, [pc, #404]	; (800404c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f003 0203 	and.w	r2, r3, #3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d10d      	bne.n	8003ee2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
       ||
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d009      	beq.n	8003ee2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003ece:	4b5f      	ldr	r3, [pc, #380]	; (800404c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	091b      	lsrs	r3, r3, #4
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
       ||
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d044      	beq.n	8003f6c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	73fb      	strb	r3, [r7, #15]
 8003ee6:	e041      	b.n	8003f6c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d00c      	beq.n	8003f0a <RCCEx_PLLSAI2_Config+0x6e>
 8003ef0:	2b03      	cmp	r3, #3
 8003ef2:	d013      	beq.n	8003f1c <RCCEx_PLLSAI2_Config+0x80>
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d120      	bne.n	8003f3a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ef8:	4b54      	ldr	r3, [pc, #336]	; (800404c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d11d      	bne.n	8003f40 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f08:	e01a      	b.n	8003f40 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f0a:	4b50      	ldr	r3, [pc, #320]	; (800404c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d116      	bne.n	8003f44 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f1a:	e013      	b.n	8003f44 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f1c:	4b4b      	ldr	r3, [pc, #300]	; (800404c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10f      	bne.n	8003f48 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f28:	4b48      	ldr	r3, [pc, #288]	; (800404c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d109      	bne.n	8003f48 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f38:	e006      	b.n	8003f48 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8003f3e:	e004      	b.n	8003f4a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003f40:	bf00      	nop
 8003f42:	e002      	b.n	8003f4a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003f44:	bf00      	nop
 8003f46:	e000      	b.n	8003f4a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003f48:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10d      	bne.n	8003f6c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f50:	4b3e      	ldr	r3, [pc, #248]	; (800404c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6819      	ldr	r1, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	3b01      	subs	r3, #1
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	430b      	orrs	r3, r1
 8003f66:	4939      	ldr	r1, [pc, #228]	; (800404c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f6c:	7bfb      	ldrb	r3, [r7, #15]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d167      	bne.n	8004042 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f72:	4b36      	ldr	r3, [pc, #216]	; (800404c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a35      	ldr	r2, [pc, #212]	; (800404c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f7e:	f7fd fbbd 	bl	80016fc <HAL_GetTick>
 8003f82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f84:	e009      	b.n	8003f9a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f86:	f7fd fbb9 	bl	80016fc <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d902      	bls.n	8003f9a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	73fb      	strb	r3, [r7, #15]
        break;
 8003f98:	e005      	b.n	8003fa6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f9a:	4b2c      	ldr	r3, [pc, #176]	; (800404c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1ef      	bne.n	8003f86 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d14a      	bne.n	8004042 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d111      	bne.n	8003fd6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fb2:	4b26      	ldr	r3, [pc, #152]	; (800404c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6892      	ldr	r2, [r2, #8]
 8003fc2:	0211      	lsls	r1, r2, #8
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	68d2      	ldr	r2, [r2, #12]
 8003fc8:	0912      	lsrs	r2, r2, #4
 8003fca:	0452      	lsls	r2, r2, #17
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	491f      	ldr	r1, [pc, #124]	; (800404c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	614b      	str	r3, [r1, #20]
 8003fd4:	e011      	b.n	8003ffa <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fd6:	4b1d      	ldr	r3, [pc, #116]	; (800404c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fde:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6892      	ldr	r2, [r2, #8]
 8003fe6:	0211      	lsls	r1, r2, #8
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6912      	ldr	r2, [r2, #16]
 8003fec:	0852      	lsrs	r2, r2, #1
 8003fee:	3a01      	subs	r2, #1
 8003ff0:	0652      	lsls	r2, r2, #25
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	4915      	ldr	r1, [pc, #84]	; (800404c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ffa:	4b14      	ldr	r3, [pc, #80]	; (800404c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a13      	ldr	r2, [pc, #76]	; (800404c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004004:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004006:	f7fd fb79 	bl	80016fc <HAL_GetTick>
 800400a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800400c:	e009      	b.n	8004022 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800400e:	f7fd fb75 	bl	80016fc <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d902      	bls.n	8004022 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	73fb      	strb	r3, [r7, #15]
          break;
 8004020:	e005      	b.n	800402e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004022:	4b0a      	ldr	r3, [pc, #40]	; (800404c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0ef      	beq.n	800400e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800402e:	7bfb      	ldrb	r3, [r7, #15]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d106      	bne.n	8004042 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004034:	4b05      	ldr	r3, [pc, #20]	; (800404c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004036:	695a      	ldr	r2, [r3, #20]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	4903      	ldr	r1, [pc, #12]	; (800404c <RCCEx_PLLSAI2_Config+0x1b0>)
 800403e:	4313      	orrs	r3, r2
 8004040:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004042:	7bfb      	ldrb	r3, [r7, #15]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40021000 	.word	0x40021000

08004050 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e040      	b.n	80040e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004066:	2b00      	cmp	r3, #0
 8004068:	d106      	bne.n	8004078 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f001 f80a 	bl	800508c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2224      	movs	r2, #36	; 0x24
 800407c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0201 	bic.w	r2, r2, #1
 800408c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f8c0 	bl	8004214 <UART_SetConfig>
 8004094:	4603      	mov	r3, r0
 8004096:	2b01      	cmp	r3, #1
 8004098:	d101      	bne.n	800409e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e022      	b.n	80040e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 fb3e 	bl	8004728 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689a      	ldr	r2, [r3, #8]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fbc5 	bl	800486c <UART_CheckIdleState>
 80040e2:	4603      	mov	r3, r0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08a      	sub	sp, #40	; 0x28
 80040f0:	af02      	add	r7, sp, #8
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	603b      	str	r3, [r7, #0]
 80040f8:	4613      	mov	r3, r2
 80040fa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004100:	2b20      	cmp	r3, #32
 8004102:	f040 8081 	bne.w	8004208 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <HAL_UART_Transmit+0x26>
 800410c:	88fb      	ldrh	r3, [r7, #6]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e079      	b.n	800420a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800411c:	2b01      	cmp	r3, #1
 800411e:	d101      	bne.n	8004124 <HAL_UART_Transmit+0x38>
 8004120:	2302      	movs	r3, #2
 8004122:	e072      	b.n	800420a <HAL_UART_Transmit+0x11e>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2221      	movs	r2, #33	; 0x21
 8004136:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004138:	f7fd fae0 	bl	80016fc <HAL_GetTick>
 800413c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	88fa      	ldrh	r2, [r7, #6]
 8004142:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	88fa      	ldrh	r2, [r7, #6]
 800414a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004156:	d108      	bne.n	800416a <HAL_UART_Transmit+0x7e>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d104      	bne.n	800416a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004160:	2300      	movs	r3, #0
 8004162:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	61bb      	str	r3, [r7, #24]
 8004168:	e003      	b.n	8004172 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800416e:	2300      	movs	r3, #0
 8004170:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800417a:	e02d      	b.n	80041d8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	2200      	movs	r2, #0
 8004184:	2180      	movs	r1, #128	; 0x80
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 fbb5 	bl	80048f6 <UART_WaitOnFlagUntilTimeout>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e039      	b.n	800420a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10b      	bne.n	80041b4 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	881a      	ldrh	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041a8:	b292      	uxth	r2, r2
 80041aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	3302      	adds	r3, #2
 80041b0:	61bb      	str	r3, [r7, #24]
 80041b2:	e008      	b.n	80041c6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	781a      	ldrb	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	b292      	uxth	r2, r2
 80041be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	3301      	adds	r3, #1
 80041c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041de:	b29b      	uxth	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1cb      	bne.n	800417c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	2200      	movs	r2, #0
 80041ec:	2140      	movs	r1, #64	; 0x40
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 fb81 	bl	80048f6 <UART_WaitOnFlagUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e005      	b.n	800420a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2220      	movs	r2, #32
 8004202:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004204:	2300      	movs	r3, #0
 8004206:	e000      	b.n	800420a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004208:	2302      	movs	r3, #2
  }
}
 800420a:	4618      	mov	r0, r3
 800420c:	3720      	adds	r7, #32
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
	...

08004214 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004214:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004218:	b088      	sub	sp, #32
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689a      	ldr	r2, [r3, #8]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	4313      	orrs	r3, r2
 8004238:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	4bac      	ldr	r3, [pc, #688]	; (80044f4 <UART_SetConfig+0x2e0>)
 8004242:	4013      	ands	r3, r2
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6812      	ldr	r2, [r2, #0]
 8004248:	69f9      	ldr	r1, [r7, #28]
 800424a:	430b      	orrs	r3, r1
 800424c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4aa2      	ldr	r2, [pc, #648]	; (80044f8 <UART_SetConfig+0x2e4>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d004      	beq.n	800427e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	4313      	orrs	r3, r2
 800427c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	69fa      	ldr	r2, [r7, #28]
 800428e:	430a      	orrs	r2, r1
 8004290:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a99      	ldr	r2, [pc, #612]	; (80044fc <UART_SetConfig+0x2e8>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d121      	bne.n	80042e0 <UART_SetConfig+0xcc>
 800429c:	4b98      	ldr	r3, [pc, #608]	; (8004500 <UART_SetConfig+0x2ec>)
 800429e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	2b03      	cmp	r3, #3
 80042a8:	d816      	bhi.n	80042d8 <UART_SetConfig+0xc4>
 80042aa:	a201      	add	r2, pc, #4	; (adr r2, 80042b0 <UART_SetConfig+0x9c>)
 80042ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b0:	080042c1 	.word	0x080042c1
 80042b4:	080042cd 	.word	0x080042cd
 80042b8:	080042c7 	.word	0x080042c7
 80042bc:	080042d3 	.word	0x080042d3
 80042c0:	2301      	movs	r3, #1
 80042c2:	76fb      	strb	r3, [r7, #27]
 80042c4:	e0e8      	b.n	8004498 <UART_SetConfig+0x284>
 80042c6:	2302      	movs	r3, #2
 80042c8:	76fb      	strb	r3, [r7, #27]
 80042ca:	e0e5      	b.n	8004498 <UART_SetConfig+0x284>
 80042cc:	2304      	movs	r3, #4
 80042ce:	76fb      	strb	r3, [r7, #27]
 80042d0:	e0e2      	b.n	8004498 <UART_SetConfig+0x284>
 80042d2:	2308      	movs	r3, #8
 80042d4:	76fb      	strb	r3, [r7, #27]
 80042d6:	e0df      	b.n	8004498 <UART_SetConfig+0x284>
 80042d8:	2310      	movs	r3, #16
 80042da:	76fb      	strb	r3, [r7, #27]
 80042dc:	bf00      	nop
 80042de:	e0db      	b.n	8004498 <UART_SetConfig+0x284>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a87      	ldr	r2, [pc, #540]	; (8004504 <UART_SetConfig+0x2f0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d134      	bne.n	8004354 <UART_SetConfig+0x140>
 80042ea:	4b85      	ldr	r3, [pc, #532]	; (8004500 <UART_SetConfig+0x2ec>)
 80042ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f0:	f003 030c 	and.w	r3, r3, #12
 80042f4:	2b0c      	cmp	r3, #12
 80042f6:	d829      	bhi.n	800434c <UART_SetConfig+0x138>
 80042f8:	a201      	add	r2, pc, #4	; (adr r2, 8004300 <UART_SetConfig+0xec>)
 80042fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fe:	bf00      	nop
 8004300:	08004335 	.word	0x08004335
 8004304:	0800434d 	.word	0x0800434d
 8004308:	0800434d 	.word	0x0800434d
 800430c:	0800434d 	.word	0x0800434d
 8004310:	08004341 	.word	0x08004341
 8004314:	0800434d 	.word	0x0800434d
 8004318:	0800434d 	.word	0x0800434d
 800431c:	0800434d 	.word	0x0800434d
 8004320:	0800433b 	.word	0x0800433b
 8004324:	0800434d 	.word	0x0800434d
 8004328:	0800434d 	.word	0x0800434d
 800432c:	0800434d 	.word	0x0800434d
 8004330:	08004347 	.word	0x08004347
 8004334:	2300      	movs	r3, #0
 8004336:	76fb      	strb	r3, [r7, #27]
 8004338:	e0ae      	b.n	8004498 <UART_SetConfig+0x284>
 800433a:	2302      	movs	r3, #2
 800433c:	76fb      	strb	r3, [r7, #27]
 800433e:	e0ab      	b.n	8004498 <UART_SetConfig+0x284>
 8004340:	2304      	movs	r3, #4
 8004342:	76fb      	strb	r3, [r7, #27]
 8004344:	e0a8      	b.n	8004498 <UART_SetConfig+0x284>
 8004346:	2308      	movs	r3, #8
 8004348:	76fb      	strb	r3, [r7, #27]
 800434a:	e0a5      	b.n	8004498 <UART_SetConfig+0x284>
 800434c:	2310      	movs	r3, #16
 800434e:	76fb      	strb	r3, [r7, #27]
 8004350:	bf00      	nop
 8004352:	e0a1      	b.n	8004498 <UART_SetConfig+0x284>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a6b      	ldr	r2, [pc, #428]	; (8004508 <UART_SetConfig+0x2f4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d120      	bne.n	80043a0 <UART_SetConfig+0x18c>
 800435e:	4b68      	ldr	r3, [pc, #416]	; (8004500 <UART_SetConfig+0x2ec>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004364:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004368:	2b10      	cmp	r3, #16
 800436a:	d00f      	beq.n	800438c <UART_SetConfig+0x178>
 800436c:	2b10      	cmp	r3, #16
 800436e:	d802      	bhi.n	8004376 <UART_SetConfig+0x162>
 8004370:	2b00      	cmp	r3, #0
 8004372:	d005      	beq.n	8004380 <UART_SetConfig+0x16c>
 8004374:	e010      	b.n	8004398 <UART_SetConfig+0x184>
 8004376:	2b20      	cmp	r3, #32
 8004378:	d005      	beq.n	8004386 <UART_SetConfig+0x172>
 800437a:	2b30      	cmp	r3, #48	; 0x30
 800437c:	d009      	beq.n	8004392 <UART_SetConfig+0x17e>
 800437e:	e00b      	b.n	8004398 <UART_SetConfig+0x184>
 8004380:	2300      	movs	r3, #0
 8004382:	76fb      	strb	r3, [r7, #27]
 8004384:	e088      	b.n	8004498 <UART_SetConfig+0x284>
 8004386:	2302      	movs	r3, #2
 8004388:	76fb      	strb	r3, [r7, #27]
 800438a:	e085      	b.n	8004498 <UART_SetConfig+0x284>
 800438c:	2304      	movs	r3, #4
 800438e:	76fb      	strb	r3, [r7, #27]
 8004390:	e082      	b.n	8004498 <UART_SetConfig+0x284>
 8004392:	2308      	movs	r3, #8
 8004394:	76fb      	strb	r3, [r7, #27]
 8004396:	e07f      	b.n	8004498 <UART_SetConfig+0x284>
 8004398:	2310      	movs	r3, #16
 800439a:	76fb      	strb	r3, [r7, #27]
 800439c:	bf00      	nop
 800439e:	e07b      	b.n	8004498 <UART_SetConfig+0x284>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a59      	ldr	r2, [pc, #356]	; (800450c <UART_SetConfig+0x2f8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d120      	bne.n	80043ec <UART_SetConfig+0x1d8>
 80043aa:	4b55      	ldr	r3, [pc, #340]	; (8004500 <UART_SetConfig+0x2ec>)
 80043ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80043b4:	2b40      	cmp	r3, #64	; 0x40
 80043b6:	d00f      	beq.n	80043d8 <UART_SetConfig+0x1c4>
 80043b8:	2b40      	cmp	r3, #64	; 0x40
 80043ba:	d802      	bhi.n	80043c2 <UART_SetConfig+0x1ae>
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d005      	beq.n	80043cc <UART_SetConfig+0x1b8>
 80043c0:	e010      	b.n	80043e4 <UART_SetConfig+0x1d0>
 80043c2:	2b80      	cmp	r3, #128	; 0x80
 80043c4:	d005      	beq.n	80043d2 <UART_SetConfig+0x1be>
 80043c6:	2bc0      	cmp	r3, #192	; 0xc0
 80043c8:	d009      	beq.n	80043de <UART_SetConfig+0x1ca>
 80043ca:	e00b      	b.n	80043e4 <UART_SetConfig+0x1d0>
 80043cc:	2300      	movs	r3, #0
 80043ce:	76fb      	strb	r3, [r7, #27]
 80043d0:	e062      	b.n	8004498 <UART_SetConfig+0x284>
 80043d2:	2302      	movs	r3, #2
 80043d4:	76fb      	strb	r3, [r7, #27]
 80043d6:	e05f      	b.n	8004498 <UART_SetConfig+0x284>
 80043d8:	2304      	movs	r3, #4
 80043da:	76fb      	strb	r3, [r7, #27]
 80043dc:	e05c      	b.n	8004498 <UART_SetConfig+0x284>
 80043de:	2308      	movs	r3, #8
 80043e0:	76fb      	strb	r3, [r7, #27]
 80043e2:	e059      	b.n	8004498 <UART_SetConfig+0x284>
 80043e4:	2310      	movs	r3, #16
 80043e6:	76fb      	strb	r3, [r7, #27]
 80043e8:	bf00      	nop
 80043ea:	e055      	b.n	8004498 <UART_SetConfig+0x284>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a47      	ldr	r2, [pc, #284]	; (8004510 <UART_SetConfig+0x2fc>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d124      	bne.n	8004440 <UART_SetConfig+0x22c>
 80043f6:	4b42      	ldr	r3, [pc, #264]	; (8004500 <UART_SetConfig+0x2ec>)
 80043f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004400:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004404:	d012      	beq.n	800442c <UART_SetConfig+0x218>
 8004406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800440a:	d802      	bhi.n	8004412 <UART_SetConfig+0x1fe>
 800440c:	2b00      	cmp	r3, #0
 800440e:	d007      	beq.n	8004420 <UART_SetConfig+0x20c>
 8004410:	e012      	b.n	8004438 <UART_SetConfig+0x224>
 8004412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004416:	d006      	beq.n	8004426 <UART_SetConfig+0x212>
 8004418:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800441c:	d009      	beq.n	8004432 <UART_SetConfig+0x21e>
 800441e:	e00b      	b.n	8004438 <UART_SetConfig+0x224>
 8004420:	2300      	movs	r3, #0
 8004422:	76fb      	strb	r3, [r7, #27]
 8004424:	e038      	b.n	8004498 <UART_SetConfig+0x284>
 8004426:	2302      	movs	r3, #2
 8004428:	76fb      	strb	r3, [r7, #27]
 800442a:	e035      	b.n	8004498 <UART_SetConfig+0x284>
 800442c:	2304      	movs	r3, #4
 800442e:	76fb      	strb	r3, [r7, #27]
 8004430:	e032      	b.n	8004498 <UART_SetConfig+0x284>
 8004432:	2308      	movs	r3, #8
 8004434:	76fb      	strb	r3, [r7, #27]
 8004436:	e02f      	b.n	8004498 <UART_SetConfig+0x284>
 8004438:	2310      	movs	r3, #16
 800443a:	76fb      	strb	r3, [r7, #27]
 800443c:	bf00      	nop
 800443e:	e02b      	b.n	8004498 <UART_SetConfig+0x284>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a2c      	ldr	r2, [pc, #176]	; (80044f8 <UART_SetConfig+0x2e4>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d124      	bne.n	8004494 <UART_SetConfig+0x280>
 800444a:	4b2d      	ldr	r3, [pc, #180]	; (8004500 <UART_SetConfig+0x2ec>)
 800444c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004450:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004458:	d012      	beq.n	8004480 <UART_SetConfig+0x26c>
 800445a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800445e:	d802      	bhi.n	8004466 <UART_SetConfig+0x252>
 8004460:	2b00      	cmp	r3, #0
 8004462:	d007      	beq.n	8004474 <UART_SetConfig+0x260>
 8004464:	e012      	b.n	800448c <UART_SetConfig+0x278>
 8004466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800446a:	d006      	beq.n	800447a <UART_SetConfig+0x266>
 800446c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004470:	d009      	beq.n	8004486 <UART_SetConfig+0x272>
 8004472:	e00b      	b.n	800448c <UART_SetConfig+0x278>
 8004474:	2300      	movs	r3, #0
 8004476:	76fb      	strb	r3, [r7, #27]
 8004478:	e00e      	b.n	8004498 <UART_SetConfig+0x284>
 800447a:	2302      	movs	r3, #2
 800447c:	76fb      	strb	r3, [r7, #27]
 800447e:	e00b      	b.n	8004498 <UART_SetConfig+0x284>
 8004480:	2304      	movs	r3, #4
 8004482:	76fb      	strb	r3, [r7, #27]
 8004484:	e008      	b.n	8004498 <UART_SetConfig+0x284>
 8004486:	2308      	movs	r3, #8
 8004488:	76fb      	strb	r3, [r7, #27]
 800448a:	e005      	b.n	8004498 <UART_SetConfig+0x284>
 800448c:	2310      	movs	r3, #16
 800448e:	76fb      	strb	r3, [r7, #27]
 8004490:	bf00      	nop
 8004492:	e001      	b.n	8004498 <UART_SetConfig+0x284>
 8004494:	2310      	movs	r3, #16
 8004496:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a16      	ldr	r2, [pc, #88]	; (80044f8 <UART_SetConfig+0x2e4>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	f040 8087 	bne.w	80045b2 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044a4:	7efb      	ldrb	r3, [r7, #27]
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d836      	bhi.n	8004518 <UART_SetConfig+0x304>
 80044aa:	a201      	add	r2, pc, #4	; (adr r2, 80044b0 <UART_SetConfig+0x29c>)
 80044ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b0:	080044d5 	.word	0x080044d5
 80044b4:	08004519 	.word	0x08004519
 80044b8:	080044dd 	.word	0x080044dd
 80044bc:	08004519 	.word	0x08004519
 80044c0:	080044e3 	.word	0x080044e3
 80044c4:	08004519 	.word	0x08004519
 80044c8:	08004519 	.word	0x08004519
 80044cc:	08004519 	.word	0x08004519
 80044d0:	080044eb 	.word	0x080044eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044d4:	f7ff f880 	bl	80035d8 <HAL_RCC_GetPCLK1Freq>
 80044d8:	6178      	str	r0, [r7, #20]
        break;
 80044da:	e022      	b.n	8004522 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044dc:	4b0d      	ldr	r3, [pc, #52]	; (8004514 <UART_SetConfig+0x300>)
 80044de:	617b      	str	r3, [r7, #20]
        break;
 80044e0:	e01f      	b.n	8004522 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044e2:	f7fe ffe3 	bl	80034ac <HAL_RCC_GetSysClockFreq>
 80044e6:	6178      	str	r0, [r7, #20]
        break;
 80044e8:	e01b      	b.n	8004522 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ee:	617b      	str	r3, [r7, #20]
        break;
 80044f0:	e017      	b.n	8004522 <UART_SetConfig+0x30e>
 80044f2:	bf00      	nop
 80044f4:	efff69f3 	.word	0xefff69f3
 80044f8:	40008000 	.word	0x40008000
 80044fc:	40013800 	.word	0x40013800
 8004500:	40021000 	.word	0x40021000
 8004504:	40004400 	.word	0x40004400
 8004508:	40004800 	.word	0x40004800
 800450c:	40004c00 	.word	0x40004c00
 8004510:	40005000 	.word	0x40005000
 8004514:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	76bb      	strb	r3, [r7, #26]
        break;
 8004520:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 80f1 	beq.w	800470c <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	4613      	mov	r3, r2
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	4413      	add	r3, r2
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	429a      	cmp	r2, r3
 8004538:	d305      	bcc.n	8004546 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	429a      	cmp	r2, r3
 8004544:	d902      	bls.n	800454c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	76bb      	strb	r3, [r7, #26]
 800454a:	e0df      	b.n	800470c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	4619      	mov	r1, r3
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	f04f 0400 	mov.w	r4, #0
 800455c:	0214      	lsls	r4, r2, #8
 800455e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004562:	020b      	lsls	r3, r1, #8
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6852      	ldr	r2, [r2, #4]
 8004568:	0852      	lsrs	r2, r2, #1
 800456a:	4611      	mov	r1, r2
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	eb13 0b01 	adds.w	fp, r3, r1
 8004574:	eb44 0c02 	adc.w	ip, r4, r2
 8004578:	4658      	mov	r0, fp
 800457a:	4661      	mov	r1, ip
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f04f 0400 	mov.w	r4, #0
 8004584:	461a      	mov	r2, r3
 8004586:	4623      	mov	r3, r4
 8004588:	f7fb fe7a 	bl	8000280 <__aeabi_uldivmod>
 800458c:	4603      	mov	r3, r0
 800458e:	460c      	mov	r4, r1
 8004590:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004598:	d308      	bcc.n	80045ac <UART_SetConfig+0x398>
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045a0:	d204      	bcs.n	80045ac <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	60da      	str	r2, [r3, #12]
 80045aa:	e0af      	b.n	800470c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	76bb      	strb	r3, [r7, #26]
 80045b0:	e0ac      	b.n	800470c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045ba:	d15b      	bne.n	8004674 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80045bc:	7efb      	ldrb	r3, [r7, #27]
 80045be:	2b08      	cmp	r3, #8
 80045c0:	d827      	bhi.n	8004612 <UART_SetConfig+0x3fe>
 80045c2:	a201      	add	r2, pc, #4	; (adr r2, 80045c8 <UART_SetConfig+0x3b4>)
 80045c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c8:	080045ed 	.word	0x080045ed
 80045cc:	080045f5 	.word	0x080045f5
 80045d0:	080045fd 	.word	0x080045fd
 80045d4:	08004613 	.word	0x08004613
 80045d8:	08004603 	.word	0x08004603
 80045dc:	08004613 	.word	0x08004613
 80045e0:	08004613 	.word	0x08004613
 80045e4:	08004613 	.word	0x08004613
 80045e8:	0800460b 	.word	0x0800460b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045ec:	f7fe fff4 	bl	80035d8 <HAL_RCC_GetPCLK1Freq>
 80045f0:	6178      	str	r0, [r7, #20]
        break;
 80045f2:	e013      	b.n	800461c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045f4:	f7ff f806 	bl	8003604 <HAL_RCC_GetPCLK2Freq>
 80045f8:	6178      	str	r0, [r7, #20]
        break;
 80045fa:	e00f      	b.n	800461c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045fc:	4b49      	ldr	r3, [pc, #292]	; (8004724 <UART_SetConfig+0x510>)
 80045fe:	617b      	str	r3, [r7, #20]
        break;
 8004600:	e00c      	b.n	800461c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004602:	f7fe ff53 	bl	80034ac <HAL_RCC_GetSysClockFreq>
 8004606:	6178      	str	r0, [r7, #20]
        break;
 8004608:	e008      	b.n	800461c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800460a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800460e:	617b      	str	r3, [r7, #20]
        break;
 8004610:	e004      	b.n	800461c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	76bb      	strb	r3, [r7, #26]
        break;
 800461a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d074      	beq.n	800470c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	005a      	lsls	r2, r3, #1
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	085b      	lsrs	r3, r3, #1
 800462c:	441a      	add	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	fbb2 f3f3 	udiv	r3, r2, r3
 8004636:	b29b      	uxth	r3, r3
 8004638:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	2b0f      	cmp	r3, #15
 800463e:	d916      	bls.n	800466e <UART_SetConfig+0x45a>
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004646:	d212      	bcs.n	800466e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	b29b      	uxth	r3, r3
 800464c:	f023 030f 	bic.w	r3, r3, #15
 8004650:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	085b      	lsrs	r3, r3, #1
 8004656:	b29b      	uxth	r3, r3
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	b29a      	uxth	r2, r3
 800465e:	89fb      	ldrh	r3, [r7, #14]
 8004660:	4313      	orrs	r3, r2
 8004662:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	89fa      	ldrh	r2, [r7, #14]
 800466a:	60da      	str	r2, [r3, #12]
 800466c:	e04e      	b.n	800470c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	76bb      	strb	r3, [r7, #26]
 8004672:	e04b      	b.n	800470c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004674:	7efb      	ldrb	r3, [r7, #27]
 8004676:	2b08      	cmp	r3, #8
 8004678:	d827      	bhi.n	80046ca <UART_SetConfig+0x4b6>
 800467a:	a201      	add	r2, pc, #4	; (adr r2, 8004680 <UART_SetConfig+0x46c>)
 800467c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004680:	080046a5 	.word	0x080046a5
 8004684:	080046ad 	.word	0x080046ad
 8004688:	080046b5 	.word	0x080046b5
 800468c:	080046cb 	.word	0x080046cb
 8004690:	080046bb 	.word	0x080046bb
 8004694:	080046cb 	.word	0x080046cb
 8004698:	080046cb 	.word	0x080046cb
 800469c:	080046cb 	.word	0x080046cb
 80046a0:	080046c3 	.word	0x080046c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046a4:	f7fe ff98 	bl	80035d8 <HAL_RCC_GetPCLK1Freq>
 80046a8:	6178      	str	r0, [r7, #20]
        break;
 80046aa:	e013      	b.n	80046d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046ac:	f7fe ffaa 	bl	8003604 <HAL_RCC_GetPCLK2Freq>
 80046b0:	6178      	str	r0, [r7, #20]
        break;
 80046b2:	e00f      	b.n	80046d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046b4:	4b1b      	ldr	r3, [pc, #108]	; (8004724 <UART_SetConfig+0x510>)
 80046b6:	617b      	str	r3, [r7, #20]
        break;
 80046b8:	e00c      	b.n	80046d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ba:	f7fe fef7 	bl	80034ac <HAL_RCC_GetSysClockFreq>
 80046be:	6178      	str	r0, [r7, #20]
        break;
 80046c0:	e008      	b.n	80046d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046c6:	617b      	str	r3, [r7, #20]
        break;
 80046c8:	e004      	b.n	80046d4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	76bb      	strb	r3, [r7, #26]
        break;
 80046d2:	bf00      	nop
    }

    if (pclk != 0U)
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d018      	beq.n	800470c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	085a      	lsrs	r2, r3, #1
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	441a      	add	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	2b0f      	cmp	r3, #15
 80046f4:	d908      	bls.n	8004708 <UART_SetConfig+0x4f4>
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046fc:	d204      	bcs.n	8004708 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	60da      	str	r2, [r3, #12]
 8004706:	e001      	b.n	800470c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004718:	7ebb      	ldrb	r3, [r7, #26]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3720      	adds	r7, #32
 800471e:	46bd      	mov	sp, r7
 8004720:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004724:	00f42400 	.word	0x00f42400

08004728 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00a      	beq.n	8004752 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	430a      	orrs	r2, r1
 8004772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00a      	beq.n	8004796 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	f003 0308 	and.w	r3, r3, #8
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	f003 0310 	and.w	r3, r3, #16
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	f003 0320 	and.w	r3, r3, #32
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004804:	2b00      	cmp	r3, #0
 8004806:	d01a      	beq.n	800483e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004826:	d10a      	bne.n	800483e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	605a      	str	r2, [r3, #4]
  }
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af02      	add	r7, sp, #8
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800487a:	f7fc ff3f 	bl	80016fc <HAL_GetTick>
 800487e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b08      	cmp	r3, #8
 800488c:	d10e      	bne.n	80048ac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800488e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f82a 	bl	80048f6 <UART_WaitOnFlagUntilTimeout>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e020      	b.n	80048ee <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0304 	and.w	r3, r3, #4
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d10e      	bne.n	80048d8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f814 	bl	80048f6 <UART_WaitOnFlagUntilTimeout>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e00a      	b.n	80048ee <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2220      	movs	r2, #32
 80048dc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2220      	movs	r2, #32
 80048e2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b084      	sub	sp, #16
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	60f8      	str	r0, [r7, #12]
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	603b      	str	r3, [r7, #0]
 8004902:	4613      	mov	r3, r2
 8004904:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004906:	e05d      	b.n	80049c4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800490e:	d059      	beq.n	80049c4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004910:	f7fc fef4 	bl	80016fc <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	429a      	cmp	r2, r3
 800491e:	d302      	bcc.n	8004926 <UART_WaitOnFlagUntilTimeout+0x30>
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d11b      	bne.n	800495e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004934:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0201 	bic.w	r2, r2, #1
 8004944:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2220      	movs	r2, #32
 800494a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2220      	movs	r2, #32
 8004950:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e042      	b.n	80049e4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b00      	cmp	r3, #0
 800496a:	d02b      	beq.n	80049c4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800497a:	d123      	bne.n	80049c4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004984:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004994:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 0201 	bic.w	r2, r2, #1
 80049a4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2220      	movs	r2, #32
 80049aa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2220      	movs	r2, #32
 80049b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2220      	movs	r2, #32
 80049b6:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e00f      	b.n	80049e4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	69da      	ldr	r2, [r3, #28]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	4013      	ands	r3, r2
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	bf0c      	ite	eq
 80049d4:	2301      	moveq	r3, #1
 80049d6:	2300      	movne	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	461a      	mov	r2, r3
 80049dc:	79fb      	ldrb	r3, [r7, #7]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d092      	beq.n	8004908 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b0e0      	sub	sp, #384	; 0x180
 80049f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80049f2:	f7fc fe1b 	bl	800162c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80049f6:	f000 f933 	bl	8004c60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80049fa:	f000 fa1b 	bl	8004e34 <MX_GPIO_Init>
  MX_I2C2_Init();
 80049fe:	f000 f9a9 	bl	8004d54 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8004a02:	f000 f9e7 	bl	8004dd4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /*initialization of temperature sensor, magenetometer, accelerometer and barometer*/

  BSP_TSENSOR_Init();
 8004a06:	f7fc f877 	bl	8000af8 <BSP_TSENSOR_Init>
  BSP_HSENSOR_Init();
 8004a0a:	f7fb ffbb 	bl	8000984 <BSP_HSENSOR_Init>
  BSP_MAGNETO_Init();
 8004a0e:	f7fb ffe7 	bl	80009e0 <BSP_MAGNETO_Init>
  BSP_MAGNETO_LowPower(1);
 8004a12:	2001      	movs	r0, #1
 8004a14:	f7fc f810 	bl	8000a38 <BSP_MAGNETO_LowPower>
  BSP_ACCELERO_Init();
 8004a18:	f7fb ff02 	bl	8000820 <BSP_ACCELERO_Init>
  BSP_ACCELERO_LowPower(1);
 8004a1c:	2001      	movs	r0, #1
 8004a1e:	f7fb ff3d 	bl	800089c <BSP_ACCELERO_LowPower>
  BSP_GYRO_Init();
 8004a22:	f7fb ff55 	bl	80008d0 <BSP_GYRO_Init>
  //BSP_GYRO_LowPower(1);
  BSP_PSENSOR_Init();
 8004a26:	f7fc f839 	bl	8000a9c <BSP_PSENSOR_Init>

  float temp = 0;
 8004a2a:	f04f 0300 	mov.w	r3, #0
 8004a2e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  float humidity = 0;
 8004a32:	f04f 0300 	mov.w	r3, #0
 8004a36:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  int16_t magnetic[3] = {0};
 8004a3a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	809a      	strh	r2, [r3, #4]
  float acceleration[3] = {0};
 8004a44:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	609a      	str	r2, [r3, #8]
  float gyro[3] = {0};
 8004a50:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	605a      	str	r2, [r3, #4]
 8004a5a:	609a      	str	r2, [r3, #8]

  float pressure = 0;
 8004a5c:	f04f 0300 	mov.w	r3, #0
 8004a60:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	//Display
	if(sensorType == 0){
 8004a64:	4b73      	ldr	r3, [pc, #460]	; (8004c34 <main+0x248>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d121      	bne.n	8004ab0 <main+0xc4>
		//temp = BSP_TSENSOR_ReadTemp();
		humidity = BSP_HSENSOR_ReadHumidity();
 8004a6c:	f7fb ffaa 	bl	80009c4 <BSP_HSENSOR_ReadHumidity>
 8004a70:	ed87 0a5e 	vstr	s0, [r7, #376]	; 0x178
		sprintf(tBuff, "The measured humidity: %d \n", (int16_t) humidity);
 8004a74:	edd7 7a5e 	vldr	s15, [r7, #376]	; 0x178
 8004a78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a7c:	ee17 3a90 	vmov	r3, s15
 8004a80:	b21b      	sxth	r3, r3
 8004a82:	461a      	mov	r2, r3
 8004a84:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004a88:	496b      	ldr	r1, [pc, #428]	; (8004c38 <main+0x24c>)
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fc40 	bl	8005310 <siprintf>
		//sprintf(tBuff, "The measured temperature is: %d   ", (int16_t) temp);
		memset(buffer, 0, strlen(buffer));
 8004a90:	486a      	ldr	r0, [pc, #424]	; (8004c3c <main+0x250>)
 8004a92:	f7fb fb9d 	bl	80001d0 <strlen>
 8004a96:	4603      	mov	r3, r0
 8004a98:	461a      	mov	r2, r3
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	4867      	ldr	r0, [pc, #412]	; (8004c3c <main+0x250>)
 8004a9e:	f000 fc2f 	bl	8005300 <memset>
		strcat(buffer, tBuff);
 8004aa2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4864      	ldr	r0, [pc, #400]	; (8004c3c <main+0x250>)
 8004aaa:	f000 fc51 	bl	8005350 <strcat>
 8004aae:	e0b2      	b.n	8004c16 <main+0x22a>
	}
	else if(sensorType == 1){
 8004ab0:	4b60      	ldr	r3, [pc, #384]	; (8004c34 <main+0x248>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d13b      	bne.n	8004b30 <main+0x144>
		//Get XYZ magnetometer values.
		BSP_MAGNETO_GetXYZ(magnetic);
 8004ab8:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7fb ffd5 	bl	8000a6c <BSP_MAGNETO_GetXYZ>
		sprintf(MxBuff, "Magn X is:%d ",  magnetic[0]);
 8004ac2:	f9b7 316c 	ldrsh.w	r3, [r7, #364]	; 0x16c
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004acc:	495c      	ldr	r1, [pc, #368]	; (8004c40 <main+0x254>)
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fc1e 	bl	8005310 <siprintf>
		sprintf(MyBuff, "Magn Y is:%d ",  magnetic[1]);
 8004ad4:	f9b7 316e 	ldrsh.w	r3, [r7, #366]	; 0x16e
 8004ad8:	461a      	mov	r2, r3
 8004ada:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004ade:	4959      	ldr	r1, [pc, #356]	; (8004c44 <main+0x258>)
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 fc15 	bl	8005310 <siprintf>
		sprintf(MzBuff, "Magn Z is:%d \n", magnetic[2]);
 8004ae6:	f9b7 3170 	ldrsh.w	r3, [r7, #368]	; 0x170
 8004aea:	461a      	mov	r2, r3
 8004aec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004af0:	4955      	ldr	r1, [pc, #340]	; (8004c48 <main+0x25c>)
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fc0c 	bl	8005310 <siprintf>
		memset(buffer, 0, strlen(buffer));
 8004af8:	4850      	ldr	r0, [pc, #320]	; (8004c3c <main+0x250>)
 8004afa:	f7fb fb69 	bl	80001d0 <strlen>
 8004afe:	4603      	mov	r3, r0
 8004b00:	461a      	mov	r2, r3
 8004b02:	2100      	movs	r1, #0
 8004b04:	484d      	ldr	r0, [pc, #308]	; (8004c3c <main+0x250>)
 8004b06:	f000 fbfb 	bl	8005300 <memset>
		strcat(buffer, MxBuff);
 8004b0a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004b0e:	4619      	mov	r1, r3
 8004b10:	484a      	ldr	r0, [pc, #296]	; (8004c3c <main+0x250>)
 8004b12:	f000 fc1d 	bl	8005350 <strcat>
		strcat(buffer, MyBuff);
 8004b16:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	4847      	ldr	r0, [pc, #284]	; (8004c3c <main+0x250>)
 8004b1e:	f000 fc17 	bl	8005350 <strcat>
		strcat(buffer, MzBuff);
 8004b22:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004b26:	4619      	mov	r1, r3
 8004b28:	4844      	ldr	r0, [pc, #272]	; (8004c3c <main+0x250>)
 8004b2a:	f000 fc11 	bl	8005350 <strcat>
 8004b2e:	e072      	b.n	8004c16 <main+0x22a>
	}
	else if(sensorType == 2){
 8004b30:	4b40      	ldr	r3, [pc, #256]	; (8004c34 <main+0x248>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d14a      	bne.n	8004bce <main+0x1e2>
		memset(buffer, 0, strlen(buffer));
		strcat(buffer, AxBuff);
		strcat(buffer, AyBuff);
		strcat(buffer, AzBuff);
		*/
		BSP_GYRO_GetXYZ(gyro);
 8004b38:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fb ff09 	bl	8000954 <BSP_GYRO_GetXYZ>
		sprintf(GxBuff, "Gyro X is:%d ", (int16_t) gyro[0]);
 8004b42:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 8004b46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b4a:	ee17 3a90 	vmov	r3, s15
 8004b4e:	b21b      	sxth	r3, r3
 8004b50:	461a      	mov	r2, r3
 8004b52:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004b56:	493d      	ldr	r1, [pc, #244]	; (8004c4c <main+0x260>)
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 fbd9 	bl	8005310 <siprintf>
		sprintf(GyBuff, "Gyro Y is:%d ", (int16_t) gyro[1]);
 8004b5e:	edd7 7a56 	vldr	s15, [r7, #344]	; 0x158
 8004b62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b66:	ee17 3a90 	vmov	r3, s15
 8004b6a:	b21b      	sxth	r3, r3
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b72:	4937      	ldr	r1, [pc, #220]	; (8004c50 <main+0x264>)
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 fbcb 	bl	8005310 <siprintf>
		sprintf(GzBuff, "Gyro Z is:%d \n", (int16_t) gyro[2]);
 8004b7a:	edd7 7a57 	vldr	s15, [r7, #348]	; 0x15c
 8004b7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b82:	ee17 3a90 	vmov	r3, s15
 8004b86:	b21b      	sxth	r3, r3
 8004b88:	461a      	mov	r2, r3
 8004b8a:	f107 0314 	add.w	r3, r7, #20
 8004b8e:	4931      	ldr	r1, [pc, #196]	; (8004c54 <main+0x268>)
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 fbbd 	bl	8005310 <siprintf>
		memset(buffer, 0, strlen(buffer));
 8004b96:	4829      	ldr	r0, [pc, #164]	; (8004c3c <main+0x250>)
 8004b98:	f7fb fb1a 	bl	80001d0 <strlen>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	4826      	ldr	r0, [pc, #152]	; (8004c3c <main+0x250>)
 8004ba4:	f000 fbac 	bl	8005300 <memset>
		strcat(buffer, GxBuff);
 8004ba8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004bac:	4619      	mov	r1, r3
 8004bae:	4823      	ldr	r0, [pc, #140]	; (8004c3c <main+0x250>)
 8004bb0:	f000 fbce 	bl	8005350 <strcat>
		strcat(buffer, GyBuff);
 8004bb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4820      	ldr	r0, [pc, #128]	; (8004c3c <main+0x250>)
 8004bbc:	f000 fbc8 	bl	8005350 <strcat>
		strcat(buffer, GzBuff);
 8004bc0:	f107 0314 	add.w	r3, r7, #20
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	481d      	ldr	r0, [pc, #116]	; (8004c3c <main+0x250>)
 8004bc8:	f000 fbc2 	bl	8005350 <strcat>
 8004bcc:	e023      	b.n	8004c16 <main+0x22a>

	}
	else if(sensorType == 3){
 8004bce:	4b19      	ldr	r3, [pc, #100]	; (8004c34 <main+0x248>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d11f      	bne.n	8004c16 <main+0x22a>
		//Read Pressure register of LPS22HB.
		pressure = BSP_PSENSOR_ReadPressure();
 8004bd6:	f7fb ff81 	bl	8000adc <BSP_PSENSOR_ReadPressure>
 8004bda:	ed87 0a5d 	vstr	s0, [r7, #372]	; 0x174
		sprintf(pBuff, "The measured Pressure is: %d \n", (int16_t) pressure);
 8004bde:	edd7 7a5d 	vldr	s15, [r7, #372]	; 0x174
 8004be2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004be6:	ee17 3a90 	vmov	r3, s15
 8004bea:	b21b      	sxth	r3, r3
 8004bec:	461a      	mov	r2, r3
 8004bee:	463b      	mov	r3, r7
 8004bf0:	4919      	ldr	r1, [pc, #100]	; (8004c58 <main+0x26c>)
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 fb8c 	bl	8005310 <siprintf>
		memset(buffer, 0, strlen(pBuff));
 8004bf8:	463b      	mov	r3, r7
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7fb fae8 	bl	80001d0 <strlen>
 8004c00:	4603      	mov	r3, r0
 8004c02:	461a      	mov	r2, r3
 8004c04:	2100      	movs	r1, #0
 8004c06:	480d      	ldr	r0, [pc, #52]	; (8004c3c <main+0x250>)
 8004c08:	f000 fb7a 	bl	8005300 <memset>
		strcat(buffer, pBuff);
 8004c0c:	463b      	mov	r3, r7
 8004c0e:	4619      	mov	r1, r3
 8004c10:	480a      	ldr	r0, [pc, #40]	; (8004c3c <main+0x250>)
 8004c12:	f000 fb9d 	bl	8005350 <strcat>
	}

	HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 8004c16:	4809      	ldr	r0, [pc, #36]	; (8004c3c <main+0x250>)
 8004c18:	f7fb fada 	bl	80001d0 <strlen>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	f247 5330 	movw	r3, #30000	; 0x7530
 8004c24:	4905      	ldr	r1, [pc, #20]	; (8004c3c <main+0x250>)
 8004c26:	480d      	ldr	r0, [pc, #52]	; (8004c5c <main+0x270>)
 8004c28:	f7ff fa60 	bl	80040ec <HAL_UART_Transmit>

	HAL_Delay(100);
 8004c2c:	2064      	movs	r0, #100	; 0x64
 8004c2e:	f7fc fd71 	bl	8001714 <HAL_Delay>
	if(sensorType == 0){
 8004c32:	e717      	b.n	8004a64 <main+0x78>
 8004c34:	20000168 	.word	0x20000168
 8004c38:	08005b54 	.word	0x08005b54
 8004c3c:	2000016c 	.word	0x2000016c
 8004c40:	08005b70 	.word	0x08005b70
 8004c44:	08005b80 	.word	0x08005b80
 8004c48:	08005b90 	.word	0x08005b90
 8004c4c:	08005ba0 	.word	0x08005ba0
 8004c50:	08005bb0 	.word	0x08005bb0
 8004c54:	08005bc0 	.word	0x08005bc0
 8004c58:	08005bd0 	.word	0x08005bd0
 8004c5c:	200002f8 	.word	0x200002f8

08004c60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b0b8      	sub	sp, #224	; 0xe0
 8004c64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004c66:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004c6a:	2244      	movs	r2, #68	; 0x44
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fb46 	bl	8005300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004c74:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	605a      	str	r2, [r3, #4]
 8004c7e:	609a      	str	r2, [r3, #8]
 8004c80:	60da      	str	r2, [r3, #12]
 8004c82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c84:	463b      	mov	r3, r7
 8004c86:	2288      	movs	r2, #136	; 0x88
 8004c88:	2100      	movs	r1, #0
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 fb38 	bl	8005300 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004c90:	2310      	movs	r3, #16
 8004c92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004c96:	2301      	movs	r3, #1
 8004c98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004ca2:	2360      	movs	r3, #96	; 0x60
 8004ca4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ca8:	2302      	movs	r3, #2
 8004caa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8004cba:	2328      	movs	r3, #40	; 0x28
 8004cbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004cc0:	2307      	movs	r3, #7
 8004cc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004ccc:	2302      	movs	r3, #2
 8004cce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004cd2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fd ff20 	bl	8002b1c <HAL_RCC_OscConfig>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8004ce2:	f000 f93f 	bl	8004f64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ce6:	230f      	movs	r3, #15
 8004ce8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004cec:	2303      	movs	r3, #3
 8004cee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004d04:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004d08:	2104      	movs	r1, #4
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fe faec 	bl	80032e8 <HAL_RCC_ClockConfig>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8004d16:	f000 f925 	bl	8004f64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2;
 8004d1a:	2381      	movs	r3, #129	; 0x81
 8004d1c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004d22:	2300      	movs	r3, #0
 8004d24:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d26:	463b      	mov	r3, r7
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7fe fce1 	bl	80036f0 <HAL_RCCEx_PeriphCLKConfig>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8004d34:	f000 f916 	bl	8004f64 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004d38:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004d3c:	f7fd fe98 	bl	8002a70 <HAL_PWREx_ControlVoltageScaling>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8004d46:	f000 f90d 	bl	8004f64 <Error_Handler>
  }
}
 8004d4a:	bf00      	nop
 8004d4c:	37e0      	adds	r7, #224	; 0xe0
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004d58:	4b1b      	ldr	r3, [pc, #108]	; (8004dc8 <MX_I2C2_Init+0x74>)
 8004d5a:	4a1c      	ldr	r2, [pc, #112]	; (8004dcc <MX_I2C2_Init+0x78>)
 8004d5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8004d5e:	4b1a      	ldr	r3, [pc, #104]	; (8004dc8 <MX_I2C2_Init+0x74>)
 8004d60:	4a1b      	ldr	r2, [pc, #108]	; (8004dd0 <MX_I2C2_Init+0x7c>)
 8004d62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004d64:	4b18      	ldr	r3, [pc, #96]	; (8004dc8 <MX_I2C2_Init+0x74>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004d6a:	4b17      	ldr	r3, [pc, #92]	; (8004dc8 <MX_I2C2_Init+0x74>)
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004d70:	4b15      	ldr	r3, [pc, #84]	; (8004dc8 <MX_I2C2_Init+0x74>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004d76:	4b14      	ldr	r3, [pc, #80]	; (8004dc8 <MX_I2C2_Init+0x74>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004d7c:	4b12      	ldr	r3, [pc, #72]	; (8004dc8 <MX_I2C2_Init+0x74>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004d82:	4b11      	ldr	r3, [pc, #68]	; (8004dc8 <MX_I2C2_Init+0x74>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004d88:	4b0f      	ldr	r3, [pc, #60]	; (8004dc8 <MX_I2C2_Init+0x74>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004d8e:	480e      	ldr	r0, [pc, #56]	; (8004dc8 <MX_I2C2_Init+0x74>)
 8004d90:	f7fd f8c0 	bl	8001f14 <HAL_I2C_Init>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8004d9a:	f000 f8e3 	bl	8004f64 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004d9e:	2100      	movs	r1, #0
 8004da0:	4809      	ldr	r0, [pc, #36]	; (8004dc8 <MX_I2C2_Init+0x74>)
 8004da2:	f7fd fdbf 	bl	8002924 <HAL_I2CEx_ConfigAnalogFilter>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8004dac:	f000 f8da 	bl	8004f64 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004db0:	2100      	movs	r1, #0
 8004db2:	4805      	ldr	r0, [pc, #20]	; (8004dc8 <MX_I2C2_Init+0x74>)
 8004db4:	f7fd fe01 	bl	80029ba <HAL_I2CEx_ConfigDigitalFilter>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8004dbe:	f000 f8d1 	bl	8004f64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004dc2:	bf00      	nop
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	200002ac 	.word	0x200002ac
 8004dcc:	40005800 	.word	0x40005800
 8004dd0:	10909cec 	.word	0x10909cec

08004dd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004dd8:	4b14      	ldr	r3, [pc, #80]	; (8004e2c <MX_USART1_UART_Init+0x58>)
 8004dda:	4a15      	ldr	r2, [pc, #84]	; (8004e30 <MX_USART1_UART_Init+0x5c>)
 8004ddc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004dde:	4b13      	ldr	r3, [pc, #76]	; (8004e2c <MX_USART1_UART_Init+0x58>)
 8004de0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004de4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004de6:	4b11      	ldr	r3, [pc, #68]	; (8004e2c <MX_USART1_UART_Init+0x58>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004dec:	4b0f      	ldr	r3, [pc, #60]	; (8004e2c <MX_USART1_UART_Init+0x58>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004df2:	4b0e      	ldr	r3, [pc, #56]	; (8004e2c <MX_USART1_UART_Init+0x58>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004df8:	4b0c      	ldr	r3, [pc, #48]	; (8004e2c <MX_USART1_UART_Init+0x58>)
 8004dfa:	220c      	movs	r2, #12
 8004dfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004dfe:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <MX_USART1_UART_Init+0x58>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e04:	4b09      	ldr	r3, [pc, #36]	; (8004e2c <MX_USART1_UART_Init+0x58>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004e0a:	4b08      	ldr	r3, [pc, #32]	; (8004e2c <MX_USART1_UART_Init+0x58>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004e10:	4b06      	ldr	r3, [pc, #24]	; (8004e2c <MX_USART1_UART_Init+0x58>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004e16:	4805      	ldr	r0, [pc, #20]	; (8004e2c <MX_USART1_UART_Init+0x58>)
 8004e18:	f7ff f91a 	bl	8004050 <HAL_UART_Init>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004e22:	f000 f89f 	bl	8004f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004e26:	bf00      	nop
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	200002f8 	.word	0x200002f8
 8004e30:	40013800 	.word	0x40013800

08004e34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b088      	sub	sp, #32
 8004e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e3a:	f107 030c 	add.w	r3, r7, #12
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	605a      	str	r2, [r3, #4]
 8004e44:	609a      	str	r2, [r3, #8]
 8004e46:	60da      	str	r2, [r3, #12]
 8004e48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e4a:	4b32      	ldr	r3, [pc, #200]	; (8004f14 <MX_GPIO_Init+0xe0>)
 8004e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e4e:	4a31      	ldr	r2, [pc, #196]	; (8004f14 <MX_GPIO_Init+0xe0>)
 8004e50:	f043 0310 	orr.w	r3, r3, #16
 8004e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e56:	4b2f      	ldr	r3, [pc, #188]	; (8004f14 <MX_GPIO_Init+0xe0>)
 8004e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e5a:	f003 0310 	and.w	r3, r3, #16
 8004e5e:	60bb      	str	r3, [r7, #8]
 8004e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e62:	4b2c      	ldr	r3, [pc, #176]	; (8004f14 <MX_GPIO_Init+0xe0>)
 8004e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e66:	4a2b      	ldr	r2, [pc, #172]	; (8004f14 <MX_GPIO_Init+0xe0>)
 8004e68:	f043 0304 	orr.w	r3, r3, #4
 8004e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e6e:	4b29      	ldr	r3, [pc, #164]	; (8004f14 <MX_GPIO_Init+0xe0>)
 8004e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e72:	f003 0304 	and.w	r3, r3, #4
 8004e76:	607b      	str	r3, [r7, #4]
 8004e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e7a:	4b26      	ldr	r3, [pc, #152]	; (8004f14 <MX_GPIO_Init+0xe0>)
 8004e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e7e:	4a25      	ldr	r2, [pc, #148]	; (8004f14 <MX_GPIO_Init+0xe0>)
 8004e80:	f043 0302 	orr.w	r3, r3, #2
 8004e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e86:	4b23      	ldr	r3, [pc, #140]	; (8004f14 <MX_GPIO_Init+0xe0>)
 8004e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	603b      	str	r3, [r7, #0]
 8004e90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8004e92:	2201      	movs	r2, #1
 8004e94:	2108      	movs	r1, #8
 8004e96:	4820      	ldr	r0, [pc, #128]	; (8004f18 <MX_GPIO_Init+0xe4>)
 8004e98:	f7fd f80c 	bl	8001eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ea2:	481e      	ldr	r0, [pc, #120]	; (8004f1c <MX_GPIO_Init+0xe8>)
 8004ea4:	f7fd f806 	bl	8001eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8004ea8:	2308      	movs	r3, #8
 8004eaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004eac:	2301      	movs	r3, #1
 8004eae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8004eb8:	f107 030c 	add.w	r3, r7, #12
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4816      	ldr	r0, [pc, #88]	; (8004f18 <MX_GPIO_Init+0xe4>)
 8004ec0:	f7fc fd5c 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004ec4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ec8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004eca:	4b15      	ldr	r3, [pc, #84]	; (8004f20 <MX_GPIO_Init+0xec>)
 8004ecc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ed2:	f107 030c 	add.w	r3, r7, #12
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	4812      	ldr	r0, [pc, #72]	; (8004f24 <MX_GPIO_Init+0xf0>)
 8004eda:	f7fc fd4f 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8004ede:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ee2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eec:	2300      	movs	r3, #0
 8004eee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8004ef0:	f107 030c 	add.w	r3, r7, #12
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	4809      	ldr	r0, [pc, #36]	; (8004f1c <MX_GPIO_Init+0xe8>)
 8004ef8:	f7fc fd40 	bl	800197c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004efc:	2200      	movs	r2, #0
 8004efe:	2100      	movs	r1, #0
 8004f00:	2028      	movs	r0, #40	; 0x28
 8004f02:	f7fc fd04 	bl	800190e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004f06:	2028      	movs	r0, #40	; 0x28
 8004f08:	f7fc fd1d 	bl	8001946 <HAL_NVIC_EnableIRQ>

}
 8004f0c:	bf00      	nop
 8004f0e:	3720      	adds	r7, #32
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40021000 	.word	0x40021000
 8004f18:	48001000 	.word	0x48001000
 8004f1c:	48000400 	.word	0x48000400
 8004f20:	10110000 	.word	0x10110000
 8004f24:	48000800 	.word	0x48000800

08004f28 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	4603      	mov	r3, r0
 8004f30:	80fb      	strh	r3, [r7, #6]
	if(GPIO_PIN == GPIO_PIN_13){
 8004f32:	88fb      	ldrh	r3, [r7, #6]
 8004f34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f38:	d10b      	bne.n	8004f52 <HAL_GPIO_EXTI_Callback+0x2a>
		sensorType ++;
 8004f3a:	4b09      	ldr	r3, [pc, #36]	; (8004f60 <HAL_GPIO_EXTI_Callback+0x38>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	4a07      	ldr	r2, [pc, #28]	; (8004f60 <HAL_GPIO_EXTI_Callback+0x38>)
 8004f42:	6013      	str	r3, [r2, #0]
		if(sensorType == 4){
 8004f44:	4b06      	ldr	r3, [pc, #24]	; (8004f60 <HAL_GPIO_EXTI_Callback+0x38>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	d102      	bne.n	8004f52 <HAL_GPIO_EXTI_Callback+0x2a>
			sensorType = 0;
 8004f4c:	4b04      	ldr	r3, [pc, #16]	; (8004f60 <HAL_GPIO_EXTI_Callback+0x38>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	601a      	str	r2, [r3, #0]
		}
	}
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	20000168 	.word	0x20000168

08004f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f64:	b480      	push	{r7}
 8004f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004f68:	bf00      	nop
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
	...

08004f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f7a:	4b0f      	ldr	r3, [pc, #60]	; (8004fb8 <HAL_MspInit+0x44>)
 8004f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f7e:	4a0e      	ldr	r2, [pc, #56]	; (8004fb8 <HAL_MspInit+0x44>)
 8004f80:	f043 0301 	orr.w	r3, r3, #1
 8004f84:	6613      	str	r3, [r2, #96]	; 0x60
 8004f86:	4b0c      	ldr	r3, [pc, #48]	; (8004fb8 <HAL_MspInit+0x44>)
 8004f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	607b      	str	r3, [r7, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f92:	4b09      	ldr	r3, [pc, #36]	; (8004fb8 <HAL_MspInit+0x44>)
 8004f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f96:	4a08      	ldr	r2, [pc, #32]	; (8004fb8 <HAL_MspInit+0x44>)
 8004f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f9c:	6593      	str	r3, [r2, #88]	; 0x58
 8004f9e:	4b06      	ldr	r3, [pc, #24]	; (8004fb8 <HAL_MspInit+0x44>)
 8004fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa6:	603b      	str	r3, [r7, #0]
 8004fa8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004faa:	bf00      	nop
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	40021000 	.word	0x40021000

08004fbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b08a      	sub	sp, #40	; 0x28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fc4:	f107 0314 	add.w	r3, r7, #20
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	605a      	str	r2, [r3, #4]
 8004fce:	609a      	str	r2, [r3, #8]
 8004fd0:	60da      	str	r2, [r3, #12]
 8004fd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a17      	ldr	r2, [pc, #92]	; (8005038 <HAL_I2C_MspInit+0x7c>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d128      	bne.n	8005030 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fde:	4b17      	ldr	r3, [pc, #92]	; (800503c <HAL_I2C_MspInit+0x80>)
 8004fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe2:	4a16      	ldr	r2, [pc, #88]	; (800503c <HAL_I2C_MspInit+0x80>)
 8004fe4:	f043 0302 	orr.w	r3, r3, #2
 8004fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fea:	4b14      	ldr	r3, [pc, #80]	; (800503c <HAL_I2C_MspInit+0x80>)
 8004fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	613b      	str	r3, [r7, #16]
 8004ff4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004ff6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ffc:	2312      	movs	r3, #18
 8004ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005000:	2301      	movs	r3, #1
 8005002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005004:	2303      	movs	r3, #3
 8005006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005008:	2304      	movs	r3, #4
 800500a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800500c:	f107 0314 	add.w	r3, r7, #20
 8005010:	4619      	mov	r1, r3
 8005012:	480b      	ldr	r0, [pc, #44]	; (8005040 <HAL_I2C_MspInit+0x84>)
 8005014:	f7fc fcb2 	bl	800197c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005018:	4b08      	ldr	r3, [pc, #32]	; (800503c <HAL_I2C_MspInit+0x80>)
 800501a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501c:	4a07      	ldr	r2, [pc, #28]	; (800503c <HAL_I2C_MspInit+0x80>)
 800501e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005022:	6593      	str	r3, [r2, #88]	; 0x58
 8005024:	4b05      	ldr	r3, [pc, #20]	; (800503c <HAL_I2C_MspInit+0x80>)
 8005026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005030:	bf00      	nop
 8005032:	3728      	adds	r7, #40	; 0x28
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40005800 	.word	0x40005800
 800503c:	40021000 	.word	0x40021000
 8005040:	48000400 	.word	0x48000400

08005044 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a0b      	ldr	r2, [pc, #44]	; (8005080 <HAL_I2C_MspDeInit+0x3c>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d10f      	bne.n	8005076 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8005056:	4b0b      	ldr	r3, [pc, #44]	; (8005084 <HAL_I2C_MspDeInit+0x40>)
 8005058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800505a:	4a0a      	ldr	r2, [pc, #40]	; (8005084 <HAL_I2C_MspDeInit+0x40>)
 800505c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005060:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8005062:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005066:	4808      	ldr	r0, [pc, #32]	; (8005088 <HAL_I2C_MspDeInit+0x44>)
 8005068:	f7fc fe30 	bl	8001ccc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 800506c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005070:	4805      	ldr	r0, [pc, #20]	; (8005088 <HAL_I2C_MspDeInit+0x44>)
 8005072:	f7fc fe2b 	bl	8001ccc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8005076:	bf00      	nop
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	40005800 	.word	0x40005800
 8005084:	40021000 	.word	0x40021000
 8005088:	48000400 	.word	0x48000400

0800508c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b08a      	sub	sp, #40	; 0x28
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005094:	f107 0314 	add.w	r3, r7, #20
 8005098:	2200      	movs	r2, #0
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	605a      	str	r2, [r3, #4]
 800509e:	609a      	str	r2, [r3, #8]
 80050a0:	60da      	str	r2, [r3, #12]
 80050a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a17      	ldr	r2, [pc, #92]	; (8005108 <HAL_UART_MspInit+0x7c>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d127      	bne.n	80050fe <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80050ae:	4b17      	ldr	r3, [pc, #92]	; (800510c <HAL_UART_MspInit+0x80>)
 80050b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050b2:	4a16      	ldr	r2, [pc, #88]	; (800510c <HAL_UART_MspInit+0x80>)
 80050b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050b8:	6613      	str	r3, [r2, #96]	; 0x60
 80050ba:	4b14      	ldr	r3, [pc, #80]	; (800510c <HAL_UART_MspInit+0x80>)
 80050bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050c2:	613b      	str	r3, [r7, #16]
 80050c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050c6:	4b11      	ldr	r3, [pc, #68]	; (800510c <HAL_UART_MspInit+0x80>)
 80050c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ca:	4a10      	ldr	r2, [pc, #64]	; (800510c <HAL_UART_MspInit+0x80>)
 80050cc:	f043 0302 	orr.w	r3, r3, #2
 80050d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050d2:	4b0e      	ldr	r3, [pc, #56]	; (800510c <HAL_UART_MspInit+0x80>)
 80050d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80050de:	23c0      	movs	r3, #192	; 0xc0
 80050e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050e2:	2302      	movs	r3, #2
 80050e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050ea:	2303      	movs	r3, #3
 80050ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80050ee:	2307      	movs	r3, #7
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050f2:	f107 0314 	add.w	r3, r7, #20
 80050f6:	4619      	mov	r1, r3
 80050f8:	4805      	ldr	r0, [pc, #20]	; (8005110 <HAL_UART_MspInit+0x84>)
 80050fa:	f7fc fc3f 	bl	800197c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80050fe:	bf00      	nop
 8005100:	3728      	adds	r7, #40	; 0x28
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	40013800 	.word	0x40013800
 800510c:	40021000 	.word	0x40021000
 8005110:	48000400 	.word	0x48000400

08005114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005118:	bf00      	nop
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005122:	b480      	push	{r7}
 8005124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005126:	e7fe      	b.n	8005126 <HardFault_Handler+0x4>

08005128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005128:	b480      	push	{r7}
 800512a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800512c:	e7fe      	b.n	800512c <MemManage_Handler+0x4>

0800512e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800512e:	b480      	push	{r7}
 8005130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005132:	e7fe      	b.n	8005132 <BusFault_Handler+0x4>

08005134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005134:	b480      	push	{r7}
 8005136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005138:	e7fe      	b.n	8005138 <UsageFault_Handler+0x4>

0800513a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800513a:	b480      	push	{r7}
 800513c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800513e:	bf00      	nop
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800514c:	bf00      	nop
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005156:	b480      	push	{r7}
 8005158:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800515a:	bf00      	nop
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005168:	f7fc fab4 	bl	80016d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800516c:	bf00      	nop
 800516e:	bd80      	pop	{r7, pc}

08005170 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005174:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005178:	f7fc feb4 	bl	8001ee4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800517c:	bf00      	nop
 800517e:	bd80      	pop	{r7, pc}

08005180 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005188:	4a14      	ldr	r2, [pc, #80]	; (80051dc <_sbrk+0x5c>)
 800518a:	4b15      	ldr	r3, [pc, #84]	; (80051e0 <_sbrk+0x60>)
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005194:	4b13      	ldr	r3, [pc, #76]	; (80051e4 <_sbrk+0x64>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d102      	bne.n	80051a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800519c:	4b11      	ldr	r3, [pc, #68]	; (80051e4 <_sbrk+0x64>)
 800519e:	4a12      	ldr	r2, [pc, #72]	; (80051e8 <_sbrk+0x68>)
 80051a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80051a2:	4b10      	ldr	r3, [pc, #64]	; (80051e4 <_sbrk+0x64>)
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4413      	add	r3, r2
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d207      	bcs.n	80051c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80051b0:	f000 f87c 	bl	80052ac <__errno>
 80051b4:	4602      	mov	r2, r0
 80051b6:	230c      	movs	r3, #12
 80051b8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80051ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051be:	e009      	b.n	80051d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80051c0:	4b08      	ldr	r3, [pc, #32]	; (80051e4 <_sbrk+0x64>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80051c6:	4b07      	ldr	r3, [pc, #28]	; (80051e4 <_sbrk+0x64>)
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4413      	add	r3, r2
 80051ce:	4a05      	ldr	r2, [pc, #20]	; (80051e4 <_sbrk+0x64>)
 80051d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80051d2:	68fb      	ldr	r3, [r7, #12]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3718      	adds	r7, #24
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	20018000 	.word	0x20018000
 80051e0:	00000400 	.word	0x00000400
 80051e4:	200001d0 	.word	0x200001d0
 80051e8:	20000380 	.word	0x20000380

080051ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80051f0:	4b17      	ldr	r3, [pc, #92]	; (8005250 <SystemInit+0x64>)
 80051f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f6:	4a16      	ldr	r2, [pc, #88]	; (8005250 <SystemInit+0x64>)
 80051f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005200:	4b14      	ldr	r3, [pc, #80]	; (8005254 <SystemInit+0x68>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a13      	ldr	r2, [pc, #76]	; (8005254 <SystemInit+0x68>)
 8005206:	f043 0301 	orr.w	r3, r3, #1
 800520a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800520c:	4b11      	ldr	r3, [pc, #68]	; (8005254 <SystemInit+0x68>)
 800520e:	2200      	movs	r2, #0
 8005210:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005212:	4b10      	ldr	r3, [pc, #64]	; (8005254 <SystemInit+0x68>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a0f      	ldr	r2, [pc, #60]	; (8005254 <SystemInit+0x68>)
 8005218:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800521c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005220:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005222:	4b0c      	ldr	r3, [pc, #48]	; (8005254 <SystemInit+0x68>)
 8005224:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005228:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800522a:	4b0a      	ldr	r3, [pc, #40]	; (8005254 <SystemInit+0x68>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a09      	ldr	r2, [pc, #36]	; (8005254 <SystemInit+0x68>)
 8005230:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005234:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005236:	4b07      	ldr	r3, [pc, #28]	; (8005254 <SystemInit+0x68>)
 8005238:	2200      	movs	r2, #0
 800523a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800523c:	4b04      	ldr	r3, [pc, #16]	; (8005250 <SystemInit+0x64>)
 800523e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005242:	609a      	str	r2, [r3, #8]
#endif
}
 8005244:	bf00      	nop
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	e000ed00 	.word	0xe000ed00
 8005254:	40021000 	.word	0x40021000

08005258 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005258:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005290 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800525c:	f7ff ffc6 	bl	80051ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005260:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005262:	e003      	b.n	800526c <LoopCopyDataInit>

08005264 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005264:	4b0b      	ldr	r3, [pc, #44]	; (8005294 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005266:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005268:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800526a:	3104      	adds	r1, #4

0800526c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800526c:	480a      	ldr	r0, [pc, #40]	; (8005298 <LoopForever+0xa>)
	ldr	r3, =_edata
 800526e:	4b0b      	ldr	r3, [pc, #44]	; (800529c <LoopForever+0xe>)
	adds	r2, r0, r1
 8005270:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005272:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005274:	d3f6      	bcc.n	8005264 <CopyDataInit>
	ldr	r2, =_sbss
 8005276:	4a0a      	ldr	r2, [pc, #40]	; (80052a0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005278:	e002      	b.n	8005280 <LoopFillZerobss>

0800527a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800527a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800527c:	f842 3b04 	str.w	r3, [r2], #4

08005280 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005280:	4b08      	ldr	r3, [pc, #32]	; (80052a4 <LoopForever+0x16>)
	cmp	r2, r3
 8005282:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005284:	d3f9      	bcc.n	800527a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005286:	f000 f817 	bl	80052b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800528a:	f7ff fbaf 	bl	80049ec <main>

0800528e <LoopForever>:

LoopForever:
    b LoopForever
 800528e:	e7fe      	b.n	800528e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005290:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8005294:	08005c7c 	.word	0x08005c7c
	ldr	r0, =_sdata
 8005298:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800529c:	20000134 	.word	0x20000134
	ldr	r2, =_sbss
 80052a0:	20000134 	.word	0x20000134
	ldr	r3, = _ebss
 80052a4:	2000037c 	.word	0x2000037c

080052a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80052a8:	e7fe      	b.n	80052a8 <ADC1_2_IRQHandler>
	...

080052ac <__errno>:
 80052ac:	4b01      	ldr	r3, [pc, #4]	; (80052b4 <__errno+0x8>)
 80052ae:	6818      	ldr	r0, [r3, #0]
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	200000d0 	.word	0x200000d0

080052b8 <__libc_init_array>:
 80052b8:	b570      	push	{r4, r5, r6, lr}
 80052ba:	4e0d      	ldr	r6, [pc, #52]	; (80052f0 <__libc_init_array+0x38>)
 80052bc:	4c0d      	ldr	r4, [pc, #52]	; (80052f4 <__libc_init_array+0x3c>)
 80052be:	1ba4      	subs	r4, r4, r6
 80052c0:	10a4      	asrs	r4, r4, #2
 80052c2:	2500      	movs	r5, #0
 80052c4:	42a5      	cmp	r5, r4
 80052c6:	d109      	bne.n	80052dc <__libc_init_array+0x24>
 80052c8:	4e0b      	ldr	r6, [pc, #44]	; (80052f8 <__libc_init_array+0x40>)
 80052ca:	4c0c      	ldr	r4, [pc, #48]	; (80052fc <__libc_init_array+0x44>)
 80052cc:	f000 fc36 	bl	8005b3c <_init>
 80052d0:	1ba4      	subs	r4, r4, r6
 80052d2:	10a4      	asrs	r4, r4, #2
 80052d4:	2500      	movs	r5, #0
 80052d6:	42a5      	cmp	r5, r4
 80052d8:	d105      	bne.n	80052e6 <__libc_init_array+0x2e>
 80052da:	bd70      	pop	{r4, r5, r6, pc}
 80052dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052e0:	4798      	blx	r3
 80052e2:	3501      	adds	r5, #1
 80052e4:	e7ee      	b.n	80052c4 <__libc_init_array+0xc>
 80052e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052ea:	4798      	blx	r3
 80052ec:	3501      	adds	r5, #1
 80052ee:	e7f2      	b.n	80052d6 <__libc_init_array+0x1e>
 80052f0:	08005c74 	.word	0x08005c74
 80052f4:	08005c74 	.word	0x08005c74
 80052f8:	08005c74 	.word	0x08005c74
 80052fc:	08005c78 	.word	0x08005c78

08005300 <memset>:
 8005300:	4402      	add	r2, r0
 8005302:	4603      	mov	r3, r0
 8005304:	4293      	cmp	r3, r2
 8005306:	d100      	bne.n	800530a <memset+0xa>
 8005308:	4770      	bx	lr
 800530a:	f803 1b01 	strb.w	r1, [r3], #1
 800530e:	e7f9      	b.n	8005304 <memset+0x4>

08005310 <siprintf>:
 8005310:	b40e      	push	{r1, r2, r3}
 8005312:	b500      	push	{lr}
 8005314:	b09c      	sub	sp, #112	; 0x70
 8005316:	ab1d      	add	r3, sp, #116	; 0x74
 8005318:	9002      	str	r0, [sp, #8]
 800531a:	9006      	str	r0, [sp, #24]
 800531c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005320:	4809      	ldr	r0, [pc, #36]	; (8005348 <siprintf+0x38>)
 8005322:	9107      	str	r1, [sp, #28]
 8005324:	9104      	str	r1, [sp, #16]
 8005326:	4909      	ldr	r1, [pc, #36]	; (800534c <siprintf+0x3c>)
 8005328:	f853 2b04 	ldr.w	r2, [r3], #4
 800532c:	9105      	str	r1, [sp, #20]
 800532e:	6800      	ldr	r0, [r0, #0]
 8005330:	9301      	str	r3, [sp, #4]
 8005332:	a902      	add	r1, sp, #8
 8005334:	f000 f876 	bl	8005424 <_svfiprintf_r>
 8005338:	9b02      	ldr	r3, [sp, #8]
 800533a:	2200      	movs	r2, #0
 800533c:	701a      	strb	r2, [r3, #0]
 800533e:	b01c      	add	sp, #112	; 0x70
 8005340:	f85d eb04 	ldr.w	lr, [sp], #4
 8005344:	b003      	add	sp, #12
 8005346:	4770      	bx	lr
 8005348:	200000d0 	.word	0x200000d0
 800534c:	ffff0208 	.word	0xffff0208

08005350 <strcat>:
 8005350:	b510      	push	{r4, lr}
 8005352:	4603      	mov	r3, r0
 8005354:	781a      	ldrb	r2, [r3, #0]
 8005356:	1c5c      	adds	r4, r3, #1
 8005358:	b93a      	cbnz	r2, 800536a <strcat+0x1a>
 800535a:	3b01      	subs	r3, #1
 800535c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005360:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005364:	2a00      	cmp	r2, #0
 8005366:	d1f9      	bne.n	800535c <strcat+0xc>
 8005368:	bd10      	pop	{r4, pc}
 800536a:	4623      	mov	r3, r4
 800536c:	e7f2      	b.n	8005354 <strcat+0x4>

0800536e <__ssputs_r>:
 800536e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005372:	688e      	ldr	r6, [r1, #8]
 8005374:	429e      	cmp	r6, r3
 8005376:	4682      	mov	sl, r0
 8005378:	460c      	mov	r4, r1
 800537a:	4690      	mov	r8, r2
 800537c:	4699      	mov	r9, r3
 800537e:	d837      	bhi.n	80053f0 <__ssputs_r+0x82>
 8005380:	898a      	ldrh	r2, [r1, #12]
 8005382:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005386:	d031      	beq.n	80053ec <__ssputs_r+0x7e>
 8005388:	6825      	ldr	r5, [r4, #0]
 800538a:	6909      	ldr	r1, [r1, #16]
 800538c:	1a6f      	subs	r7, r5, r1
 800538e:	6965      	ldr	r5, [r4, #20]
 8005390:	2302      	movs	r3, #2
 8005392:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005396:	fb95 f5f3 	sdiv	r5, r5, r3
 800539a:	f109 0301 	add.w	r3, r9, #1
 800539e:	443b      	add	r3, r7
 80053a0:	429d      	cmp	r5, r3
 80053a2:	bf38      	it	cc
 80053a4:	461d      	movcc	r5, r3
 80053a6:	0553      	lsls	r3, r2, #21
 80053a8:	d530      	bpl.n	800540c <__ssputs_r+0x9e>
 80053aa:	4629      	mov	r1, r5
 80053ac:	f000 fb2c 	bl	8005a08 <_malloc_r>
 80053b0:	4606      	mov	r6, r0
 80053b2:	b950      	cbnz	r0, 80053ca <__ssputs_r+0x5c>
 80053b4:	230c      	movs	r3, #12
 80053b6:	f8ca 3000 	str.w	r3, [sl]
 80053ba:	89a3      	ldrh	r3, [r4, #12]
 80053bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053c0:	81a3      	strh	r3, [r4, #12]
 80053c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ca:	463a      	mov	r2, r7
 80053cc:	6921      	ldr	r1, [r4, #16]
 80053ce:	f000 faa9 	bl	8005924 <memcpy>
 80053d2:	89a3      	ldrh	r3, [r4, #12]
 80053d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80053d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053dc:	81a3      	strh	r3, [r4, #12]
 80053de:	6126      	str	r6, [r4, #16]
 80053e0:	6165      	str	r5, [r4, #20]
 80053e2:	443e      	add	r6, r7
 80053e4:	1bed      	subs	r5, r5, r7
 80053e6:	6026      	str	r6, [r4, #0]
 80053e8:	60a5      	str	r5, [r4, #8]
 80053ea:	464e      	mov	r6, r9
 80053ec:	454e      	cmp	r6, r9
 80053ee:	d900      	bls.n	80053f2 <__ssputs_r+0x84>
 80053f0:	464e      	mov	r6, r9
 80053f2:	4632      	mov	r2, r6
 80053f4:	4641      	mov	r1, r8
 80053f6:	6820      	ldr	r0, [r4, #0]
 80053f8:	f000 fa9f 	bl	800593a <memmove>
 80053fc:	68a3      	ldr	r3, [r4, #8]
 80053fe:	1b9b      	subs	r3, r3, r6
 8005400:	60a3      	str	r3, [r4, #8]
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	441e      	add	r6, r3
 8005406:	6026      	str	r6, [r4, #0]
 8005408:	2000      	movs	r0, #0
 800540a:	e7dc      	b.n	80053c6 <__ssputs_r+0x58>
 800540c:	462a      	mov	r2, r5
 800540e:	f000 fb55 	bl	8005abc <_realloc_r>
 8005412:	4606      	mov	r6, r0
 8005414:	2800      	cmp	r0, #0
 8005416:	d1e2      	bne.n	80053de <__ssputs_r+0x70>
 8005418:	6921      	ldr	r1, [r4, #16]
 800541a:	4650      	mov	r0, sl
 800541c:	f000 faa6 	bl	800596c <_free_r>
 8005420:	e7c8      	b.n	80053b4 <__ssputs_r+0x46>
	...

08005424 <_svfiprintf_r>:
 8005424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005428:	461d      	mov	r5, r3
 800542a:	898b      	ldrh	r3, [r1, #12]
 800542c:	061f      	lsls	r7, r3, #24
 800542e:	b09d      	sub	sp, #116	; 0x74
 8005430:	4680      	mov	r8, r0
 8005432:	460c      	mov	r4, r1
 8005434:	4616      	mov	r6, r2
 8005436:	d50f      	bpl.n	8005458 <_svfiprintf_r+0x34>
 8005438:	690b      	ldr	r3, [r1, #16]
 800543a:	b96b      	cbnz	r3, 8005458 <_svfiprintf_r+0x34>
 800543c:	2140      	movs	r1, #64	; 0x40
 800543e:	f000 fae3 	bl	8005a08 <_malloc_r>
 8005442:	6020      	str	r0, [r4, #0]
 8005444:	6120      	str	r0, [r4, #16]
 8005446:	b928      	cbnz	r0, 8005454 <_svfiprintf_r+0x30>
 8005448:	230c      	movs	r3, #12
 800544a:	f8c8 3000 	str.w	r3, [r8]
 800544e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005452:	e0c8      	b.n	80055e6 <_svfiprintf_r+0x1c2>
 8005454:	2340      	movs	r3, #64	; 0x40
 8005456:	6163      	str	r3, [r4, #20]
 8005458:	2300      	movs	r3, #0
 800545a:	9309      	str	r3, [sp, #36]	; 0x24
 800545c:	2320      	movs	r3, #32
 800545e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005462:	2330      	movs	r3, #48	; 0x30
 8005464:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005468:	9503      	str	r5, [sp, #12]
 800546a:	f04f 0b01 	mov.w	fp, #1
 800546e:	4637      	mov	r7, r6
 8005470:	463d      	mov	r5, r7
 8005472:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005476:	b10b      	cbz	r3, 800547c <_svfiprintf_r+0x58>
 8005478:	2b25      	cmp	r3, #37	; 0x25
 800547a:	d13e      	bne.n	80054fa <_svfiprintf_r+0xd6>
 800547c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005480:	d00b      	beq.n	800549a <_svfiprintf_r+0x76>
 8005482:	4653      	mov	r3, sl
 8005484:	4632      	mov	r2, r6
 8005486:	4621      	mov	r1, r4
 8005488:	4640      	mov	r0, r8
 800548a:	f7ff ff70 	bl	800536e <__ssputs_r>
 800548e:	3001      	adds	r0, #1
 8005490:	f000 80a4 	beq.w	80055dc <_svfiprintf_r+0x1b8>
 8005494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005496:	4453      	add	r3, sl
 8005498:	9309      	str	r3, [sp, #36]	; 0x24
 800549a:	783b      	ldrb	r3, [r7, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	f000 809d 	beq.w	80055dc <_svfiprintf_r+0x1b8>
 80054a2:	2300      	movs	r3, #0
 80054a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054ac:	9304      	str	r3, [sp, #16]
 80054ae:	9307      	str	r3, [sp, #28]
 80054b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054b4:	931a      	str	r3, [sp, #104]	; 0x68
 80054b6:	462f      	mov	r7, r5
 80054b8:	2205      	movs	r2, #5
 80054ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 80054be:	4850      	ldr	r0, [pc, #320]	; (8005600 <_svfiprintf_r+0x1dc>)
 80054c0:	f7fa fe8e 	bl	80001e0 <memchr>
 80054c4:	9b04      	ldr	r3, [sp, #16]
 80054c6:	b9d0      	cbnz	r0, 80054fe <_svfiprintf_r+0xda>
 80054c8:	06d9      	lsls	r1, r3, #27
 80054ca:	bf44      	itt	mi
 80054cc:	2220      	movmi	r2, #32
 80054ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80054d2:	071a      	lsls	r2, r3, #28
 80054d4:	bf44      	itt	mi
 80054d6:	222b      	movmi	r2, #43	; 0x2b
 80054d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80054dc:	782a      	ldrb	r2, [r5, #0]
 80054de:	2a2a      	cmp	r2, #42	; 0x2a
 80054e0:	d015      	beq.n	800550e <_svfiprintf_r+0xea>
 80054e2:	9a07      	ldr	r2, [sp, #28]
 80054e4:	462f      	mov	r7, r5
 80054e6:	2000      	movs	r0, #0
 80054e8:	250a      	movs	r5, #10
 80054ea:	4639      	mov	r1, r7
 80054ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054f0:	3b30      	subs	r3, #48	; 0x30
 80054f2:	2b09      	cmp	r3, #9
 80054f4:	d94d      	bls.n	8005592 <_svfiprintf_r+0x16e>
 80054f6:	b1b8      	cbz	r0, 8005528 <_svfiprintf_r+0x104>
 80054f8:	e00f      	b.n	800551a <_svfiprintf_r+0xf6>
 80054fa:	462f      	mov	r7, r5
 80054fc:	e7b8      	b.n	8005470 <_svfiprintf_r+0x4c>
 80054fe:	4a40      	ldr	r2, [pc, #256]	; (8005600 <_svfiprintf_r+0x1dc>)
 8005500:	1a80      	subs	r0, r0, r2
 8005502:	fa0b f000 	lsl.w	r0, fp, r0
 8005506:	4318      	orrs	r0, r3
 8005508:	9004      	str	r0, [sp, #16]
 800550a:	463d      	mov	r5, r7
 800550c:	e7d3      	b.n	80054b6 <_svfiprintf_r+0x92>
 800550e:	9a03      	ldr	r2, [sp, #12]
 8005510:	1d11      	adds	r1, r2, #4
 8005512:	6812      	ldr	r2, [r2, #0]
 8005514:	9103      	str	r1, [sp, #12]
 8005516:	2a00      	cmp	r2, #0
 8005518:	db01      	blt.n	800551e <_svfiprintf_r+0xfa>
 800551a:	9207      	str	r2, [sp, #28]
 800551c:	e004      	b.n	8005528 <_svfiprintf_r+0x104>
 800551e:	4252      	negs	r2, r2
 8005520:	f043 0302 	orr.w	r3, r3, #2
 8005524:	9207      	str	r2, [sp, #28]
 8005526:	9304      	str	r3, [sp, #16]
 8005528:	783b      	ldrb	r3, [r7, #0]
 800552a:	2b2e      	cmp	r3, #46	; 0x2e
 800552c:	d10c      	bne.n	8005548 <_svfiprintf_r+0x124>
 800552e:	787b      	ldrb	r3, [r7, #1]
 8005530:	2b2a      	cmp	r3, #42	; 0x2a
 8005532:	d133      	bne.n	800559c <_svfiprintf_r+0x178>
 8005534:	9b03      	ldr	r3, [sp, #12]
 8005536:	1d1a      	adds	r2, r3, #4
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	9203      	str	r2, [sp, #12]
 800553c:	2b00      	cmp	r3, #0
 800553e:	bfb8      	it	lt
 8005540:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005544:	3702      	adds	r7, #2
 8005546:	9305      	str	r3, [sp, #20]
 8005548:	4d2e      	ldr	r5, [pc, #184]	; (8005604 <_svfiprintf_r+0x1e0>)
 800554a:	7839      	ldrb	r1, [r7, #0]
 800554c:	2203      	movs	r2, #3
 800554e:	4628      	mov	r0, r5
 8005550:	f7fa fe46 	bl	80001e0 <memchr>
 8005554:	b138      	cbz	r0, 8005566 <_svfiprintf_r+0x142>
 8005556:	2340      	movs	r3, #64	; 0x40
 8005558:	1b40      	subs	r0, r0, r5
 800555a:	fa03 f000 	lsl.w	r0, r3, r0
 800555e:	9b04      	ldr	r3, [sp, #16]
 8005560:	4303      	orrs	r3, r0
 8005562:	3701      	adds	r7, #1
 8005564:	9304      	str	r3, [sp, #16]
 8005566:	7839      	ldrb	r1, [r7, #0]
 8005568:	4827      	ldr	r0, [pc, #156]	; (8005608 <_svfiprintf_r+0x1e4>)
 800556a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800556e:	2206      	movs	r2, #6
 8005570:	1c7e      	adds	r6, r7, #1
 8005572:	f7fa fe35 	bl	80001e0 <memchr>
 8005576:	2800      	cmp	r0, #0
 8005578:	d038      	beq.n	80055ec <_svfiprintf_r+0x1c8>
 800557a:	4b24      	ldr	r3, [pc, #144]	; (800560c <_svfiprintf_r+0x1e8>)
 800557c:	bb13      	cbnz	r3, 80055c4 <_svfiprintf_r+0x1a0>
 800557e:	9b03      	ldr	r3, [sp, #12]
 8005580:	3307      	adds	r3, #7
 8005582:	f023 0307 	bic.w	r3, r3, #7
 8005586:	3308      	adds	r3, #8
 8005588:	9303      	str	r3, [sp, #12]
 800558a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800558c:	444b      	add	r3, r9
 800558e:	9309      	str	r3, [sp, #36]	; 0x24
 8005590:	e76d      	b.n	800546e <_svfiprintf_r+0x4a>
 8005592:	fb05 3202 	mla	r2, r5, r2, r3
 8005596:	2001      	movs	r0, #1
 8005598:	460f      	mov	r7, r1
 800559a:	e7a6      	b.n	80054ea <_svfiprintf_r+0xc6>
 800559c:	2300      	movs	r3, #0
 800559e:	3701      	adds	r7, #1
 80055a0:	9305      	str	r3, [sp, #20]
 80055a2:	4619      	mov	r1, r3
 80055a4:	250a      	movs	r5, #10
 80055a6:	4638      	mov	r0, r7
 80055a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055ac:	3a30      	subs	r2, #48	; 0x30
 80055ae:	2a09      	cmp	r2, #9
 80055b0:	d903      	bls.n	80055ba <_svfiprintf_r+0x196>
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d0c8      	beq.n	8005548 <_svfiprintf_r+0x124>
 80055b6:	9105      	str	r1, [sp, #20]
 80055b8:	e7c6      	b.n	8005548 <_svfiprintf_r+0x124>
 80055ba:	fb05 2101 	mla	r1, r5, r1, r2
 80055be:	2301      	movs	r3, #1
 80055c0:	4607      	mov	r7, r0
 80055c2:	e7f0      	b.n	80055a6 <_svfiprintf_r+0x182>
 80055c4:	ab03      	add	r3, sp, #12
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	4622      	mov	r2, r4
 80055ca:	4b11      	ldr	r3, [pc, #68]	; (8005610 <_svfiprintf_r+0x1ec>)
 80055cc:	a904      	add	r1, sp, #16
 80055ce:	4640      	mov	r0, r8
 80055d0:	f3af 8000 	nop.w
 80055d4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80055d8:	4681      	mov	r9, r0
 80055da:	d1d6      	bne.n	800558a <_svfiprintf_r+0x166>
 80055dc:	89a3      	ldrh	r3, [r4, #12]
 80055de:	065b      	lsls	r3, r3, #25
 80055e0:	f53f af35 	bmi.w	800544e <_svfiprintf_r+0x2a>
 80055e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055e6:	b01d      	add	sp, #116	; 0x74
 80055e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ec:	ab03      	add	r3, sp, #12
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	4622      	mov	r2, r4
 80055f2:	4b07      	ldr	r3, [pc, #28]	; (8005610 <_svfiprintf_r+0x1ec>)
 80055f4:	a904      	add	r1, sp, #16
 80055f6:	4640      	mov	r0, r8
 80055f8:	f000 f882 	bl	8005700 <_printf_i>
 80055fc:	e7ea      	b.n	80055d4 <_svfiprintf_r+0x1b0>
 80055fe:	bf00      	nop
 8005600:	08005c38 	.word	0x08005c38
 8005604:	08005c3e 	.word	0x08005c3e
 8005608:	08005c42 	.word	0x08005c42
 800560c:	00000000 	.word	0x00000000
 8005610:	0800536f 	.word	0x0800536f

08005614 <_printf_common>:
 8005614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005618:	4691      	mov	r9, r2
 800561a:	461f      	mov	r7, r3
 800561c:	688a      	ldr	r2, [r1, #8]
 800561e:	690b      	ldr	r3, [r1, #16]
 8005620:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005624:	4293      	cmp	r3, r2
 8005626:	bfb8      	it	lt
 8005628:	4613      	movlt	r3, r2
 800562a:	f8c9 3000 	str.w	r3, [r9]
 800562e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005632:	4606      	mov	r6, r0
 8005634:	460c      	mov	r4, r1
 8005636:	b112      	cbz	r2, 800563e <_printf_common+0x2a>
 8005638:	3301      	adds	r3, #1
 800563a:	f8c9 3000 	str.w	r3, [r9]
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	0699      	lsls	r1, r3, #26
 8005642:	bf42      	ittt	mi
 8005644:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005648:	3302      	addmi	r3, #2
 800564a:	f8c9 3000 	strmi.w	r3, [r9]
 800564e:	6825      	ldr	r5, [r4, #0]
 8005650:	f015 0506 	ands.w	r5, r5, #6
 8005654:	d107      	bne.n	8005666 <_printf_common+0x52>
 8005656:	f104 0a19 	add.w	sl, r4, #25
 800565a:	68e3      	ldr	r3, [r4, #12]
 800565c:	f8d9 2000 	ldr.w	r2, [r9]
 8005660:	1a9b      	subs	r3, r3, r2
 8005662:	42ab      	cmp	r3, r5
 8005664:	dc28      	bgt.n	80056b8 <_printf_common+0xa4>
 8005666:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800566a:	6822      	ldr	r2, [r4, #0]
 800566c:	3300      	adds	r3, #0
 800566e:	bf18      	it	ne
 8005670:	2301      	movne	r3, #1
 8005672:	0692      	lsls	r2, r2, #26
 8005674:	d42d      	bmi.n	80056d2 <_printf_common+0xbe>
 8005676:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800567a:	4639      	mov	r1, r7
 800567c:	4630      	mov	r0, r6
 800567e:	47c0      	blx	r8
 8005680:	3001      	adds	r0, #1
 8005682:	d020      	beq.n	80056c6 <_printf_common+0xb2>
 8005684:	6823      	ldr	r3, [r4, #0]
 8005686:	68e5      	ldr	r5, [r4, #12]
 8005688:	f8d9 2000 	ldr.w	r2, [r9]
 800568c:	f003 0306 	and.w	r3, r3, #6
 8005690:	2b04      	cmp	r3, #4
 8005692:	bf08      	it	eq
 8005694:	1aad      	subeq	r5, r5, r2
 8005696:	68a3      	ldr	r3, [r4, #8]
 8005698:	6922      	ldr	r2, [r4, #16]
 800569a:	bf0c      	ite	eq
 800569c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056a0:	2500      	movne	r5, #0
 80056a2:	4293      	cmp	r3, r2
 80056a4:	bfc4      	itt	gt
 80056a6:	1a9b      	subgt	r3, r3, r2
 80056a8:	18ed      	addgt	r5, r5, r3
 80056aa:	f04f 0900 	mov.w	r9, #0
 80056ae:	341a      	adds	r4, #26
 80056b0:	454d      	cmp	r5, r9
 80056b2:	d11a      	bne.n	80056ea <_printf_common+0xd6>
 80056b4:	2000      	movs	r0, #0
 80056b6:	e008      	b.n	80056ca <_printf_common+0xb6>
 80056b8:	2301      	movs	r3, #1
 80056ba:	4652      	mov	r2, sl
 80056bc:	4639      	mov	r1, r7
 80056be:	4630      	mov	r0, r6
 80056c0:	47c0      	blx	r8
 80056c2:	3001      	adds	r0, #1
 80056c4:	d103      	bne.n	80056ce <_printf_common+0xba>
 80056c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ce:	3501      	adds	r5, #1
 80056d0:	e7c3      	b.n	800565a <_printf_common+0x46>
 80056d2:	18e1      	adds	r1, r4, r3
 80056d4:	1c5a      	adds	r2, r3, #1
 80056d6:	2030      	movs	r0, #48	; 0x30
 80056d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056dc:	4422      	add	r2, r4
 80056de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056e6:	3302      	adds	r3, #2
 80056e8:	e7c5      	b.n	8005676 <_printf_common+0x62>
 80056ea:	2301      	movs	r3, #1
 80056ec:	4622      	mov	r2, r4
 80056ee:	4639      	mov	r1, r7
 80056f0:	4630      	mov	r0, r6
 80056f2:	47c0      	blx	r8
 80056f4:	3001      	adds	r0, #1
 80056f6:	d0e6      	beq.n	80056c6 <_printf_common+0xb2>
 80056f8:	f109 0901 	add.w	r9, r9, #1
 80056fc:	e7d8      	b.n	80056b0 <_printf_common+0x9c>
	...

08005700 <_printf_i>:
 8005700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005704:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005708:	460c      	mov	r4, r1
 800570a:	7e09      	ldrb	r1, [r1, #24]
 800570c:	b085      	sub	sp, #20
 800570e:	296e      	cmp	r1, #110	; 0x6e
 8005710:	4617      	mov	r7, r2
 8005712:	4606      	mov	r6, r0
 8005714:	4698      	mov	r8, r3
 8005716:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005718:	f000 80b3 	beq.w	8005882 <_printf_i+0x182>
 800571c:	d822      	bhi.n	8005764 <_printf_i+0x64>
 800571e:	2963      	cmp	r1, #99	; 0x63
 8005720:	d036      	beq.n	8005790 <_printf_i+0x90>
 8005722:	d80a      	bhi.n	800573a <_printf_i+0x3a>
 8005724:	2900      	cmp	r1, #0
 8005726:	f000 80b9 	beq.w	800589c <_printf_i+0x19c>
 800572a:	2958      	cmp	r1, #88	; 0x58
 800572c:	f000 8083 	beq.w	8005836 <_printf_i+0x136>
 8005730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005734:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005738:	e032      	b.n	80057a0 <_printf_i+0xa0>
 800573a:	2964      	cmp	r1, #100	; 0x64
 800573c:	d001      	beq.n	8005742 <_printf_i+0x42>
 800573e:	2969      	cmp	r1, #105	; 0x69
 8005740:	d1f6      	bne.n	8005730 <_printf_i+0x30>
 8005742:	6820      	ldr	r0, [r4, #0]
 8005744:	6813      	ldr	r3, [r2, #0]
 8005746:	0605      	lsls	r5, r0, #24
 8005748:	f103 0104 	add.w	r1, r3, #4
 800574c:	d52a      	bpl.n	80057a4 <_printf_i+0xa4>
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6011      	str	r1, [r2, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	da03      	bge.n	800575e <_printf_i+0x5e>
 8005756:	222d      	movs	r2, #45	; 0x2d
 8005758:	425b      	negs	r3, r3
 800575a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800575e:	486f      	ldr	r0, [pc, #444]	; (800591c <_printf_i+0x21c>)
 8005760:	220a      	movs	r2, #10
 8005762:	e039      	b.n	80057d8 <_printf_i+0xd8>
 8005764:	2973      	cmp	r1, #115	; 0x73
 8005766:	f000 809d 	beq.w	80058a4 <_printf_i+0x1a4>
 800576a:	d808      	bhi.n	800577e <_printf_i+0x7e>
 800576c:	296f      	cmp	r1, #111	; 0x6f
 800576e:	d020      	beq.n	80057b2 <_printf_i+0xb2>
 8005770:	2970      	cmp	r1, #112	; 0x70
 8005772:	d1dd      	bne.n	8005730 <_printf_i+0x30>
 8005774:	6823      	ldr	r3, [r4, #0]
 8005776:	f043 0320 	orr.w	r3, r3, #32
 800577a:	6023      	str	r3, [r4, #0]
 800577c:	e003      	b.n	8005786 <_printf_i+0x86>
 800577e:	2975      	cmp	r1, #117	; 0x75
 8005780:	d017      	beq.n	80057b2 <_printf_i+0xb2>
 8005782:	2978      	cmp	r1, #120	; 0x78
 8005784:	d1d4      	bne.n	8005730 <_printf_i+0x30>
 8005786:	2378      	movs	r3, #120	; 0x78
 8005788:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800578c:	4864      	ldr	r0, [pc, #400]	; (8005920 <_printf_i+0x220>)
 800578e:	e055      	b.n	800583c <_printf_i+0x13c>
 8005790:	6813      	ldr	r3, [r2, #0]
 8005792:	1d19      	adds	r1, r3, #4
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6011      	str	r1, [r2, #0]
 8005798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800579c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057a0:	2301      	movs	r3, #1
 80057a2:	e08c      	b.n	80058be <_printf_i+0x1be>
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6011      	str	r1, [r2, #0]
 80057a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057ac:	bf18      	it	ne
 80057ae:	b21b      	sxthne	r3, r3
 80057b0:	e7cf      	b.n	8005752 <_printf_i+0x52>
 80057b2:	6813      	ldr	r3, [r2, #0]
 80057b4:	6825      	ldr	r5, [r4, #0]
 80057b6:	1d18      	adds	r0, r3, #4
 80057b8:	6010      	str	r0, [r2, #0]
 80057ba:	0628      	lsls	r0, r5, #24
 80057bc:	d501      	bpl.n	80057c2 <_printf_i+0xc2>
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	e002      	b.n	80057c8 <_printf_i+0xc8>
 80057c2:	0668      	lsls	r0, r5, #25
 80057c4:	d5fb      	bpl.n	80057be <_printf_i+0xbe>
 80057c6:	881b      	ldrh	r3, [r3, #0]
 80057c8:	4854      	ldr	r0, [pc, #336]	; (800591c <_printf_i+0x21c>)
 80057ca:	296f      	cmp	r1, #111	; 0x6f
 80057cc:	bf14      	ite	ne
 80057ce:	220a      	movne	r2, #10
 80057d0:	2208      	moveq	r2, #8
 80057d2:	2100      	movs	r1, #0
 80057d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057d8:	6865      	ldr	r5, [r4, #4]
 80057da:	60a5      	str	r5, [r4, #8]
 80057dc:	2d00      	cmp	r5, #0
 80057de:	f2c0 8095 	blt.w	800590c <_printf_i+0x20c>
 80057e2:	6821      	ldr	r1, [r4, #0]
 80057e4:	f021 0104 	bic.w	r1, r1, #4
 80057e8:	6021      	str	r1, [r4, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d13d      	bne.n	800586a <_printf_i+0x16a>
 80057ee:	2d00      	cmp	r5, #0
 80057f0:	f040 808e 	bne.w	8005910 <_printf_i+0x210>
 80057f4:	4665      	mov	r5, ip
 80057f6:	2a08      	cmp	r2, #8
 80057f8:	d10b      	bne.n	8005812 <_printf_i+0x112>
 80057fa:	6823      	ldr	r3, [r4, #0]
 80057fc:	07db      	lsls	r3, r3, #31
 80057fe:	d508      	bpl.n	8005812 <_printf_i+0x112>
 8005800:	6923      	ldr	r3, [r4, #16]
 8005802:	6862      	ldr	r2, [r4, #4]
 8005804:	429a      	cmp	r2, r3
 8005806:	bfde      	ittt	le
 8005808:	2330      	movle	r3, #48	; 0x30
 800580a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800580e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005812:	ebac 0305 	sub.w	r3, ip, r5
 8005816:	6123      	str	r3, [r4, #16]
 8005818:	f8cd 8000 	str.w	r8, [sp]
 800581c:	463b      	mov	r3, r7
 800581e:	aa03      	add	r2, sp, #12
 8005820:	4621      	mov	r1, r4
 8005822:	4630      	mov	r0, r6
 8005824:	f7ff fef6 	bl	8005614 <_printf_common>
 8005828:	3001      	adds	r0, #1
 800582a:	d14d      	bne.n	80058c8 <_printf_i+0x1c8>
 800582c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005830:	b005      	add	sp, #20
 8005832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005836:	4839      	ldr	r0, [pc, #228]	; (800591c <_printf_i+0x21c>)
 8005838:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800583c:	6813      	ldr	r3, [r2, #0]
 800583e:	6821      	ldr	r1, [r4, #0]
 8005840:	1d1d      	adds	r5, r3, #4
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6015      	str	r5, [r2, #0]
 8005846:	060a      	lsls	r2, r1, #24
 8005848:	d50b      	bpl.n	8005862 <_printf_i+0x162>
 800584a:	07ca      	lsls	r2, r1, #31
 800584c:	bf44      	itt	mi
 800584e:	f041 0120 	orrmi.w	r1, r1, #32
 8005852:	6021      	strmi	r1, [r4, #0]
 8005854:	b91b      	cbnz	r3, 800585e <_printf_i+0x15e>
 8005856:	6822      	ldr	r2, [r4, #0]
 8005858:	f022 0220 	bic.w	r2, r2, #32
 800585c:	6022      	str	r2, [r4, #0]
 800585e:	2210      	movs	r2, #16
 8005860:	e7b7      	b.n	80057d2 <_printf_i+0xd2>
 8005862:	064d      	lsls	r5, r1, #25
 8005864:	bf48      	it	mi
 8005866:	b29b      	uxthmi	r3, r3
 8005868:	e7ef      	b.n	800584a <_printf_i+0x14a>
 800586a:	4665      	mov	r5, ip
 800586c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005870:	fb02 3311 	mls	r3, r2, r1, r3
 8005874:	5cc3      	ldrb	r3, [r0, r3]
 8005876:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800587a:	460b      	mov	r3, r1
 800587c:	2900      	cmp	r1, #0
 800587e:	d1f5      	bne.n	800586c <_printf_i+0x16c>
 8005880:	e7b9      	b.n	80057f6 <_printf_i+0xf6>
 8005882:	6813      	ldr	r3, [r2, #0]
 8005884:	6825      	ldr	r5, [r4, #0]
 8005886:	6961      	ldr	r1, [r4, #20]
 8005888:	1d18      	adds	r0, r3, #4
 800588a:	6010      	str	r0, [r2, #0]
 800588c:	0628      	lsls	r0, r5, #24
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	d501      	bpl.n	8005896 <_printf_i+0x196>
 8005892:	6019      	str	r1, [r3, #0]
 8005894:	e002      	b.n	800589c <_printf_i+0x19c>
 8005896:	066a      	lsls	r2, r5, #25
 8005898:	d5fb      	bpl.n	8005892 <_printf_i+0x192>
 800589a:	8019      	strh	r1, [r3, #0]
 800589c:	2300      	movs	r3, #0
 800589e:	6123      	str	r3, [r4, #16]
 80058a0:	4665      	mov	r5, ip
 80058a2:	e7b9      	b.n	8005818 <_printf_i+0x118>
 80058a4:	6813      	ldr	r3, [r2, #0]
 80058a6:	1d19      	adds	r1, r3, #4
 80058a8:	6011      	str	r1, [r2, #0]
 80058aa:	681d      	ldr	r5, [r3, #0]
 80058ac:	6862      	ldr	r2, [r4, #4]
 80058ae:	2100      	movs	r1, #0
 80058b0:	4628      	mov	r0, r5
 80058b2:	f7fa fc95 	bl	80001e0 <memchr>
 80058b6:	b108      	cbz	r0, 80058bc <_printf_i+0x1bc>
 80058b8:	1b40      	subs	r0, r0, r5
 80058ba:	6060      	str	r0, [r4, #4]
 80058bc:	6863      	ldr	r3, [r4, #4]
 80058be:	6123      	str	r3, [r4, #16]
 80058c0:	2300      	movs	r3, #0
 80058c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058c6:	e7a7      	b.n	8005818 <_printf_i+0x118>
 80058c8:	6923      	ldr	r3, [r4, #16]
 80058ca:	462a      	mov	r2, r5
 80058cc:	4639      	mov	r1, r7
 80058ce:	4630      	mov	r0, r6
 80058d0:	47c0      	blx	r8
 80058d2:	3001      	adds	r0, #1
 80058d4:	d0aa      	beq.n	800582c <_printf_i+0x12c>
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	079b      	lsls	r3, r3, #30
 80058da:	d413      	bmi.n	8005904 <_printf_i+0x204>
 80058dc:	68e0      	ldr	r0, [r4, #12]
 80058de:	9b03      	ldr	r3, [sp, #12]
 80058e0:	4298      	cmp	r0, r3
 80058e2:	bfb8      	it	lt
 80058e4:	4618      	movlt	r0, r3
 80058e6:	e7a3      	b.n	8005830 <_printf_i+0x130>
 80058e8:	2301      	movs	r3, #1
 80058ea:	464a      	mov	r2, r9
 80058ec:	4639      	mov	r1, r7
 80058ee:	4630      	mov	r0, r6
 80058f0:	47c0      	blx	r8
 80058f2:	3001      	adds	r0, #1
 80058f4:	d09a      	beq.n	800582c <_printf_i+0x12c>
 80058f6:	3501      	adds	r5, #1
 80058f8:	68e3      	ldr	r3, [r4, #12]
 80058fa:	9a03      	ldr	r2, [sp, #12]
 80058fc:	1a9b      	subs	r3, r3, r2
 80058fe:	42ab      	cmp	r3, r5
 8005900:	dcf2      	bgt.n	80058e8 <_printf_i+0x1e8>
 8005902:	e7eb      	b.n	80058dc <_printf_i+0x1dc>
 8005904:	2500      	movs	r5, #0
 8005906:	f104 0919 	add.w	r9, r4, #25
 800590a:	e7f5      	b.n	80058f8 <_printf_i+0x1f8>
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1ac      	bne.n	800586a <_printf_i+0x16a>
 8005910:	7803      	ldrb	r3, [r0, #0]
 8005912:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005916:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800591a:	e76c      	b.n	80057f6 <_printf_i+0xf6>
 800591c:	08005c49 	.word	0x08005c49
 8005920:	08005c5a 	.word	0x08005c5a

08005924 <memcpy>:
 8005924:	b510      	push	{r4, lr}
 8005926:	1e43      	subs	r3, r0, #1
 8005928:	440a      	add	r2, r1
 800592a:	4291      	cmp	r1, r2
 800592c:	d100      	bne.n	8005930 <memcpy+0xc>
 800592e:	bd10      	pop	{r4, pc}
 8005930:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005934:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005938:	e7f7      	b.n	800592a <memcpy+0x6>

0800593a <memmove>:
 800593a:	4288      	cmp	r0, r1
 800593c:	b510      	push	{r4, lr}
 800593e:	eb01 0302 	add.w	r3, r1, r2
 8005942:	d807      	bhi.n	8005954 <memmove+0x1a>
 8005944:	1e42      	subs	r2, r0, #1
 8005946:	4299      	cmp	r1, r3
 8005948:	d00a      	beq.n	8005960 <memmove+0x26>
 800594a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800594e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005952:	e7f8      	b.n	8005946 <memmove+0xc>
 8005954:	4283      	cmp	r3, r0
 8005956:	d9f5      	bls.n	8005944 <memmove+0xa>
 8005958:	1881      	adds	r1, r0, r2
 800595a:	1ad2      	subs	r2, r2, r3
 800595c:	42d3      	cmn	r3, r2
 800595e:	d100      	bne.n	8005962 <memmove+0x28>
 8005960:	bd10      	pop	{r4, pc}
 8005962:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005966:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800596a:	e7f7      	b.n	800595c <memmove+0x22>

0800596c <_free_r>:
 800596c:	b538      	push	{r3, r4, r5, lr}
 800596e:	4605      	mov	r5, r0
 8005970:	2900      	cmp	r1, #0
 8005972:	d045      	beq.n	8005a00 <_free_r+0x94>
 8005974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005978:	1f0c      	subs	r4, r1, #4
 800597a:	2b00      	cmp	r3, #0
 800597c:	bfb8      	it	lt
 800597e:	18e4      	addlt	r4, r4, r3
 8005980:	f000 f8d2 	bl	8005b28 <__malloc_lock>
 8005984:	4a1f      	ldr	r2, [pc, #124]	; (8005a04 <_free_r+0x98>)
 8005986:	6813      	ldr	r3, [r2, #0]
 8005988:	4610      	mov	r0, r2
 800598a:	b933      	cbnz	r3, 800599a <_free_r+0x2e>
 800598c:	6063      	str	r3, [r4, #4]
 800598e:	6014      	str	r4, [r2, #0]
 8005990:	4628      	mov	r0, r5
 8005992:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005996:	f000 b8c8 	b.w	8005b2a <__malloc_unlock>
 800599a:	42a3      	cmp	r3, r4
 800599c:	d90c      	bls.n	80059b8 <_free_r+0x4c>
 800599e:	6821      	ldr	r1, [r4, #0]
 80059a0:	1862      	adds	r2, r4, r1
 80059a2:	4293      	cmp	r3, r2
 80059a4:	bf04      	itt	eq
 80059a6:	681a      	ldreq	r2, [r3, #0]
 80059a8:	685b      	ldreq	r3, [r3, #4]
 80059aa:	6063      	str	r3, [r4, #4]
 80059ac:	bf04      	itt	eq
 80059ae:	1852      	addeq	r2, r2, r1
 80059b0:	6022      	streq	r2, [r4, #0]
 80059b2:	6004      	str	r4, [r0, #0]
 80059b4:	e7ec      	b.n	8005990 <_free_r+0x24>
 80059b6:	4613      	mov	r3, r2
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	b10a      	cbz	r2, 80059c0 <_free_r+0x54>
 80059bc:	42a2      	cmp	r2, r4
 80059be:	d9fa      	bls.n	80059b6 <_free_r+0x4a>
 80059c0:	6819      	ldr	r1, [r3, #0]
 80059c2:	1858      	adds	r0, r3, r1
 80059c4:	42a0      	cmp	r0, r4
 80059c6:	d10b      	bne.n	80059e0 <_free_r+0x74>
 80059c8:	6820      	ldr	r0, [r4, #0]
 80059ca:	4401      	add	r1, r0
 80059cc:	1858      	adds	r0, r3, r1
 80059ce:	4282      	cmp	r2, r0
 80059d0:	6019      	str	r1, [r3, #0]
 80059d2:	d1dd      	bne.n	8005990 <_free_r+0x24>
 80059d4:	6810      	ldr	r0, [r2, #0]
 80059d6:	6852      	ldr	r2, [r2, #4]
 80059d8:	605a      	str	r2, [r3, #4]
 80059da:	4401      	add	r1, r0
 80059dc:	6019      	str	r1, [r3, #0]
 80059de:	e7d7      	b.n	8005990 <_free_r+0x24>
 80059e0:	d902      	bls.n	80059e8 <_free_r+0x7c>
 80059e2:	230c      	movs	r3, #12
 80059e4:	602b      	str	r3, [r5, #0]
 80059e6:	e7d3      	b.n	8005990 <_free_r+0x24>
 80059e8:	6820      	ldr	r0, [r4, #0]
 80059ea:	1821      	adds	r1, r4, r0
 80059ec:	428a      	cmp	r2, r1
 80059ee:	bf04      	itt	eq
 80059f0:	6811      	ldreq	r1, [r2, #0]
 80059f2:	6852      	ldreq	r2, [r2, #4]
 80059f4:	6062      	str	r2, [r4, #4]
 80059f6:	bf04      	itt	eq
 80059f8:	1809      	addeq	r1, r1, r0
 80059fa:	6021      	streq	r1, [r4, #0]
 80059fc:	605c      	str	r4, [r3, #4]
 80059fe:	e7c7      	b.n	8005990 <_free_r+0x24>
 8005a00:	bd38      	pop	{r3, r4, r5, pc}
 8005a02:	bf00      	nop
 8005a04:	200001d4 	.word	0x200001d4

08005a08 <_malloc_r>:
 8005a08:	b570      	push	{r4, r5, r6, lr}
 8005a0a:	1ccd      	adds	r5, r1, #3
 8005a0c:	f025 0503 	bic.w	r5, r5, #3
 8005a10:	3508      	adds	r5, #8
 8005a12:	2d0c      	cmp	r5, #12
 8005a14:	bf38      	it	cc
 8005a16:	250c      	movcc	r5, #12
 8005a18:	2d00      	cmp	r5, #0
 8005a1a:	4606      	mov	r6, r0
 8005a1c:	db01      	blt.n	8005a22 <_malloc_r+0x1a>
 8005a1e:	42a9      	cmp	r1, r5
 8005a20:	d903      	bls.n	8005a2a <_malloc_r+0x22>
 8005a22:	230c      	movs	r3, #12
 8005a24:	6033      	str	r3, [r6, #0]
 8005a26:	2000      	movs	r0, #0
 8005a28:	bd70      	pop	{r4, r5, r6, pc}
 8005a2a:	f000 f87d 	bl	8005b28 <__malloc_lock>
 8005a2e:	4a21      	ldr	r2, [pc, #132]	; (8005ab4 <_malloc_r+0xac>)
 8005a30:	6814      	ldr	r4, [r2, #0]
 8005a32:	4621      	mov	r1, r4
 8005a34:	b991      	cbnz	r1, 8005a5c <_malloc_r+0x54>
 8005a36:	4c20      	ldr	r4, [pc, #128]	; (8005ab8 <_malloc_r+0xb0>)
 8005a38:	6823      	ldr	r3, [r4, #0]
 8005a3a:	b91b      	cbnz	r3, 8005a44 <_malloc_r+0x3c>
 8005a3c:	4630      	mov	r0, r6
 8005a3e:	f000 f863 	bl	8005b08 <_sbrk_r>
 8005a42:	6020      	str	r0, [r4, #0]
 8005a44:	4629      	mov	r1, r5
 8005a46:	4630      	mov	r0, r6
 8005a48:	f000 f85e 	bl	8005b08 <_sbrk_r>
 8005a4c:	1c43      	adds	r3, r0, #1
 8005a4e:	d124      	bne.n	8005a9a <_malloc_r+0x92>
 8005a50:	230c      	movs	r3, #12
 8005a52:	6033      	str	r3, [r6, #0]
 8005a54:	4630      	mov	r0, r6
 8005a56:	f000 f868 	bl	8005b2a <__malloc_unlock>
 8005a5a:	e7e4      	b.n	8005a26 <_malloc_r+0x1e>
 8005a5c:	680b      	ldr	r3, [r1, #0]
 8005a5e:	1b5b      	subs	r3, r3, r5
 8005a60:	d418      	bmi.n	8005a94 <_malloc_r+0x8c>
 8005a62:	2b0b      	cmp	r3, #11
 8005a64:	d90f      	bls.n	8005a86 <_malloc_r+0x7e>
 8005a66:	600b      	str	r3, [r1, #0]
 8005a68:	50cd      	str	r5, [r1, r3]
 8005a6a:	18cc      	adds	r4, r1, r3
 8005a6c:	4630      	mov	r0, r6
 8005a6e:	f000 f85c 	bl	8005b2a <__malloc_unlock>
 8005a72:	f104 000b 	add.w	r0, r4, #11
 8005a76:	1d23      	adds	r3, r4, #4
 8005a78:	f020 0007 	bic.w	r0, r0, #7
 8005a7c:	1ac3      	subs	r3, r0, r3
 8005a7e:	d0d3      	beq.n	8005a28 <_malloc_r+0x20>
 8005a80:	425a      	negs	r2, r3
 8005a82:	50e2      	str	r2, [r4, r3]
 8005a84:	e7d0      	b.n	8005a28 <_malloc_r+0x20>
 8005a86:	428c      	cmp	r4, r1
 8005a88:	684b      	ldr	r3, [r1, #4]
 8005a8a:	bf16      	itet	ne
 8005a8c:	6063      	strne	r3, [r4, #4]
 8005a8e:	6013      	streq	r3, [r2, #0]
 8005a90:	460c      	movne	r4, r1
 8005a92:	e7eb      	b.n	8005a6c <_malloc_r+0x64>
 8005a94:	460c      	mov	r4, r1
 8005a96:	6849      	ldr	r1, [r1, #4]
 8005a98:	e7cc      	b.n	8005a34 <_malloc_r+0x2c>
 8005a9a:	1cc4      	adds	r4, r0, #3
 8005a9c:	f024 0403 	bic.w	r4, r4, #3
 8005aa0:	42a0      	cmp	r0, r4
 8005aa2:	d005      	beq.n	8005ab0 <_malloc_r+0xa8>
 8005aa4:	1a21      	subs	r1, r4, r0
 8005aa6:	4630      	mov	r0, r6
 8005aa8:	f000 f82e 	bl	8005b08 <_sbrk_r>
 8005aac:	3001      	adds	r0, #1
 8005aae:	d0cf      	beq.n	8005a50 <_malloc_r+0x48>
 8005ab0:	6025      	str	r5, [r4, #0]
 8005ab2:	e7db      	b.n	8005a6c <_malloc_r+0x64>
 8005ab4:	200001d4 	.word	0x200001d4
 8005ab8:	200001d8 	.word	0x200001d8

08005abc <_realloc_r>:
 8005abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005abe:	4607      	mov	r7, r0
 8005ac0:	4614      	mov	r4, r2
 8005ac2:	460e      	mov	r6, r1
 8005ac4:	b921      	cbnz	r1, 8005ad0 <_realloc_r+0x14>
 8005ac6:	4611      	mov	r1, r2
 8005ac8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005acc:	f7ff bf9c 	b.w	8005a08 <_malloc_r>
 8005ad0:	b922      	cbnz	r2, 8005adc <_realloc_r+0x20>
 8005ad2:	f7ff ff4b 	bl	800596c <_free_r>
 8005ad6:	4625      	mov	r5, r4
 8005ad8:	4628      	mov	r0, r5
 8005ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005adc:	f000 f826 	bl	8005b2c <_malloc_usable_size_r>
 8005ae0:	42a0      	cmp	r0, r4
 8005ae2:	d20f      	bcs.n	8005b04 <_realloc_r+0x48>
 8005ae4:	4621      	mov	r1, r4
 8005ae6:	4638      	mov	r0, r7
 8005ae8:	f7ff ff8e 	bl	8005a08 <_malloc_r>
 8005aec:	4605      	mov	r5, r0
 8005aee:	2800      	cmp	r0, #0
 8005af0:	d0f2      	beq.n	8005ad8 <_realloc_r+0x1c>
 8005af2:	4631      	mov	r1, r6
 8005af4:	4622      	mov	r2, r4
 8005af6:	f7ff ff15 	bl	8005924 <memcpy>
 8005afa:	4631      	mov	r1, r6
 8005afc:	4638      	mov	r0, r7
 8005afe:	f7ff ff35 	bl	800596c <_free_r>
 8005b02:	e7e9      	b.n	8005ad8 <_realloc_r+0x1c>
 8005b04:	4635      	mov	r5, r6
 8005b06:	e7e7      	b.n	8005ad8 <_realloc_r+0x1c>

08005b08 <_sbrk_r>:
 8005b08:	b538      	push	{r3, r4, r5, lr}
 8005b0a:	4c06      	ldr	r4, [pc, #24]	; (8005b24 <_sbrk_r+0x1c>)
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	4605      	mov	r5, r0
 8005b10:	4608      	mov	r0, r1
 8005b12:	6023      	str	r3, [r4, #0]
 8005b14:	f7ff fb34 	bl	8005180 <_sbrk>
 8005b18:	1c43      	adds	r3, r0, #1
 8005b1a:	d102      	bne.n	8005b22 <_sbrk_r+0x1a>
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	b103      	cbz	r3, 8005b22 <_sbrk_r+0x1a>
 8005b20:	602b      	str	r3, [r5, #0]
 8005b22:	bd38      	pop	{r3, r4, r5, pc}
 8005b24:	20000378 	.word	0x20000378

08005b28 <__malloc_lock>:
 8005b28:	4770      	bx	lr

08005b2a <__malloc_unlock>:
 8005b2a:	4770      	bx	lr

08005b2c <_malloc_usable_size_r>:
 8005b2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b30:	1f18      	subs	r0, r3, #4
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	bfbc      	itt	lt
 8005b36:	580b      	ldrlt	r3, [r1, r0]
 8005b38:	18c0      	addlt	r0, r0, r3
 8005b3a:	4770      	bx	lr

08005b3c <_init>:
 8005b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3e:	bf00      	nop
 8005b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b42:	bc08      	pop	{r3}
 8005b44:	469e      	mov	lr, r3
 8005b46:	4770      	bx	lr

08005b48 <_fini>:
 8005b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4a:	bf00      	nop
 8005b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b4e:	bc08      	pop	{r3}
 8005b50:	469e      	mov	lr, r3
 8005b52:	4770      	bx	lr
