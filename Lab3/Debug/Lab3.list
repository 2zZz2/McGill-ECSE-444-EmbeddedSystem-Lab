
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003da8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003f30  08003f30  00013f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f70  08003f70  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f70  08003f70  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f70  08003f70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f70  08003f70  00013f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f74  08003f74  00013f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08003f84  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08003f84  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1aa  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015c9  00000000  00000000  0002a1e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009c8  00000000  00000000  0002b7b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000910  00000000  00000000  0002c178  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025d90  00000000  00000000  0002ca88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007a78  00000000  00000000  00052818  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f1be3  00000000  00000000  0005a290  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014be73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002904  00000000  00000000  0014bef0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003f18 	.word	0x08003f18

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003f18 	.word	0x08003f18

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000964:	b5b0      	push	{r4, r5, r7, lr}
 8000966:	b08e      	sub	sp, #56	; 0x38
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096a:	f000 fb10 	bl	8000f8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096e:	f000 f8ab 	bl	8000ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ADC1_Init();
 8000972:	f000 f931 	bl	8000bd8 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000976:	f000 f9a5 	bl	8000cc4 <MX_ADC3_Init>

    /* USER CODE BEGIN 3 */


	 //HAL_Delay(100);
	 HAL_ADC_Start(&hadc1);
 800097a:	484b      	ldr	r0, [pc, #300]	; (8000aa8 <main+0x144>)
 800097c:	f000 ff02 	bl	8001784 <HAL_ADC_Start>
	 HAL_ADC_Start(&hadc3);
 8000980:	484a      	ldr	r0, [pc, #296]	; (8000aac <main+0x148>)
 8000982:	f000 feff 	bl	8001784 <HAL_ADC_Start>

  	 //read data
	 if(HAL_ADC_PollForConversion(&hadc3, 100) == HAL_OK && HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK){	//checks if conversion is done
 8000986:	2164      	movs	r1, #100	; 0x64
 8000988:	4848      	ldr	r0, [pc, #288]	; (8000aac <main+0x148>)
 800098a:	f000 ffe9 	bl	8001960 <HAL_ADC_PollForConversion>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d123      	bne.n	80009dc <main+0x78>
 8000994:	2164      	movs	r1, #100	; 0x64
 8000996:	4844      	ldr	r0, [pc, #272]	; (8000aa8 <main+0x144>)
 8000998:	f000 ffe2 	bl	8001960 <HAL_ADC_PollForConversion>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d11c      	bne.n	80009dc <main+0x78>
		 rawTemp = HAL_ADC_GetValue(&hadc3);	//gets value
 80009a2:	4842      	ldr	r0, [pc, #264]	; (8000aac <main+0x148>)
 80009a4:	f001 f8ac 	bl	8001b00 <HAL_ADC_GetValue>
 80009a8:	6378      	str	r0, [r7, #52]	; 0x34
		 rawRefVolt = HAL_ADC_GetValue(&hadc1);
 80009aa:	483f      	ldr	r0, [pc, #252]	; (8000aa8 <main+0x144>)
 80009ac:	f001 f8a8 	bl	8001b00 <HAL_ADC_GetValue>
 80009b0:	6338      	str	r0, [r7, #48]	; 0x30
		 RAW_TS_CAL1 = (uint32_t*)(0x1FFF75A8);
 80009b2:	4b3f      	ldr	r3, [pc, #252]	; (8000ab0 <main+0x14c>)
 80009b4:	623b      	str	r3, [r7, #32]
		 RAW_TS_CAL2 = (uint32_t*)(0x1FFF75CA);
 80009b6:	4b3f      	ldr	r3, [pc, #252]	; (8000ab4 <main+0x150>)
 80009b8:	61fb      	str	r3, [r7, #28]
		 RAW_VREFINT_CAL = (uint32_t*)(0x1FFF75AA);
 80009ba:	4b3f      	ldr	r3, [pc, #252]	; (8000ab8 <main+0x154>)
 80009bc:	61bb      	str	r3, [r7, #24]
		 TS_CAL1 = (*RAW_TS_CAL1)&0x00000FFF;
 80009be:	6a3b      	ldr	r3, [r7, #32]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c
		 TS_CAL2 = (*RAW_TS_CAL2)&0x00000FFF;
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
		 VREFINT_CAL = (*RAW_VREFINT_CAL)&0x00000FFF;
 80009d2:	69bb      	ldr	r3, [r7, #24]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
	 }
	 //tempCelcius_cheat = __HAL_ADC_CALC_TEMPERATURE(3400, rawTemp, ADC_RESOLUTION_12B);

	 //Scaling
	 vdda = 3.0 * ((double) VREFINT_CAL) / ((double) rawRefVolt);
 80009dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80009de:	f7ff fd35 	bl	800044c <__aeabi_ui2d>
 80009e2:	f04f 0200 	mov.w	r2, #0
 80009e6:	4b35      	ldr	r3, [pc, #212]	; (8000abc <main+0x158>)
 80009e8:	f7ff fdaa 	bl	8000540 <__aeabi_dmul>
 80009ec:	4603      	mov	r3, r0
 80009ee:	460c      	mov	r4, r1
 80009f0:	4625      	mov	r5, r4
 80009f2:	461c      	mov	r4, r3
 80009f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80009f6:	f7ff fd29 	bl	800044c <__aeabi_ui2d>
 80009fa:	4602      	mov	r2, r0
 80009fc:	460b      	mov	r3, r1
 80009fe:	4620      	mov	r0, r4
 8000a00:	4629      	mov	r1, r5
 8000a02:	f7ff fec7 	bl	8000794 <__aeabi_ddiv>
 8000a06:	4603      	mov	r3, r0
 8000a08:	460c      	mov	r4, r1
 8000a0a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	 calTemp = ((double) rawTemp)*vdda/3.0;
 8000a0e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000a10:	f7ff fd1c 	bl	800044c <__aeabi_ui2d>
 8000a14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000a18:	f7ff fd92 	bl	8000540 <__aeabi_dmul>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	460c      	mov	r4, r1
 8000a20:	4618      	mov	r0, r3
 8000a22:	4621      	mov	r1, r4
 8000a24:	f04f 0200 	mov.w	r2, #0
 8000a28:	4b24      	ldr	r3, [pc, #144]	; (8000abc <main+0x158>)
 8000a2a:	f7ff feb3 	bl	8000794 <__aeabi_ddiv>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	460c      	mov	r4, r1
 8000a32:	e9c7 3402 	strd	r3, r4, [r7, #8]
	 tempCelcius = (calTemp - TS_CAL1)*(110-30)/(TS_CAL2-TS_CAL1) + 30;
 8000a36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000a38:	f7ff fd08 	bl	800044c <__aeabi_ui2d>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	460c      	mov	r4, r1
 8000a40:	461a      	mov	r2, r3
 8000a42:	4623      	mov	r3, r4
 8000a44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a48:	f7ff fbc2 	bl	80001d0 <__aeabi_dsub>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	460c      	mov	r4, r1
 8000a50:	4618      	mov	r0, r3
 8000a52:	4621      	mov	r1, r4
 8000a54:	f04f 0200 	mov.w	r2, #0
 8000a58:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <main+0x15c>)
 8000a5a:	f7ff fd71 	bl	8000540 <__aeabi_dmul>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	460c      	mov	r4, r1
 8000a62:	4625      	mov	r5, r4
 8000a64:	461c      	mov	r4, r3
 8000a66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fced 	bl	800044c <__aeabi_ui2d>
 8000a72:	4602      	mov	r2, r0
 8000a74:	460b      	mov	r3, r1
 8000a76:	4620      	mov	r0, r4
 8000a78:	4629      	mov	r1, r5
 8000a7a:	f7ff fe8b 	bl	8000794 <__aeabi_ddiv>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	460c      	mov	r4, r1
 8000a82:	4618      	mov	r0, r3
 8000a84:	4621      	mov	r1, r4
 8000a86:	f04f 0200 	mov.w	r2, #0
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <main+0x160>)
 8000a8c:	f7ff fba2 	bl	80001d4 <__adddf3>
 8000a90:	4603      	mov	r3, r0
 8000a92:	460c      	mov	r4, r1
 8000a94:	e9c7 3400 	strd	r3, r4, [r7]

	 HAL_ADC_Stop(&hadc1);
 8000a98:	4803      	ldr	r0, [pc, #12]	; (8000aa8 <main+0x144>)
 8000a9a:	f000 ff2d 	bl	80018f8 <HAL_ADC_Stop>
	 HAL_ADC_Stop(&hadc3);
 8000a9e:	4803      	ldr	r0, [pc, #12]	; (8000aac <main+0x148>)
 8000aa0:	f000 ff2a 	bl	80018f8 <HAL_ADC_Stop>
	 HAL_ADC_Start(&hadc1);
 8000aa4:	e769      	b.n	800097a <main+0x16>
 8000aa6:	bf00      	nop
 8000aa8:	2000002c 	.word	0x2000002c
 8000aac:	20000090 	.word	0x20000090
 8000ab0:	1fff75a8 	.word	0x1fff75a8
 8000ab4:	1fff75ca 	.word	0x1fff75ca
 8000ab8:	1fff75aa 	.word	0x1fff75aa
 8000abc:	40080000 	.word	0x40080000
 8000ac0:	40540000 	.word	0x40540000
 8000ac4:	403e0000 	.word	0x403e0000

08000ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b0b8      	sub	sp, #224	; 0xe0
 8000acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ace:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ad2:	2244      	movs	r2, #68	; 0x44
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f003 fa16 	bl	8003f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000adc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aec:	463b      	mov	r3, r7
 8000aee:	2288      	movs	r2, #136	; 0x88
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f003 fa08 	bl	8003f08 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000af8:	2310      	movs	r3, #16
 8000afa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000afe:	2301      	movs	r3, #1
 8000b00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b0a:	2360      	movs	r3, #96	; 0x60
 8000b0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b10:	2302      	movs	r3, #2
 8000b12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b16:	2301      	movs	r3, #1
 8000b18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000b22:	2328      	movs	r3, #40	; 0x28
 8000b24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b28:	2307      	movs	r3, #7
 8000b2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 ff5c 	bl	80029fc <HAL_RCC_OscConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000b4a:	f000 f91f 	bl	8000d8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4e:	230f      	movs	r3, #15
 8000b50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b54:	2303      	movs	r3, #3
 8000b56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b6c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000b70:	2104      	movs	r1, #4
 8000b72:	4618      	mov	r0, r3
 8000b74:	f002 fb28 	bl	80031c8 <HAL_RCC_ClockConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000b7e:	f000 f905 	bl	8000d8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b86:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b8c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000b96:	2318      	movs	r3, #24
 8000b98:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b9a:	2307      	movs	r3, #7
 8000b9c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000ba6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000baa:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bac:	463b      	mov	r3, r7
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f002 fcd6 	bl	8003560 <HAL_RCCEx_PeriphCLKConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000bba:	f000 f8e7 	bl	8000d8c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bbe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bc2:	f001 fec5 	bl	8002950 <HAL_PWREx_ControlVoltageScaling>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000bcc:	f000 f8de 	bl	8000d8c <Error_Handler>
  }
}
 8000bd0:	bf00      	nop
 8000bd2:	37e0      	adds	r7, #224	; 0xe0
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
 8000bf8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bfa:	4b2f      	ldr	r3, [pc, #188]	; (8000cb8 <MX_ADC1_Init+0xe0>)
 8000bfc:	4a2f      	ldr	r2, [pc, #188]	; (8000cbc <MX_ADC1_Init+0xe4>)
 8000bfe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c00:	4b2d      	ldr	r3, [pc, #180]	; (8000cb8 <MX_ADC1_Init+0xe0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c06:	4b2c      	ldr	r3, [pc, #176]	; (8000cb8 <MX_ADC1_Init+0xe0>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c0c:	4b2a      	ldr	r3, [pc, #168]	; (8000cb8 <MX_ADC1_Init+0xe0>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c12:	4b29      	ldr	r3, [pc, #164]	; (8000cb8 <MX_ADC1_Init+0xe0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c18:	4b27      	ldr	r3, [pc, #156]	; (8000cb8 <MX_ADC1_Init+0xe0>)
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c1e:	4b26      	ldr	r3, [pc, #152]	; (8000cb8 <MX_ADC1_Init+0xe0>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c24:	4b24      	ldr	r3, [pc, #144]	; (8000cb8 <MX_ADC1_Init+0xe0>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000c2a:	4b23      	ldr	r3, [pc, #140]	; (8000cb8 <MX_ADC1_Init+0xe0>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c30:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <MX_ADC1_Init+0xe0>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c38:	4b1f      	ldr	r3, [pc, #124]	; (8000cb8 <MX_ADC1_Init+0xe0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c3e:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <MX_ADC1_Init+0xe0>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c44:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <MX_ADC1_Init+0xe0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c4c:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <MX_ADC1_Init+0xe0>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c52:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <MX_ADC1_Init+0xe0>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c5a:	4817      	ldr	r0, [pc, #92]	; (8000cb8 <MX_ADC1_Init+0xe0>)
 8000c5c:	f000 fc3e 	bl	80014dc <HAL_ADC_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000c66:	f000 f891 	bl	8000d8c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	4619      	mov	r1, r3
 8000c74:	4810      	ldr	r0, [pc, #64]	; (8000cb8 <MX_ADC1_Init+0xe0>)
 8000c76:	f001 fccb 	bl	8002610 <HAL_ADCEx_MultiModeConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000c80:	f000 f884 	bl	8000d8c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_ADC1_Init+0xe8>)
 8000c86:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c88:	2306      	movs	r3, #6
 8000c8a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000c8c:	2307      	movs	r3, #7
 8000c8e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c90:	237f      	movs	r3, #127	; 0x7f
 8000c92:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c94:	2304      	movs	r3, #4
 8000c96:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_ADC1_Init+0xe0>)
 8000ca2:	f000 ff3b 	bl	8001b1c <HAL_ADC_ConfigChannel>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000cac:	f000 f86e 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	3728      	adds	r7, #40	; 0x28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	2000002c 	.word	0x2000002c
 8000cbc:	50040000 	.word	0x50040000
 8000cc0:	80000001 	.word	0x80000001

08000cc4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cca:	463b      	mov	r3, r7
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
 8000cd8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000cda:	4b29      	ldr	r3, [pc, #164]	; (8000d80 <MX_ADC3_Init+0xbc>)
 8000cdc:	4a29      	ldr	r2, [pc, #164]	; (8000d84 <MX_ADC3_Init+0xc0>)
 8000cde:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ce0:	4b27      	ldr	r3, [pc, #156]	; (8000d80 <MX_ADC3_Init+0xbc>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000ce6:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <MX_ADC3_Init+0xbc>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cec:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <MX_ADC3_Init+0xbc>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cf2:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <MX_ADC3_Init+0xbc>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cf8:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <MX_ADC3_Init+0xbc>)
 8000cfa:	2204      	movs	r2, #4
 8000cfc:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000cfe:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <MX_ADC3_Init+0xbc>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000d04:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <MX_ADC3_Init+0xbc>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000d0a:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <MX_ADC3_Init+0xbc>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d10:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <MX_ADC3_Init+0xbc>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d18:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <MX_ADC3_Init+0xbc>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <MX_ADC3_Init+0xbc>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000d24:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <MX_ADC3_Init+0xbc>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <MX_ADC3_Init+0xbc>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <MX_ADC3_Init+0xbc>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d3a:	4811      	ldr	r0, [pc, #68]	; (8000d80 <MX_ADC3_Init+0xbc>)
 8000d3c:	f000 fbce 	bl	80014dc <HAL_ADC_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000d46:	f000 f821 	bl	8000d8c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <MX_ADC3_Init+0xc4>)
 8000d4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d4e:	2306      	movs	r3, #6
 8000d50:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000d52:	2307      	movs	r3, #7
 8000d54:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d56:	237f      	movs	r3, #127	; 0x7f
 8000d58:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d62:	463b      	mov	r3, r7
 8000d64:	4619      	mov	r1, r3
 8000d66:	4806      	ldr	r0, [pc, #24]	; (8000d80 <MX_ADC3_Init+0xbc>)
 8000d68:	f000 fed8 	bl	8001b1c <HAL_ADC_ConfigChannel>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000d72:	f000 f80b 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000090 	.word	0x20000090
 8000d84:	50040200 	.word	0x50040200
 8000d88:	c7520000 	.word	0xc7520000

08000d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da2:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <HAL_MspInit+0x44>)
 8000da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000da6:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <HAL_MspInit+0x44>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6613      	str	r3, [r2, #96]	; 0x60
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <HAL_MspInit+0x44>)
 8000db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <HAL_MspInit+0x44>)
 8000dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <HAL_MspInit+0x44>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_MspInit+0x44>)
 8000dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	40021000 	.word	0x40021000

08000de4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a1c      	ldr	r2, [pc, #112]	; (8000e64 <HAL_ADC_MspInit+0x80>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d115      	bne.n	8000e22 <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <HAL_ADC_MspInit+0x84>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	4a1a      	ldr	r2, [pc, #104]	; (8000e68 <HAL_ADC_MspInit+0x84>)
 8000dfe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000e00:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <HAL_ADC_MspInit+0x84>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d126      	bne.n	8000e56 <HAL_ADC_MspInit+0x72>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000e08:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <HAL_ADC_MspInit+0x88>)
 8000e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0c:	4a17      	ldr	r2, [pc, #92]	; (8000e6c <HAL_ADC_MspInit+0x88>)
 8000e0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_ADC_MspInit+0x88>)
 8000e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000e20:	e019      	b.n	8000e56 <HAL_ADC_MspInit+0x72>
  else if(hadc->Instance==ADC3)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a12      	ldr	r2, [pc, #72]	; (8000e70 <HAL_ADC_MspInit+0x8c>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d114      	bne.n	8000e56 <HAL_ADC_MspInit+0x72>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <HAL_ADC_MspInit+0x84>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	3301      	adds	r3, #1
 8000e32:	4a0d      	ldr	r2, [pc, #52]	; (8000e68 <HAL_ADC_MspInit+0x84>)
 8000e34:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <HAL_ADC_MspInit+0x84>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d10b      	bne.n	8000e56 <HAL_ADC_MspInit+0x72>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <HAL_ADC_MspInit+0x88>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <HAL_ADC_MspInit+0x88>)
 8000e44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <HAL_ADC_MspInit+0x88>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
}
 8000e56:	bf00      	nop
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	50040000 	.word	0x50040000
 8000e68:	20000028 	.word	0x20000028
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	50040200 	.word	0x50040200

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <HardFault_Handler+0x4>

08000e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <MemManage_Handler+0x4>

08000e8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <BusFault_Handler+0x4>

08000e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <UsageFault_Handler+0x4>

08000e9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec8:	f000 f8b6 	bl	8001038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed4:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <SystemInit+0x64>)
 8000ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eda:	4a16      	ldr	r2, [pc, #88]	; (8000f34 <SystemInit+0x64>)
 8000edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <SystemInit+0x68>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a13      	ldr	r2, [pc, #76]	; (8000f38 <SystemInit+0x68>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <SystemInit+0x68>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <SystemInit+0x68>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a0f      	ldr	r2, [pc, #60]	; (8000f38 <SystemInit+0x68>)
 8000efc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000f00:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f04:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <SystemInit+0x68>)
 8000f08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f0c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <SystemInit+0x68>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a09      	ldr	r2, [pc, #36]	; (8000f38 <SystemInit+0x68>)
 8000f14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f18:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f1a:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <SystemInit+0x68>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <SystemInit+0x64>)
 8000f22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f26:	609a      	str	r2, [r3, #8]
#endif
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00
 8000f38:	40021000 	.word	0x40021000

08000f3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f40:	f7ff ffc6 	bl	8000ed0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f44:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f46:	e003      	b.n	8000f50 <LoopCopyDataInit>

08000f48 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f4a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f4c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f4e:	3104      	adds	r1, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f50:	480a      	ldr	r0, [pc, #40]	; (8000f7c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f54:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f56:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f58:	d3f6      	bcc.n	8000f48 <CopyDataInit>
	ldr	r2, =_sbss
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f5c:	e002      	b.n	8000f64 <LoopFillZerobss>

08000f5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f5e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f60:	f842 3b04 	str.w	r3, [r2], #4

08000f64 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <LoopForever+0x16>)
	cmp	r2, r3
 8000f66:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f68:	d3f9      	bcc.n	8000f5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f002 ffa9 	bl	8003ec0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f6e:	f7ff fcf9 	bl	8000964 <main>

08000f72 <LoopForever>:

LoopForever:
    b LoopForever
 8000f72:	e7fe      	b.n	8000f72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f74:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000f78:	08003f78 	.word	0x08003f78
	ldr	r0, =_sdata
 8000f7c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f80:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000f84:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000f88:	200000f8 	.word	0x200000f8

08000f8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC1_2_IRQHandler>

08000f8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f94:	2300      	movs	r3, #0
 8000f96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f98:	2003      	movs	r0, #3
 8000f9a:	f001 fc97 	bl	80028cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f000 f80e 	bl	8000fc0 <HAL_InitTick>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d002      	beq.n	8000fb0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	71fb      	strb	r3, [r7, #7]
 8000fae:	e001      	b.n	8000fb4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fb0:	f7ff fef4 	bl	8000d9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fcc:	4b17      	ldr	r3, [pc, #92]	; (800102c <HAL_InitTick+0x6c>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d023      	beq.n	800101c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <HAL_InitTick+0x70>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <HAL_InitTick+0x6c>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 fc95 	bl	800291a <HAL_SYSTICK_Config>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d10f      	bne.n	8001016 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b0f      	cmp	r3, #15
 8000ffa:	d809      	bhi.n	8001010 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001004:	f001 fc6d 	bl	80028e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001008:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <HAL_InitTick+0x74>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6013      	str	r3, [r2, #0]
 800100e:	e007      	b.n	8001020 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	e004      	b.n	8001020 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	73fb      	strb	r3, [r7, #15]
 800101a:	e001      	b.n	8001020 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001020:	7bfb      	ldrb	r3, [r7, #15]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000008 	.word	0x20000008
 8001030:	20000000 	.word	0x20000000
 8001034:	20000004 	.word	0x20000004

08001038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_IncTick+0x20>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x24>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4413      	add	r3, r2
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <HAL_IncTick+0x24>)
 800104a:	6013      	str	r3, [r2, #0]
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000008 	.word	0x20000008
 800105c:	200000f4 	.word	0x200000f4

08001060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return uwTick;
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <HAL_GetTick+0x14>)
 8001066:	681b      	ldr	r3, [r3, #0]
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	200000f4 	.word	0x200000f4

08001078 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	431a      	orrs	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	609a      	str	r2, [r3, #8]
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	431a      	orrs	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	609a      	str	r2, [r3, #8]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	3360      	adds	r3, #96	; 0x60
 80010f2:	461a      	mov	r2, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <LL_ADC_SetOffset+0x44>)
 8001102:	4013      	ands	r3, r2
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	430a      	orrs	r2, r1
 800110e:	4313      	orrs	r3, r2
 8001110:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001118:	bf00      	nop
 800111a:	371c      	adds	r7, #28
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	03fff000 	.word	0x03fff000

08001128 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3360      	adds	r3, #96	; 0x60
 8001136:	461a      	mov	r2, r3
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001148:	4618      	mov	r0, r3
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001154:	b480      	push	{r7}
 8001156:	b087      	sub	sp, #28
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	3360      	adds	r3, #96	; 0x60
 8001164:	461a      	mov	r2, r3
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	431a      	orrs	r2, r3
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800117e:	bf00      	nop
 8001180:	371c      	adds	r7, #28
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b087      	sub	sp, #28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3330      	adds	r3, #48	; 0x30
 80011c0:	461a      	mov	r2, r3
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	0a1b      	lsrs	r3, r3, #8
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	f003 030c 	and.w	r3, r3, #12
 80011cc:	4413      	add	r3, r2
 80011ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	f003 031f 	and.w	r3, r3, #31
 80011da:	211f      	movs	r1, #31
 80011dc:	fa01 f303 	lsl.w	r3, r1, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	401a      	ands	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	0e9b      	lsrs	r3, r3, #26
 80011e8:	f003 011f 	and.w	r1, r3, #31
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	f003 031f 	and.w	r3, r3, #31
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	431a      	orrs	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011fc:	bf00      	nop
 80011fe:	371c      	adds	r7, #28
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001208:	b480      	push	{r7}
 800120a:	b087      	sub	sp, #28
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	3314      	adds	r3, #20
 8001218:	461a      	mov	r2, r3
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	0e5b      	lsrs	r3, r3, #25
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	4413      	add	r3, r2
 8001226:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	0d1b      	lsrs	r3, r3, #20
 8001230:	f003 031f 	and.w	r3, r3, #31
 8001234:	2107      	movs	r1, #7
 8001236:	fa01 f303 	lsl.w	r3, r1, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	401a      	ands	r2, r3
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	0d1b      	lsrs	r3, r3, #20
 8001242:	f003 031f 	and.w	r3, r3, #31
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	fa01 f303 	lsl.w	r3, r1, r3
 800124c:	431a      	orrs	r2, r3
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001252:	bf00      	nop
 8001254:	371c      	adds	r7, #28
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001278:	43db      	mvns	r3, r3
 800127a:	401a      	ands	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f003 0318 	and.w	r3, r3, #24
 8001282:	4908      	ldr	r1, [pc, #32]	; (80012a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001284:	40d9      	lsrs	r1, r3
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	400b      	ands	r3, r1
 800128a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800128e:	431a      	orrs	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001296:	bf00      	nop
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	0007ffff 	.word	0x0007ffff

080012a8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 031f 	and.w	r3, r3, #31
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80012f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	6093      	str	r3, [r2, #8]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001318:	d101      	bne.n	800131e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800133c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001340:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001364:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001368:	d101      	bne.n	800136e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800138c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001390:	f043 0201 	orr.w	r2, r3, #1
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013b8:	f043 0202 	orr.w	r2, r3, #2
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d101      	bne.n	80013e4 <LL_ADC_IsEnabled+0x18>
 80013e0:	2301      	movs	r3, #1
 80013e2:	e000      	b.n	80013e6 <LL_ADC_IsEnabled+0x1a>
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b02      	cmp	r3, #2
 8001404:	d101      	bne.n	800140a <LL_ADC_IsDisableOngoing+0x18>
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <LL_ADC_IsDisableOngoing+0x1a>
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001428:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800142c:	f043 0204 	orr.w	r2, r3, #4
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001450:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001454:	f043 0210 	orr.w	r2, r3, #16
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	2b04      	cmp	r3, #4
 800147a:	d101      	bne.n	8001480 <LL_ADC_REG_IsConversionOngoing+0x18>
 800147c:	2301      	movs	r3, #1
 800147e:	e000      	b.n	8001482 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800149e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014a2:	f043 0220 	orr.w	r2, r3, #32
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d101      	bne.n	80014ce <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014dc:	b590      	push	{r4, r7, lr}
 80014de:	b089      	sub	sp, #36	; 0x24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e134      	b.n	8001760 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001500:	2b00      	cmp	r3, #0
 8001502:	d109      	bne.n	8001518 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff fc6d 	bl	8000de4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fef1 	bl	8001304 <LL_ADC_IsDeepPowerDownEnabled>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d004      	beq.n	8001532 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fed7 	bl	80012e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ff0c 	bl	8001354 <LL_ADC_IsInternalRegulatorEnabled>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d113      	bne.n	800156a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fef0 	bl	800132c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800154c:	4b86      	ldr	r3, [pc, #536]	; (8001768 <HAL_ADC_Init+0x28c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	099b      	lsrs	r3, r3, #6
 8001552:	4a86      	ldr	r2, [pc, #536]	; (800176c <HAL_ADC_Init+0x290>)
 8001554:	fba2 2303 	umull	r2, r3, r2, r3
 8001558:	099b      	lsrs	r3, r3, #6
 800155a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800155c:	e002      	b.n	8001564 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	3b01      	subs	r3, #1
 8001562:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f9      	bne.n	800155e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fef0 	bl	8001354 <LL_ADC_IsInternalRegulatorEnabled>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10d      	bne.n	8001596 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800157e:	f043 0210 	orr.w	r2, r3, #16
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158a:	f043 0201 	orr.w	r2, r3, #1
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ff64 	bl	8001468 <LL_ADC_REG_IsConversionOngoing>
 80015a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a6:	f003 0310 	and.w	r3, r3, #16
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f040 80cf 	bne.w	800174e <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f040 80cb 	bne.w	800174e <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015c0:	f043 0202 	orr.w	r2, r3, #2
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fefd 	bl	80013cc <LL_ADC_IsEnabled>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d115      	bne.n	8001604 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015d8:	4865      	ldr	r0, [pc, #404]	; (8001770 <HAL_ADC_Init+0x294>)
 80015da:	f7ff fef7 	bl	80013cc <LL_ADC_IsEnabled>
 80015de:	4604      	mov	r4, r0
 80015e0:	4864      	ldr	r0, [pc, #400]	; (8001774 <HAL_ADC_Init+0x298>)
 80015e2:	f7ff fef3 	bl	80013cc <LL_ADC_IsEnabled>
 80015e6:	4603      	mov	r3, r0
 80015e8:	431c      	orrs	r4, r3
 80015ea:	4863      	ldr	r0, [pc, #396]	; (8001778 <HAL_ADC_Init+0x29c>)
 80015ec:	f7ff feee 	bl	80013cc <LL_ADC_IsEnabled>
 80015f0:	4603      	mov	r3, r0
 80015f2:	4323      	orrs	r3, r4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d105      	bne.n	8001604 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	4619      	mov	r1, r3
 80015fe:	485f      	ldr	r0, [pc, #380]	; (800177c <HAL_ADC_Init+0x2a0>)
 8001600:	f7ff fd3a 	bl	8001078 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	7e5b      	ldrb	r3, [r3, #25]
 8001608:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800160e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001614:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800161a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001622:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d106      	bne.n	8001640 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	3b01      	subs	r3, #1
 8001638:	045b      	lsls	r3, r3, #17
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001644:	2b00      	cmp	r3, #0
 8001646:	d009      	beq.n	800165c <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	4b47      	ldr	r3, [pc, #284]	; (8001780 <HAL_ADC_Init+0x2a4>)
 8001664:	4013      	ands	r3, r2
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6812      	ldr	r2, [r2, #0]
 800166a:	69b9      	ldr	r1, [r7, #24]
 800166c:	430b      	orrs	r3, r1
 800166e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fef7 	bl	8001468 <LL_ADC_REG_IsConversionOngoing>
 800167a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff18 	bl	80014b6 <LL_ADC_INJ_IsConversionOngoing>
 8001686:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d13d      	bne.n	800170a <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d13a      	bne.n	800170a <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001698:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016a0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016b0:	f023 0302 	bic.w	r3, r3, #2
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	69b9      	ldr	r1, [r7, #24]
 80016ba:	430b      	orrs	r3, r1
 80016bc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d118      	bne.n	80016fa <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80016d2:	f023 0304 	bic.w	r3, r3, #4
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016de:	4311      	orrs	r1, r2
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80016e4:	4311      	orrs	r1, r2
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80016ea:	430a      	orrs	r2, r1
 80016ec:	431a      	orrs	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f042 0201 	orr.w	r2, r2, #1
 80016f6:	611a      	str	r2, [r3, #16]
 80016f8:	e007      	b.n	800170a <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	691a      	ldr	r2, [r3, #16]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 0201 	bic.w	r2, r2, #1
 8001708:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d10c      	bne.n	800172c <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001718:	f023 010f 	bic.w	r1, r3, #15
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	69db      	ldr	r3, [r3, #28]
 8001720:	1e5a      	subs	r2, r3, #1
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	631a      	str	r2, [r3, #48]	; 0x30
 800172a:	e007      	b.n	800173c <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 020f 	bic.w	r2, r2, #15
 800173a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001740:	f023 0303 	bic.w	r3, r3, #3
 8001744:	f043 0201 	orr.w	r2, r3, #1
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	655a      	str	r2, [r3, #84]	; 0x54
 800174c:	e007      	b.n	800175e <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001752:	f043 0210 	orr.w	r2, r3, #16
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800175e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3724      	adds	r7, #36	; 0x24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd90      	pop	{r4, r7, pc}
 8001768:	20000000 	.word	0x20000000
 800176c:	053e2d63 	.word	0x053e2d63
 8001770:	50040000 	.word	0x50040000
 8001774:	50040100 	.word	0x50040100
 8001778:	50040200 	.word	0x50040200
 800177c:	50040300 	.word	0x50040300
 8001780:	fff0c007 	.word	0xfff0c007

08001784 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800178c:	4857      	ldr	r0, [pc, #348]	; (80018ec <HAL_ADC_Start+0x168>)
 800178e:	f7ff fd8b 	bl	80012a8 <LL_ADC_GetMultimode>
 8001792:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fe65 	bl	8001468 <LL_ADC_REG_IsConversionOngoing>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f040 809c 	bne.w	80018de <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <HAL_ADC_Start+0x30>
 80017b0:	2302      	movs	r3, #2
 80017b2:	e097      	b.n	80018e4 <HAL_ADC_Start+0x160>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f000 fe4f 	bl	8002460 <ADC_Enable>
 80017c2:	4603      	mov	r3, r0
 80017c4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017c6:	7dfb      	ldrb	r3, [r7, #23]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f040 8083 	bne.w	80018d4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017d6:	f023 0301 	bic.w	r3, r3, #1
 80017da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a42      	ldr	r2, [pc, #264]	; (80018f0 <HAL_ADC_Start+0x16c>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d002      	beq.n	80017f2 <HAL_ADC_Start+0x6e>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	e000      	b.n	80017f4 <HAL_ADC_Start+0x70>
 80017f2:	4b40      	ldr	r3, [pc, #256]	; (80018f4 <HAL_ADC_Start+0x170>)
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	6812      	ldr	r2, [r2, #0]
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d002      	beq.n	8001802 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d105      	bne.n	800180e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001806:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001812:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800181a:	d106      	bne.n	800182a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001820:	f023 0206 	bic.w	r2, r3, #6
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	659a      	str	r2, [r3, #88]	; 0x58
 8001828:	e002      	b.n	8001830 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	221c      	movs	r2, #28
 8001836:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a2a      	ldr	r2, [pc, #168]	; (80018f0 <HAL_ADC_Start+0x16c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d002      	beq.n	8001850 <HAL_ADC_Start+0xcc>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	e000      	b.n	8001852 <HAL_ADC_Start+0xce>
 8001850:	4b28      	ldr	r3, [pc, #160]	; (80018f4 <HAL_ADC_Start+0x170>)
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6812      	ldr	r2, [r2, #0]
 8001856:	4293      	cmp	r3, r2
 8001858:	d008      	beq.n	800186c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	2b05      	cmp	r3, #5
 8001864:	d002      	beq.n	800186c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	2b09      	cmp	r3, #9
 800186a:	d114      	bne.n	8001896 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d007      	beq.n	800188a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001882:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fdc2 	bl	8001418 <LL_ADC_REG_StartConversion>
 8001894:	e025      	b.n	80018e2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <HAL_ADC_Start+0x16c>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d002      	beq.n	80018b2 <HAL_ADC_Start+0x12e>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	e000      	b.n	80018b4 <HAL_ADC_Start+0x130>
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <HAL_ADC_Start+0x170>)
 80018b4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00f      	beq.n	80018e2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	655a      	str	r2, [r3, #84]	; 0x54
 80018d2:	e006      	b.n	80018e2 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80018dc:	e001      	b.n	80018e2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018de:	2302      	movs	r3, #2
 80018e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80018e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	50040300 	.word	0x50040300
 80018f0:	50040100 	.word	0x50040100
 80018f4:	50040000 	.word	0x50040000

080018f8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001906:	2b01      	cmp	r3, #1
 8001908:	d101      	bne.n	800190e <HAL_ADC_Stop+0x16>
 800190a:	2302      	movs	r3, #2
 800190c:	e023      	b.n	8001956 <HAL_ADC_Stop+0x5e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001916:	2103      	movs	r1, #3
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 fced 	bl	80022f8 <ADC_ConversionStop>
 800191e:	4603      	mov	r3, r0
 8001920:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d111      	bne.n	800194c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 fdf3 	bl	8002514 <ADC_Disable>
 800192e:	4603      	mov	r3, r0
 8001930:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001932:	7bfb      	ldrb	r3, [r7, #15]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d109      	bne.n	800194c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001940:	f023 0301 	bic.w	r3, r3, #1
 8001944:	f043 0201 	orr.w	r2, r3, #1
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001954:	7bfb      	ldrb	r3, [r7, #15]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800196a:	4862      	ldr	r0, [pc, #392]	; (8001af4 <HAL_ADC_PollForConversion+0x194>)
 800196c:	f7ff fc9c 	bl	80012a8 <LL_ADC_GetMultimode>
 8001970:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	2b08      	cmp	r3, #8
 8001978:	d102      	bne.n	8001980 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800197a:	2308      	movs	r3, #8
 800197c:	61fb      	str	r3, [r7, #28]
 800197e:	e02a      	b.n	80019d6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d005      	beq.n	8001992 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	2b05      	cmp	r3, #5
 800198a:	d002      	beq.n	8001992 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	2b09      	cmp	r3, #9
 8001990:	d111      	bne.n	80019b6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b00      	cmp	r3, #0
 800199e:	d007      	beq.n	80019b0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a4:	f043 0220 	orr.w	r2, r3, #32
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e09d      	b.n	8001aec <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80019b0:	2304      	movs	r3, #4
 80019b2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80019b4:	e00f      	b.n	80019d6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80019b6:	484f      	ldr	r0, [pc, #316]	; (8001af4 <HAL_ADC_PollForConversion+0x194>)
 80019b8:	f7ff fc84 	bl	80012c4 <LL_ADC_GetMultiDMATransfer>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d007      	beq.n	80019d2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c6:	f043 0220 	orr.w	r2, r3, #32
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e08c      	b.n	8001aec <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80019d2:	2304      	movs	r3, #4
 80019d4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80019d6:	f7ff fb43 	bl	8001060 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80019dc:	e01a      	b.n	8001a14 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019e4:	d016      	beq.n	8001a14 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80019e6:	f7ff fb3b 	bl	8001060 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d302      	bcc.n	80019fc <HAL_ADC_PollForConversion+0x9c>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d10b      	bne.n	8001a14 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a00:	f043 0204 	orr.w	r2, r3, #4
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e06b      	b.n	8001aec <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0dd      	beq.n	80019de <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fba9 	bl	800118a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d01c      	beq.n	8001a78 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	7e5b      	ldrb	r3, [r3, #25]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d118      	bne.n	8001a78 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d111      	bne.n	8001a78 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d105      	bne.n	8001a78 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a70:	f043 0201 	orr.w	r2, r3, #1
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a1e      	ldr	r2, [pc, #120]	; (8001af8 <HAL_ADC_PollForConversion+0x198>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d002      	beq.n	8001a88 <HAL_ADC_PollForConversion+0x128>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	e000      	b.n	8001a8a <HAL_ADC_PollForConversion+0x12a>
 8001a88:	4b1c      	ldr	r3, [pc, #112]	; (8001afc <HAL_ADC_PollForConversion+0x19c>)
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6812      	ldr	r2, [r2, #0]
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d008      	beq.n	8001aa4 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d005      	beq.n	8001aa4 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	2b05      	cmp	r3, #5
 8001a9c:	d002      	beq.n	8001aa4 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	2b09      	cmp	r3, #9
 8001aa2:	d104      	bne.n	8001aae <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	61bb      	str	r3, [r7, #24]
 8001aac:	e00c      	b.n	8001ac8 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a11      	ldr	r2, [pc, #68]	; (8001af8 <HAL_ADC_PollForConversion+0x198>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d002      	beq.n	8001abe <HAL_ADC_PollForConversion+0x15e>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	e000      	b.n	8001ac0 <HAL_ADC_PollForConversion+0x160>
 8001abe:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <HAL_ADC_PollForConversion+0x19c>)
 8001ac0:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d104      	bne.n	8001ad8 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2208      	movs	r2, #8
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	e008      	b.n	8001aea <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d103      	bne.n	8001aea <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3720      	adds	r7, #32
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	50040300 	.word	0x50040300
 8001af8:	50040100 	.word	0x50040100
 8001afc:	50040000 	.word	0x50040000

08001b00 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
	...

08001b1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b0b6      	sub	sp, #216	; 0xd8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b26:	2300      	movs	r3, #0
 8001b28:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d101      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x22>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e3c6      	b.n	80022cc <HAL_ADC_ConfigChannel+0x7b0>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fc8c 	bl	8001468 <LL_ADC_REG_IsConversionOngoing>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f040 83a7 	bne.w	80022a6 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b05      	cmp	r3, #5
 8001b5e:	d824      	bhi.n	8001baa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	3b02      	subs	r3, #2
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d81b      	bhi.n	8001ba2 <HAL_ADC_ConfigChannel+0x86>
 8001b6a:	a201      	add	r2, pc, #4	; (adr r2, 8001b70 <HAL_ADC_ConfigChannel+0x54>)
 8001b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b70:	08001b81 	.word	0x08001b81
 8001b74:	08001b89 	.word	0x08001b89
 8001b78:	08001b91 	.word	0x08001b91
 8001b7c:	08001b99 	.word	0x08001b99
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	220c      	movs	r2, #12
 8001b84:	605a      	str	r2, [r3, #4]
          break;
 8001b86:	e011      	b.n	8001bac <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	2212      	movs	r2, #18
 8001b8c:	605a      	str	r2, [r3, #4]
          break;
 8001b8e:	e00d      	b.n	8001bac <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	2218      	movs	r2, #24
 8001b94:	605a      	str	r2, [r3, #4]
          break;
 8001b96:	e009      	b.n	8001bac <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b9e:	605a      	str	r2, [r3, #4]
          break;
 8001ba0:	e004      	b.n	8001bac <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	2206      	movs	r2, #6
 8001ba6:	605a      	str	r2, [r3, #4]
          break;
 8001ba8:	e000      	b.n	8001bac <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001baa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	6859      	ldr	r1, [r3, #4]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	f7ff faf9 	bl	80011b0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fc50 	bl	8001468 <LL_ADC_REG_IsConversionOngoing>
 8001bc8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fc70 	bl	80014b6 <LL_ADC_INJ_IsConversionOngoing>
 8001bd6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bda:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f040 81a6 	bne.w	8001f30 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001be4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f040 81a1 	bne.w	8001f30 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6818      	ldr	r0, [r3, #0]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	6819      	ldr	r1, [r3, #0]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	f7ff fb04 	bl	8001208 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	695a      	ldr	r2, [r3, #20]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	08db      	lsrs	r3, r3, #3
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d00a      	beq.n	8001c38 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6818      	ldr	r0, [r3, #0]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	6919      	ldr	r1, [r3, #16]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c32:	f7ff fa55 	bl	80010e0 <LL_ADC_SetOffset>
 8001c36:	e17b      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fa72 	bl	8001128 <LL_ADC_GetOffsetChannel>
 8001c44:	4603      	mov	r3, r0
 8001c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10a      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x148>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2100      	movs	r1, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fa67 	bl	8001128 <LL_ADC_GetOffsetChannel>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	0e9b      	lsrs	r3, r3, #26
 8001c5e:	f003 021f 	and.w	r2, r3, #31
 8001c62:	e01e      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0x186>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fa5c 	bl	8001128 <LL_ADC_GetOffsetChannel>
 8001c70:	4603      	mov	r3, r0
 8001c72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c7a:	fa93 f3a3 	rbit	r3, r3
 8001c7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001c92:	2320      	movs	r3, #32
 8001c94:	e004      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001c96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c9a:	fab3 f383 	clz	r3, r3
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d105      	bne.n	8001cba <HAL_ADC_ConfigChannel+0x19e>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	0e9b      	lsrs	r3, r3, #26
 8001cb4:	f003 031f 	and.w	r3, r3, #31
 8001cb8:	e018      	b.n	8001cec <HAL_ADC_ConfigChannel+0x1d0>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001cc6:	fa93 f3a3 	rbit	r3, r3
 8001cca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001cce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001cd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001cde:	2320      	movs	r3, #32
 8001ce0:	e004      	b.n	8001cec <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001ce2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d106      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fa2b 	bl	8001154 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2101      	movs	r1, #1
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fa0f 	bl	8001128 <LL_ADC_GetOffsetChannel>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10a      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x20e>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2101      	movs	r1, #1
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fa04 	bl	8001128 <LL_ADC_GetOffsetChannel>
 8001d20:	4603      	mov	r3, r0
 8001d22:	0e9b      	lsrs	r3, r3, #26
 8001d24:	f003 021f 	and.w	r2, r3, #31
 8001d28:	e01e      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x24c>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2101      	movs	r1, #1
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff f9f9 	bl	8001128 <LL_ADC_GetOffsetChannel>
 8001d36:	4603      	mov	r3, r0
 8001d38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d40:	fa93 f3a3 	rbit	r3, r3
 8001d44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001d48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001d50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001d58:	2320      	movs	r3, #32
 8001d5a:	e004      	b.n	8001d66 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001d5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d60:	fab3 f383 	clz	r3, r3
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d105      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x264>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	0e9b      	lsrs	r3, r3, #26
 8001d7a:	f003 031f 	and.w	r3, r3, #31
 8001d7e:	e018      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x296>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d8c:	fa93 f3a3 	rbit	r3, r3
 8001d90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001d94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001d9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001da4:	2320      	movs	r3, #32
 8001da6:	e004      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001da8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001dac:	fab3 f383 	clz	r3, r3
 8001db0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d106      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff f9c8 	bl	8001154 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2102      	movs	r1, #2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff f9ac 	bl	8001128 <LL_ADC_GetOffsetChannel>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10a      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x2d4>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2102      	movs	r1, #2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff f9a1 	bl	8001128 <LL_ADC_GetOffsetChannel>
 8001de6:	4603      	mov	r3, r0
 8001de8:	0e9b      	lsrs	r3, r3, #26
 8001dea:	f003 021f 	and.w	r2, r3, #31
 8001dee:	e01e      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x312>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2102      	movs	r1, #2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff f996 	bl	8001128 <LL_ADC_GetOffsetChannel>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e06:	fa93 f3a3 	rbit	r3, r3
 8001e0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001e0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001e16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001e1e:	2320      	movs	r3, #32
 8001e20:	e004      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001e22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e26:	fab3 f383 	clz	r3, r3
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d105      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x32a>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	0e9b      	lsrs	r3, r3, #26
 8001e40:	f003 031f 	and.w	r3, r3, #31
 8001e44:	e016      	b.n	8001e74 <HAL_ADC_ConfigChannel+0x358>
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e52:	fa93 f3a3 	rbit	r3, r3
 8001e56:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001e58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001e5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001e66:	2320      	movs	r3, #32
 8001e68:	e004      	b.n	8001e74 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001e6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e6e:	fab3 f383 	clz	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d106      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2102      	movs	r1, #2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff f967 	bl	8001154 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2103      	movs	r1, #3
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff f94b 	bl	8001128 <LL_ADC_GetOffsetChannel>
 8001e92:	4603      	mov	r3, r0
 8001e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10a      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x396>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2103      	movs	r1, #3
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff f940 	bl	8001128 <LL_ADC_GetOffsetChannel>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	0e9b      	lsrs	r3, r3, #26
 8001eac:	f003 021f 	and.w	r2, r3, #31
 8001eb0:	e017      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x3c6>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2103      	movs	r1, #3
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff f935 	bl	8001128 <LL_ADC_GetOffsetChannel>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ec4:	fa93 f3a3 	rbit	r3, r3
 8001ec8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001eca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ecc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001ece:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001ed4:	2320      	movs	r3, #32
 8001ed6:	e003      	b.n	8001ee0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001ed8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eda:	fab3 f383 	clz	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d105      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x3de>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	0e9b      	lsrs	r3, r3, #26
 8001ef4:	f003 031f 	and.w	r3, r3, #31
 8001ef8:	e011      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x402>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f02:	fa93 f3a3 	rbit	r3, r3
 8001f06:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001f08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f0a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001f12:	2320      	movs	r3, #32
 8001f14:	e003      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f18:	fab3 f383 	clz	r3, r3
 8001f1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d106      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2200      	movs	r2, #0
 8001f28:	2103      	movs	r1, #3
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff f912 	bl	8001154 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fa49 	bl	80013cc <LL_ADC_IsEnabled>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f040 813f 	bne.w	80021c0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	6819      	ldr	r1, [r3, #0]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	f7ff f986 	bl	8001260 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4a8e      	ldr	r2, [pc, #568]	; (8002194 <HAL_ADC_ConfigChannel+0x678>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	f040 8130 	bne.w	80021c0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10b      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x46c>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	0e9b      	lsrs	r3, r3, #26
 8001f76:	3301      	adds	r3, #1
 8001f78:	f003 031f 	and.w	r3, r3, #31
 8001f7c:	2b09      	cmp	r3, #9
 8001f7e:	bf94      	ite	ls
 8001f80:	2301      	movls	r3, #1
 8001f82:	2300      	movhi	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	e019      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x4a0>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001f96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f98:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001f9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001fa0:	2320      	movs	r3, #32
 8001fa2:	e003      	b.n	8001fac <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001fa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fa6:	fab3 f383 	clz	r3, r3
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	3301      	adds	r3, #1
 8001fae:	f003 031f 	and.w	r3, r3, #31
 8001fb2:	2b09      	cmp	r3, #9
 8001fb4:	bf94      	ite	ls
 8001fb6:	2301      	movls	r3, #1
 8001fb8:	2300      	movhi	r3, #0
 8001fba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d079      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d107      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x4c0>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	0e9b      	lsrs	r3, r3, #26
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	069b      	lsls	r3, r3, #26
 8001fd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fda:	e015      	b.n	8002008 <HAL_ADC_ConfigChannel+0x4ec>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fe4:	fa93 f3a3 	rbit	r3, r3
 8001fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fec:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001ff4:	2320      	movs	r3, #32
 8001ff6:	e003      	b.n	8002000 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ffa:	fab3 f383 	clz	r3, r3
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	3301      	adds	r3, #1
 8002002:	069b      	lsls	r3, r3, #26
 8002004:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002010:	2b00      	cmp	r3, #0
 8002012:	d109      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x50c>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	0e9b      	lsrs	r3, r3, #26
 800201a:	3301      	adds	r3, #1
 800201c:	f003 031f 	and.w	r3, r3, #31
 8002020:	2101      	movs	r1, #1
 8002022:	fa01 f303 	lsl.w	r3, r1, r3
 8002026:	e017      	b.n	8002058 <HAL_ADC_ConfigChannel+0x53c>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002030:	fa93 f3a3 	rbit	r3, r3
 8002034:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002038:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800203a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002040:	2320      	movs	r3, #32
 8002042:	e003      	b.n	800204c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	3301      	adds	r3, #1
 800204e:	f003 031f 	and.w	r3, r3, #31
 8002052:	2101      	movs	r1, #1
 8002054:	fa01 f303 	lsl.w	r3, r1, r3
 8002058:	ea42 0103 	orr.w	r1, r2, r3
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10a      	bne.n	800207e <HAL_ADC_ConfigChannel+0x562>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0e9b      	lsrs	r3, r3, #26
 800206e:	3301      	adds	r3, #1
 8002070:	f003 021f 	and.w	r2, r3, #31
 8002074:	4613      	mov	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4413      	add	r3, r2
 800207a:	051b      	lsls	r3, r3, #20
 800207c:	e018      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x594>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800208c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800208e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002096:	2320      	movs	r3, #32
 8002098:	e003      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800209a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800209c:	fab3 f383 	clz	r3, r3
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	3301      	adds	r3, #1
 80020a4:	f003 021f 	and.w	r2, r3, #31
 80020a8:	4613      	mov	r3, r2
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	4413      	add	r3, r2
 80020ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020b0:	430b      	orrs	r3, r1
 80020b2:	e080      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d107      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x5b4>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	0e9b      	lsrs	r3, r3, #26
 80020c6:	3301      	adds	r3, #1
 80020c8:	069b      	lsls	r3, r3, #26
 80020ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020ce:	e015      	b.n	80020fc <HAL_ADC_ConfigChannel+0x5e0>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d8:	fa93 f3a3 	rbit	r3, r3
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80020de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80020e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80020e8:	2320      	movs	r3, #32
 80020ea:	e003      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80020ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	3301      	adds	r3, #1
 80020f6:	069b      	lsls	r3, r3, #26
 80020f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002104:	2b00      	cmp	r3, #0
 8002106:	d109      	bne.n	800211c <HAL_ADC_ConfigChannel+0x600>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	0e9b      	lsrs	r3, r3, #26
 800210e:	3301      	adds	r3, #1
 8002110:	f003 031f 	and.w	r3, r3, #31
 8002114:	2101      	movs	r1, #1
 8002116:	fa01 f303 	lsl.w	r3, r1, r3
 800211a:	e017      	b.n	800214c <HAL_ADC_ConfigChannel+0x630>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	fa93 f3a3 	rbit	r3, r3
 8002128:	61fb      	str	r3, [r7, #28]
  return result;
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002134:	2320      	movs	r3, #32
 8002136:	e003      	b.n	8002140 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	fab3 f383 	clz	r3, r3
 800213e:	b2db      	uxtb	r3, r3
 8002140:	3301      	adds	r3, #1
 8002142:	f003 031f 	and.w	r3, r3, #31
 8002146:	2101      	movs	r1, #1
 8002148:	fa01 f303 	lsl.w	r3, r1, r3
 800214c:	ea42 0103 	orr.w	r1, r2, r3
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10d      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x65c>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	0e9b      	lsrs	r3, r3, #26
 8002162:	3301      	adds	r3, #1
 8002164:	f003 021f 	and.w	r2, r3, #31
 8002168:	4613      	mov	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4413      	add	r3, r2
 800216e:	3b1e      	subs	r3, #30
 8002170:	051b      	lsls	r3, r3, #20
 8002172:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002176:	e01d      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x698>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	fa93 f3a3 	rbit	r3, r3
 8002184:	613b      	str	r3, [r7, #16]
  return result;
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d103      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002190:	2320      	movs	r3, #32
 8002192:	e005      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x684>
 8002194:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	fab3 f383 	clz	r3, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	3301      	adds	r3, #1
 80021a2:	f003 021f 	and.w	r2, r3, #31
 80021a6:	4613      	mov	r3, r2
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	4413      	add	r3, r2
 80021ac:	3b1e      	subs	r3, #30
 80021ae:	051b      	lsls	r3, r3, #20
 80021b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021b4:	430b      	orrs	r3, r1
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	6892      	ldr	r2, [r2, #8]
 80021ba:	4619      	mov	r1, r3
 80021bc:	f7ff f824 	bl	8001208 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4b43      	ldr	r3, [pc, #268]	; (80022d4 <HAL_ADC_ConfigChannel+0x7b8>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d079      	beq.n	80022c0 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021cc:	4842      	ldr	r0, [pc, #264]	; (80022d8 <HAL_ADC_ConfigChannel+0x7bc>)
 80021ce:	f7fe ff79 	bl	80010c4 <LL_ADC_GetCommonPathInternalCh>
 80021d2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a40      	ldr	r2, [pc, #256]	; (80022dc <HAL_ADC_ConfigChannel+0x7c0>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d12b      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d125      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a3b      	ldr	r2, [pc, #236]	; (80022e0 <HAL_ADC_ConfigChannel+0x7c4>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d004      	beq.n	8002200 <HAL_ADC_ConfigChannel+0x6e4>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a3a      	ldr	r2, [pc, #232]	; (80022e4 <HAL_ADC_ConfigChannel+0x7c8>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d15c      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002200:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002204:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002208:	4619      	mov	r1, r3
 800220a:	4833      	ldr	r0, [pc, #204]	; (80022d8 <HAL_ADC_ConfigChannel+0x7bc>)
 800220c:	f7fe ff47 	bl	800109e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002210:	4b35      	ldr	r3, [pc, #212]	; (80022e8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	099b      	lsrs	r3, r3, #6
 8002216:	4a35      	ldr	r2, [pc, #212]	; (80022ec <HAL_ADC_ConfigChannel+0x7d0>)
 8002218:	fba2 2303 	umull	r2, r3, r2, r3
 800221c:	099a      	lsrs	r2, r3, #6
 800221e:	4613      	mov	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4413      	add	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002228:	e002      	b.n	8002230 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	3b01      	subs	r3, #1
 800222e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f9      	bne.n	800222a <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002236:	e040      	b.n	80022ba <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a2c      	ldr	r2, [pc, #176]	; (80022f0 <HAL_ADC_ConfigChannel+0x7d4>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d118      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x758>
 8002242:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002246:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d112      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a23      	ldr	r2, [pc, #140]	; (80022e0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d004      	beq.n	8002262 <HAL_ADC_ConfigChannel+0x746>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a21      	ldr	r2, [pc, #132]	; (80022e4 <HAL_ADC_ConfigChannel+0x7c8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d12d      	bne.n	80022be <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002262:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002266:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800226a:	4619      	mov	r1, r3
 800226c:	481a      	ldr	r0, [pc, #104]	; (80022d8 <HAL_ADC_ConfigChannel+0x7bc>)
 800226e:	f7fe ff16 	bl	800109e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002272:	e024      	b.n	80022be <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a1e      	ldr	r2, [pc, #120]	; (80022f4 <HAL_ADC_ConfigChannel+0x7d8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d120      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800227e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d11a      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a14      	ldr	r2, [pc, #80]	; (80022e0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d115      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002294:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002298:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800229c:	4619      	mov	r1, r3
 800229e:	480e      	ldr	r0, [pc, #56]	; (80022d8 <HAL_ADC_ConfigChannel+0x7bc>)
 80022a0:	f7fe fefd 	bl	800109e <LL_ADC_SetCommonPathInternalCh>
 80022a4:	e00c      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022aa:	f043 0220 	orr.w	r2, r3, #32
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80022b8:	e002      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022ba:	bf00      	nop
 80022bc:	e000      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022be:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80022c8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	37d8      	adds	r7, #216	; 0xd8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	80080000 	.word	0x80080000
 80022d8:	50040300 	.word	0x50040300
 80022dc:	c7520000 	.word	0xc7520000
 80022e0:	50040000 	.word	0x50040000
 80022e4:	50040200 	.word	0x50040200
 80022e8:	20000000 	.word	0x20000000
 80022ec:	053e2d63 	.word	0x053e2d63
 80022f0:	cb840000 	.word	0xcb840000
 80022f4:	80000001 	.word	0x80000001

080022f8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff f8aa 	bl	8001468 <LL_ADC_REG_IsConversionOngoing>
 8002314:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff f8cb 	bl	80014b6 <LL_ADC_INJ_IsConversionOngoing>
 8002320:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d103      	bne.n	8002330 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 8090 	beq.w	8002450 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d02a      	beq.n	8002394 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	7e5b      	ldrb	r3, [r3, #25]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d126      	bne.n	8002394 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	7e1b      	ldrb	r3, [r3, #24]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d122      	bne.n	8002394 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800234e:	2301      	movs	r3, #1
 8002350:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002352:	e014      	b.n	800237e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	4a41      	ldr	r2, [pc, #260]	; (800245c <ADC_ConversionStop+0x164>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d90d      	bls.n	8002378 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002360:	f043 0210 	orr.w	r2, r3, #16
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236c:	f043 0201 	orr.w	r2, r3, #1
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e06c      	b.n	8002452 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	3301      	adds	r3, #1
 800237c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002388:	2b40      	cmp	r3, #64	; 0x40
 800238a:	d1e3      	bne.n	8002354 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2240      	movs	r2, #64	; 0x40
 8002392:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	2b02      	cmp	r3, #2
 8002398:	d014      	beq.n	80023c4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff f862 	bl	8001468 <LL_ADC_REG_IsConversionOngoing>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00c      	beq.n	80023c4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff f81f 	bl	80013f2 <LL_ADC_IsDisableOngoing>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d104      	bne.n	80023c4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff f83e 	bl	8001440 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d014      	beq.n	80023f4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff f871 	bl	80014b6 <LL_ADC_INJ_IsConversionOngoing>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00c      	beq.n	80023f4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff f807 	bl	80013f2 <LL_ADC_IsDisableOngoing>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d104      	bne.n	80023f4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff f84d 	bl	800148e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d004      	beq.n	8002404 <ADC_ConversionStop+0x10c>
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d105      	bne.n	800240a <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80023fe:	230c      	movs	r3, #12
 8002400:	617b      	str	r3, [r7, #20]
        break;
 8002402:	e005      	b.n	8002410 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002404:	2308      	movs	r3, #8
 8002406:	617b      	str	r3, [r7, #20]
        break;
 8002408:	e002      	b.n	8002410 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800240a:	2304      	movs	r3, #4
 800240c:	617b      	str	r3, [r7, #20]
        break;
 800240e:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002410:	f7fe fe26 	bl	8001060 <HAL_GetTick>
 8002414:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002416:	e014      	b.n	8002442 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002418:	f7fe fe22 	bl	8001060 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b05      	cmp	r3, #5
 8002424:	d90d      	bls.n	8002442 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242a:	f043 0210 	orr.w	r2, r3, #16
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002436:	f043 0201 	orr.w	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e007      	b.n	8002452 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	4013      	ands	r3, r2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1e3      	bne.n	8002418 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3720      	adds	r7, #32
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	a33fffff 	.word	0xa33fffff

08002460 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe ffad 	bl	80013cc <LL_ADC_IsEnabled>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d146      	bne.n	8002506 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	4b24      	ldr	r3, [pc, #144]	; (8002510 <ADC_Enable+0xb0>)
 8002480:	4013      	ands	r3, r2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00d      	beq.n	80024a2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248a:	f043 0210 	orr.w	r2, r3, #16
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002496:	f043 0201 	orr.w	r2, r3, #1
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e032      	b.n	8002508 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe ff68 	bl	800137c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80024ac:	f7fe fdd8 	bl	8001060 <HAL_GetTick>
 80024b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024b2:	e021      	b.n	80024f8 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe ff87 	bl	80013cc <LL_ADC_IsEnabled>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d104      	bne.n	80024ce <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe ff57 	bl	800137c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024ce:	f7fe fdc7 	bl	8001060 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d90d      	bls.n	80024f8 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e0:	f043 0210 	orr.w	r2, r3, #16
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ec:	f043 0201 	orr.w	r2, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e007      	b.n	8002508 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b01      	cmp	r3, #1
 8002504:	d1d6      	bne.n	80024b4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	8000003f 	.word	0x8000003f

08002514 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe ff66 	bl	80013f2 <LL_ADC_IsDisableOngoing>
 8002526:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe ff4d 	bl	80013cc <LL_ADC_IsEnabled>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d040      	beq.n	80025ba <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d13d      	bne.n	80025ba <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 030d 	and.w	r3, r3, #13
 8002548:	2b01      	cmp	r3, #1
 800254a:	d10c      	bne.n	8002566 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe ff27 	bl	80013a4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2203      	movs	r2, #3
 800255c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800255e:	f7fe fd7f 	bl	8001060 <HAL_GetTick>
 8002562:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002564:	e022      	b.n	80025ac <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256a:	f043 0210 	orr.w	r2, r3, #16
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002576:	f043 0201 	orr.w	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e01c      	b.n	80025bc <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002582:	f7fe fd6d 	bl	8001060 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d90d      	bls.n	80025ac <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002594:	f043 0210 	orr.w	r2, r3, #16
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a0:	f043 0201 	orr.w	r2, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e007      	b.n	80025bc <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1e3      	bne.n	8002582 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <LL_ADC_IsEnabled>:
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d101      	bne.n	80025dc <LL_ADC_IsEnabled+0x18>
 80025d8:	2301      	movs	r3, #1
 80025da:	e000      	b.n	80025de <LL_ADC_IsEnabled+0x1a>
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <LL_ADC_REG_IsConversionOngoing>:
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d101      	bne.n	8002602 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002610:	b590      	push	{r4, r7, lr}
 8002612:	b09f      	sub	sp, #124	; 0x7c
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800262a:	2302      	movs	r3, #2
 800262c:	e08f      	b.n	800274e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a47      	ldr	r2, [pc, #284]	; (8002758 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d102      	bne.n	8002646 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002640:	4b46      	ldr	r3, [pc, #280]	; (800275c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	e001      	b.n	800264a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10b      	bne.n	8002668 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002654:	f043 0220 	orr.w	r2, r3, #32
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e072      	b.n	800274e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff ffbd 	bl	80025ea <LL_ADC_REG_IsConversionOngoing>
 8002670:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff ffb7 	bl	80025ea <LL_ADC_REG_IsConversionOngoing>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d154      	bne.n	800272c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002682:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002684:	2b00      	cmp	r3, #0
 8002686:	d151      	bne.n	800272c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002688:	4b35      	ldr	r3, [pc, #212]	; (8002760 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800268a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d02c      	beq.n	80026ee <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	6859      	ldr	r1, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026a6:	035b      	lsls	r3, r3, #13
 80026a8:	430b      	orrs	r3, r1
 80026aa:	431a      	orrs	r2, r3
 80026ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026b0:	4829      	ldr	r0, [pc, #164]	; (8002758 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80026b2:	f7ff ff87 	bl	80025c4 <LL_ADC_IsEnabled>
 80026b6:	4604      	mov	r4, r0
 80026b8:	4828      	ldr	r0, [pc, #160]	; (800275c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80026ba:	f7ff ff83 	bl	80025c4 <LL_ADC_IsEnabled>
 80026be:	4603      	mov	r3, r0
 80026c0:	431c      	orrs	r4, r3
 80026c2:	4828      	ldr	r0, [pc, #160]	; (8002764 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80026c4:	f7ff ff7e 	bl	80025c4 <LL_ADC_IsEnabled>
 80026c8:	4603      	mov	r3, r0
 80026ca:	4323      	orrs	r3, r4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d137      	bne.n	8002740 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80026d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80026d8:	f023 030f 	bic.w	r3, r3, #15
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	6811      	ldr	r1, [r2, #0]
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	6892      	ldr	r2, [r2, #8]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	431a      	orrs	r2, r3
 80026e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ea:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026ec:	e028      	b.n	8002740 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80026ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026fa:	4817      	ldr	r0, [pc, #92]	; (8002758 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80026fc:	f7ff ff62 	bl	80025c4 <LL_ADC_IsEnabled>
 8002700:	4604      	mov	r4, r0
 8002702:	4816      	ldr	r0, [pc, #88]	; (800275c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002704:	f7ff ff5e 	bl	80025c4 <LL_ADC_IsEnabled>
 8002708:	4603      	mov	r3, r0
 800270a:	431c      	orrs	r4, r3
 800270c:	4815      	ldr	r0, [pc, #84]	; (8002764 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800270e:	f7ff ff59 	bl	80025c4 <LL_ADC_IsEnabled>
 8002712:	4603      	mov	r3, r0
 8002714:	4323      	orrs	r3, r4
 8002716:	2b00      	cmp	r3, #0
 8002718:	d112      	bne.n	8002740 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800271a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002722:	f023 030f 	bic.w	r3, r3, #15
 8002726:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002728:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800272a:	e009      	b.n	8002740 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002730:	f043 0220 	orr.w	r2, r3, #32
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800273e:	e000      	b.n	8002742 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002740:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800274a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800274e:	4618      	mov	r0, r3
 8002750:	377c      	adds	r7, #124	; 0x7c
 8002752:	46bd      	mov	sp, r7
 8002754:	bd90      	pop	{r4, r7, pc}
 8002756:	bf00      	nop
 8002758:	50040000 	.word	0x50040000
 800275c:	50040100 	.word	0x50040100
 8002760:	50040300 	.word	0x50040300
 8002764:	50040200 	.word	0x50040200

08002768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002778:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <__NVIC_SetPriorityGrouping+0x44>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002784:	4013      	ands	r3, r2
 8002786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800279a:	4a04      	ldr	r2, [pc, #16]	; (80027ac <__NVIC_SetPriorityGrouping+0x44>)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	60d3      	str	r3, [r2, #12]
}
 80027a0:	bf00      	nop
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b4:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <__NVIC_GetPriorityGrouping+0x18>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	0a1b      	lsrs	r3, r3, #8
 80027ba:	f003 0307 	and.w	r3, r3, #7
}
 80027be:	4618      	mov	r0, r3
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	e000ed00 	.word	0xe000ed00

080027cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	6039      	str	r1, [r7, #0]
 80027d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	db0a      	blt.n	80027f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	490c      	ldr	r1, [pc, #48]	; (8002818 <__NVIC_SetPriority+0x4c>)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	0112      	lsls	r2, r2, #4
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	440b      	add	r3, r1
 80027f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027f4:	e00a      	b.n	800280c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	4908      	ldr	r1, [pc, #32]	; (800281c <__NVIC_SetPriority+0x50>)
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	3b04      	subs	r3, #4
 8002804:	0112      	lsls	r2, r2, #4
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	440b      	add	r3, r1
 800280a:	761a      	strb	r2, [r3, #24]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	e000e100 	.word	0xe000e100
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002820:	b480      	push	{r7}
 8002822:	b089      	sub	sp, #36	; 0x24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f1c3 0307 	rsb	r3, r3, #7
 800283a:	2b04      	cmp	r3, #4
 800283c:	bf28      	it	cs
 800283e:	2304      	movcs	r3, #4
 8002840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3304      	adds	r3, #4
 8002846:	2b06      	cmp	r3, #6
 8002848:	d902      	bls.n	8002850 <NVIC_EncodePriority+0x30>
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3b03      	subs	r3, #3
 800284e:	e000      	b.n	8002852 <NVIC_EncodePriority+0x32>
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002854:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43da      	mvns	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	401a      	ands	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002868:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	fa01 f303 	lsl.w	r3, r1, r3
 8002872:	43d9      	mvns	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002878:	4313      	orrs	r3, r2
         );
}
 800287a:	4618      	mov	r0, r3
 800287c:	3724      	adds	r7, #36	; 0x24
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3b01      	subs	r3, #1
 8002894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002898:	d301      	bcc.n	800289e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800289a:	2301      	movs	r3, #1
 800289c:	e00f      	b.n	80028be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800289e:	4a0a      	ldr	r2, [pc, #40]	; (80028c8 <SysTick_Config+0x40>)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028a6:	210f      	movs	r1, #15
 80028a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028ac:	f7ff ff8e 	bl	80027cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <SysTick_Config+0x40>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028b6:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <SysTick_Config+0x40>)
 80028b8:	2207      	movs	r2, #7
 80028ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	e000e010 	.word	0xe000e010

080028cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff ff47 	bl	8002768 <__NVIC_SetPriorityGrouping>
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b086      	sub	sp, #24
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	4603      	mov	r3, r0
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028f4:	f7ff ff5c 	bl	80027b0 <__NVIC_GetPriorityGrouping>
 80028f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	6978      	ldr	r0, [r7, #20]
 8002900:	f7ff ff8e 	bl	8002820 <NVIC_EncodePriority>
 8002904:	4602      	mov	r2, r0
 8002906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ff5d 	bl	80027cc <__NVIC_SetPriority>
}
 8002912:	bf00      	nop
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff ffb0 	bl	8002888 <SysTick_Config>
 8002928:	4603      	mov	r3, r0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002938:	4b04      	ldr	r3, [pc, #16]	; (800294c <HAL_PWREx_GetVoltageRange+0x18>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002940:	4618      	mov	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	40007000 	.word	0x40007000

08002950 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800295e:	d130      	bne.n	80029c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002960:	4b23      	ldr	r3, [pc, #140]	; (80029f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800296c:	d038      	beq.n	80029e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800296e:	4b20      	ldr	r3, [pc, #128]	; (80029f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002976:	4a1e      	ldr	r2, [pc, #120]	; (80029f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002978:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800297c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800297e:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2232      	movs	r2, #50	; 0x32
 8002984:	fb02 f303 	mul.w	r3, r2, r3
 8002988:	4a1b      	ldr	r2, [pc, #108]	; (80029f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800298a:	fba2 2303 	umull	r2, r3, r2, r3
 800298e:	0c9b      	lsrs	r3, r3, #18
 8002990:	3301      	adds	r3, #1
 8002992:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002994:	e002      	b.n	800299c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	3b01      	subs	r3, #1
 800299a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800299c:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029a8:	d102      	bne.n	80029b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1f2      	bne.n	8002996 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029b0:	4b0f      	ldr	r3, [pc, #60]	; (80029f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029bc:	d110      	bne.n	80029e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e00f      	b.n	80029e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029c2:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ce:	d007      	beq.n	80029e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029d0:	4b07      	ldr	r3, [pc, #28]	; (80029f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029d8:	4a05      	ldr	r2, [pc, #20]	; (80029f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40007000 	.word	0x40007000
 80029f4:	20000000 	.word	0x20000000
 80029f8:	431bde83 	.word	0x431bde83

080029fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e3d4      	b.n	80031b8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a0e:	4ba1      	ldr	r3, [pc, #644]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 030c 	and.w	r3, r3, #12
 8002a16:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a18:	4b9e      	ldr	r3, [pc, #632]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0310 	and.w	r3, r3, #16
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 80e4 	beq.w	8002bf8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d007      	beq.n	8002a46 <HAL_RCC_OscConfig+0x4a>
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	2b0c      	cmp	r3, #12
 8002a3a:	f040 808b 	bne.w	8002b54 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	f040 8087 	bne.w	8002b54 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a46:	4b93      	ldr	r3, [pc, #588]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d005      	beq.n	8002a5e <HAL_RCC_OscConfig+0x62>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e3ac      	b.n	80031b8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1a      	ldr	r2, [r3, #32]
 8002a62:	4b8c      	ldr	r3, [pc, #560]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d004      	beq.n	8002a78 <HAL_RCC_OscConfig+0x7c>
 8002a6e:	4b89      	ldr	r3, [pc, #548]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a76:	e005      	b.n	8002a84 <HAL_RCC_OscConfig+0x88>
 8002a78:	4b86      	ldr	r3, [pc, #536]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a7e:	091b      	lsrs	r3, r3, #4
 8002a80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d223      	bcs.n	8002ad0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 fd07 	bl	80034a0 <RCC_SetFlashLatencyFromMSIRange>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e38d      	b.n	80031b8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a9c:	4b7d      	ldr	r3, [pc, #500]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a7c      	ldr	r2, [pc, #496]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002aa2:	f043 0308 	orr.w	r3, r3, #8
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	4b7a      	ldr	r3, [pc, #488]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	4977      	ldr	r1, [pc, #476]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aba:	4b76      	ldr	r3, [pc, #472]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	021b      	lsls	r3, r3, #8
 8002ac8:	4972      	ldr	r1, [pc, #456]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	604b      	str	r3, [r1, #4]
 8002ace:	e025      	b.n	8002b1c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ad0:	4b70      	ldr	r3, [pc, #448]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a6f      	ldr	r2, [pc, #444]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002ad6:	f043 0308 	orr.w	r3, r3, #8
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	4b6d      	ldr	r3, [pc, #436]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	496a      	ldr	r1, [pc, #424]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aee:	4b69      	ldr	r3, [pc, #420]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	021b      	lsls	r3, r3, #8
 8002afc:	4965      	ldr	r1, [pc, #404]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d109      	bne.n	8002b1c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 fcc7 	bl	80034a0 <RCC_SetFlashLatencyFromMSIRange>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e34d      	b.n	80031b8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b1c:	f000 fc36 	bl	800338c <HAL_RCC_GetSysClockFreq>
 8002b20:	4601      	mov	r1, r0
 8002b22:	4b5c      	ldr	r3, [pc, #368]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	091b      	lsrs	r3, r3, #4
 8002b28:	f003 030f 	and.w	r3, r3, #15
 8002b2c:	4a5a      	ldr	r2, [pc, #360]	; (8002c98 <HAL_RCC_OscConfig+0x29c>)
 8002b2e:	5cd3      	ldrb	r3, [r2, r3]
 8002b30:	f003 031f 	and.w	r3, r3, #31
 8002b34:	fa21 f303 	lsr.w	r3, r1, r3
 8002b38:	4a58      	ldr	r2, [pc, #352]	; (8002c9c <HAL_RCC_OscConfig+0x2a0>)
 8002b3a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b3c:	4b58      	ldr	r3, [pc, #352]	; (8002ca0 <HAL_RCC_OscConfig+0x2a4>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fe fa3d 	bl	8000fc0 <HAL_InitTick>
 8002b46:	4603      	mov	r3, r0
 8002b48:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d052      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	e331      	b.n	80031b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d032      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b5c:	4b4d      	ldr	r3, [pc, #308]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a4c      	ldr	r2, [pc, #304]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b68:	f7fe fa7a 	bl	8001060 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b70:	f7fe fa76 	bl	8001060 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e31a      	b.n	80031b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b82:	4b44      	ldr	r3, [pc, #272]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b8e:	4b41      	ldr	r3, [pc, #260]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a40      	ldr	r2, [pc, #256]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002b94:	f043 0308 	orr.w	r3, r3, #8
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	4b3e      	ldr	r3, [pc, #248]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	493b      	ldr	r1, [pc, #236]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bac:	4b39      	ldr	r3, [pc, #228]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	021b      	lsls	r3, r3, #8
 8002bba:	4936      	ldr	r1, [pc, #216]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]
 8002bc0:	e01a      	b.n	8002bf8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bc2:	4b34      	ldr	r3, [pc, #208]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a33      	ldr	r2, [pc, #204]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002bc8:	f023 0301 	bic.w	r3, r3, #1
 8002bcc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bce:	f7fe fa47 	bl	8001060 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bd6:	f7fe fa43 	bl	8001060 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e2e7      	b.n	80031b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002be8:	4b2a      	ldr	r3, [pc, #168]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1f0      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x1da>
 8002bf4:	e000      	b.n	8002bf8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bf6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d074      	beq.n	8002cee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d005      	beq.n	8002c16 <HAL_RCC_OscConfig+0x21a>
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	2b0c      	cmp	r3, #12
 8002c0e:	d10e      	bne.n	8002c2e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	d10b      	bne.n	8002c2e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c16:	4b1f      	ldr	r3, [pc, #124]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d064      	beq.n	8002cec <HAL_RCC_OscConfig+0x2f0>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d160      	bne.n	8002cec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e2c4      	b.n	80031b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c36:	d106      	bne.n	8002c46 <HAL_RCC_OscConfig+0x24a>
 8002c38:	4b16      	ldr	r3, [pc, #88]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a15      	ldr	r2, [pc, #84]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	e01d      	b.n	8002c82 <HAL_RCC_OscConfig+0x286>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c4e:	d10c      	bne.n	8002c6a <HAL_RCC_OscConfig+0x26e>
 8002c50:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a0f      	ldr	r2, [pc, #60]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002c56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	4b0d      	ldr	r3, [pc, #52]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a0c      	ldr	r2, [pc, #48]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	e00b      	b.n	8002c82 <HAL_RCC_OscConfig+0x286>
 8002c6a:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a09      	ldr	r2, [pc, #36]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002c70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	4b07      	ldr	r3, [pc, #28]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a06      	ldr	r2, [pc, #24]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002c7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c80:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d01c      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8a:	f7fe f9e9 	bl	8001060 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c90:	e011      	b.n	8002cb6 <HAL_RCC_OscConfig+0x2ba>
 8002c92:	bf00      	nop
 8002c94:	40021000 	.word	0x40021000
 8002c98:	08003f30 	.word	0x08003f30
 8002c9c:	20000000 	.word	0x20000000
 8002ca0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca4:	f7fe f9dc 	bl	8001060 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b64      	cmp	r3, #100	; 0x64
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e280      	b.n	80031b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cb6:	4baf      	ldr	r3, [pc, #700]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0f0      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x2a8>
 8002cc2:	e014      	b.n	8002cee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc4:	f7fe f9cc 	bl	8001060 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ccc:	f7fe f9c8 	bl	8001060 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b64      	cmp	r3, #100	; 0x64
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e26c      	b.n	80031b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cde:	4ba5      	ldr	r3, [pc, #660]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x2d0>
 8002cea:	e000      	b.n	8002cee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d060      	beq.n	8002dbc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d005      	beq.n	8002d0c <HAL_RCC_OscConfig+0x310>
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	2b0c      	cmp	r3, #12
 8002d04:	d119      	bne.n	8002d3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d116      	bne.n	8002d3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d0c:	4b99      	ldr	r3, [pc, #612]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_OscConfig+0x328>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e249      	b.n	80031b8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d24:	4b93      	ldr	r3, [pc, #588]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	061b      	lsls	r3, r3, #24
 8002d32:	4990      	ldr	r1, [pc, #576]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d38:	e040      	b.n	8002dbc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d023      	beq.n	8002d8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d42:	4b8c      	ldr	r3, [pc, #560]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a8b      	ldr	r2, [pc, #556]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4e:	f7fe f987 	bl	8001060 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d56:	f7fe f983 	bl	8001060 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e227      	b.n	80031b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d68:	4b82      	ldr	r3, [pc, #520]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d74:	4b7f      	ldr	r3, [pc, #508]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	061b      	lsls	r3, r3, #24
 8002d82:	497c      	ldr	r1, [pc, #496]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	604b      	str	r3, [r1, #4]
 8002d88:	e018      	b.n	8002dbc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d8a:	4b7a      	ldr	r3, [pc, #488]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a79      	ldr	r2, [pc, #484]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d96:	f7fe f963 	bl	8001060 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d9e:	f7fe f95f 	bl	8001060 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e203      	b.n	80031b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002db0:	4b70      	ldr	r3, [pc, #448]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1f0      	bne.n	8002d9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0308 	and.w	r3, r3, #8
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d03c      	beq.n	8002e42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d01c      	beq.n	8002e0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dd0:	4b68      	ldr	r3, [pc, #416]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dd6:	4a67      	ldr	r2, [pc, #412]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de0:	f7fe f93e 	bl	8001060 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de8:	f7fe f93a 	bl	8001060 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e1de      	b.n	80031b8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dfa:	4b5e      	ldr	r3, [pc, #376]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002dfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0ef      	beq.n	8002de8 <HAL_RCC_OscConfig+0x3ec>
 8002e08:	e01b      	b.n	8002e42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e0a:	4b5a      	ldr	r3, [pc, #360]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e10:	4a58      	ldr	r2, [pc, #352]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002e12:	f023 0301 	bic.w	r3, r3, #1
 8002e16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1a:	f7fe f921 	bl	8001060 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e22:	f7fe f91d 	bl	8001060 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e1c1      	b.n	80031b8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e34:	4b4f      	ldr	r3, [pc, #316]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1ef      	bne.n	8002e22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 80a6 	beq.w	8002f9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e50:	2300      	movs	r3, #0
 8002e52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e54:	4b47      	ldr	r3, [pc, #284]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10d      	bne.n	8002e7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e60:	4b44      	ldr	r3, [pc, #272]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e64:	4a43      	ldr	r2, [pc, #268]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e6c:	4b41      	ldr	r3, [pc, #260]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e7c:	4b3e      	ldr	r3, [pc, #248]	; (8002f78 <HAL_RCC_OscConfig+0x57c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d118      	bne.n	8002eba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e88:	4b3b      	ldr	r3, [pc, #236]	; (8002f78 <HAL_RCC_OscConfig+0x57c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a3a      	ldr	r2, [pc, #232]	; (8002f78 <HAL_RCC_OscConfig+0x57c>)
 8002e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e94:	f7fe f8e4 	bl	8001060 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e9c:	f7fe f8e0 	bl	8001060 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e184      	b.n	80031b8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eae:	4b32      	ldr	r3, [pc, #200]	; (8002f78 <HAL_RCC_OscConfig+0x57c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d108      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x4d8>
 8002ec2:	4b2c      	ldr	r3, [pc, #176]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec8:	4a2a      	ldr	r2, [pc, #168]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ed2:	e024      	b.n	8002f1e <HAL_RCC_OscConfig+0x522>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b05      	cmp	r3, #5
 8002eda:	d110      	bne.n	8002efe <HAL_RCC_OscConfig+0x502>
 8002edc:	4b25      	ldr	r3, [pc, #148]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee2:	4a24      	ldr	r2, [pc, #144]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002ee4:	f043 0304 	orr.w	r3, r3, #4
 8002ee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eec:	4b21      	ldr	r3, [pc, #132]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef2:	4a20      	ldr	r2, [pc, #128]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002efc:	e00f      	b.n	8002f1e <HAL_RCC_OscConfig+0x522>
 8002efe:	4b1d      	ldr	r3, [pc, #116]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f04:	4a1b      	ldr	r2, [pc, #108]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002f06:	f023 0301 	bic.w	r3, r3, #1
 8002f0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f0e:	4b19      	ldr	r3, [pc, #100]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f14:	4a17      	ldr	r2, [pc, #92]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002f16:	f023 0304 	bic.w	r3, r3, #4
 8002f1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d016      	beq.n	8002f54 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f26:	f7fe f89b 	bl	8001060 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f2c:	e00a      	b.n	8002f44 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2e:	f7fe f897 	bl	8001060 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e139      	b.n	80031b8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f44:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0ed      	beq.n	8002f2e <HAL_RCC_OscConfig+0x532>
 8002f52:	e01a      	b.n	8002f8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f54:	f7fe f884 	bl	8001060 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f5a:	e00f      	b.n	8002f7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5c:	f7fe f880 	bl	8001060 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d906      	bls.n	8002f7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e122      	b.n	80031b8 <HAL_RCC_OscConfig+0x7bc>
 8002f72:	bf00      	nop
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f7c:	4b90      	ldr	r3, [pc, #576]	; (80031c0 <HAL_RCC_OscConfig+0x7c4>)
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1e8      	bne.n	8002f5c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f8a:	7ffb      	ldrb	r3, [r7, #31]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d105      	bne.n	8002f9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f90:	4b8b      	ldr	r3, [pc, #556]	; (80031c0 <HAL_RCC_OscConfig+0x7c4>)
 8002f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f94:	4a8a      	ldr	r2, [pc, #552]	; (80031c0 <HAL_RCC_OscConfig+0x7c4>)
 8002f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 8108 	beq.w	80031b6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	f040 80d0 	bne.w	8003150 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002fb0:	4b83      	ldr	r3, [pc, #524]	; (80031c0 <HAL_RCC_OscConfig+0x7c4>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f003 0203 	and.w	r2, r3, #3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d130      	bne.n	8003026 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d127      	bne.n	8003026 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d11f      	bne.n	8003026 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ff0:	2a07      	cmp	r2, #7
 8002ff2:	bf14      	ite	ne
 8002ff4:	2201      	movne	r2, #1
 8002ff6:	2200      	moveq	r2, #0
 8002ff8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d113      	bne.n	8003026 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003008:	085b      	lsrs	r3, r3, #1
 800300a:	3b01      	subs	r3, #1
 800300c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800300e:	429a      	cmp	r2, r3
 8003010:	d109      	bne.n	8003026 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	085b      	lsrs	r3, r3, #1
 800301e:	3b01      	subs	r3, #1
 8003020:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003022:	429a      	cmp	r2, r3
 8003024:	d06e      	beq.n	8003104 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	2b0c      	cmp	r3, #12
 800302a:	d069      	beq.n	8003100 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800302c:	4b64      	ldr	r3, [pc, #400]	; (80031c0 <HAL_RCC_OscConfig+0x7c4>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d105      	bne.n	8003044 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003038:	4b61      	ldr	r3, [pc, #388]	; (80031c0 <HAL_RCC_OscConfig+0x7c4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e0b7      	b.n	80031b8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003048:	4b5d      	ldr	r3, [pc, #372]	; (80031c0 <HAL_RCC_OscConfig+0x7c4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a5c      	ldr	r2, [pc, #368]	; (80031c0 <HAL_RCC_OscConfig+0x7c4>)
 800304e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003052:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003054:	f7fe f804 	bl	8001060 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305c:	f7fe f800 	bl	8001060 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e0a4      	b.n	80031b8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800306e:	4b54      	ldr	r3, [pc, #336]	; (80031c0 <HAL_RCC_OscConfig+0x7c4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800307a:	4b51      	ldr	r3, [pc, #324]	; (80031c0 <HAL_RCC_OscConfig+0x7c4>)
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	4b51      	ldr	r3, [pc, #324]	; (80031c4 <HAL_RCC_OscConfig+0x7c8>)
 8003080:	4013      	ands	r3, r2
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800308a:	3a01      	subs	r2, #1
 800308c:	0112      	lsls	r2, r2, #4
 800308e:	4311      	orrs	r1, r2
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003094:	0212      	lsls	r2, r2, #8
 8003096:	4311      	orrs	r1, r2
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800309c:	0852      	lsrs	r2, r2, #1
 800309e:	3a01      	subs	r2, #1
 80030a0:	0552      	lsls	r2, r2, #21
 80030a2:	4311      	orrs	r1, r2
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030a8:	0852      	lsrs	r2, r2, #1
 80030aa:	3a01      	subs	r2, #1
 80030ac:	0652      	lsls	r2, r2, #25
 80030ae:	4311      	orrs	r1, r2
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030b4:	0912      	lsrs	r2, r2, #4
 80030b6:	0452      	lsls	r2, r2, #17
 80030b8:	430a      	orrs	r2, r1
 80030ba:	4941      	ldr	r1, [pc, #260]	; (80031c0 <HAL_RCC_OscConfig+0x7c4>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030c0:	4b3f      	ldr	r3, [pc, #252]	; (80031c0 <HAL_RCC_OscConfig+0x7c4>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a3e      	ldr	r2, [pc, #248]	; (80031c0 <HAL_RCC_OscConfig+0x7c4>)
 80030c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030cc:	4b3c      	ldr	r3, [pc, #240]	; (80031c0 <HAL_RCC_OscConfig+0x7c4>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	4a3b      	ldr	r2, [pc, #236]	; (80031c0 <HAL_RCC_OscConfig+0x7c4>)
 80030d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030d8:	f7fd ffc2 	bl	8001060 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e0:	f7fd ffbe 	bl	8001060 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e062      	b.n	80031b8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f2:	4b33      	ldr	r3, [pc, #204]	; (80031c0 <HAL_RCC_OscConfig+0x7c4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030fe:	e05a      	b.n	80031b6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e059      	b.n	80031b8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003104:	4b2e      	ldr	r3, [pc, #184]	; (80031c0 <HAL_RCC_OscConfig+0x7c4>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d152      	bne.n	80031b6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003110:	4b2b      	ldr	r3, [pc, #172]	; (80031c0 <HAL_RCC_OscConfig+0x7c4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a2a      	ldr	r2, [pc, #168]	; (80031c0 <HAL_RCC_OscConfig+0x7c4>)
 8003116:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800311a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800311c:	4b28      	ldr	r3, [pc, #160]	; (80031c0 <HAL_RCC_OscConfig+0x7c4>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	4a27      	ldr	r2, [pc, #156]	; (80031c0 <HAL_RCC_OscConfig+0x7c4>)
 8003122:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003126:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003128:	f7fd ff9a 	bl	8001060 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003130:	f7fd ff96 	bl	8001060 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e03a      	b.n	80031b8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003142:	4b1f      	ldr	r3, [pc, #124]	; (80031c0 <HAL_RCC_OscConfig+0x7c4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0x734>
 800314e:	e032      	b.n	80031b6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	2b0c      	cmp	r3, #12
 8003154:	d02d      	beq.n	80031b2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003156:	4b1a      	ldr	r3, [pc, #104]	; (80031c0 <HAL_RCC_OscConfig+0x7c4>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a19      	ldr	r2, [pc, #100]	; (80031c0 <HAL_RCC_OscConfig+0x7c4>)
 800315c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003160:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003162:	4b17      	ldr	r3, [pc, #92]	; (80031c0 <HAL_RCC_OscConfig+0x7c4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d105      	bne.n	800317a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800316e:	4b14      	ldr	r3, [pc, #80]	; (80031c0 <HAL_RCC_OscConfig+0x7c4>)
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	4a13      	ldr	r2, [pc, #76]	; (80031c0 <HAL_RCC_OscConfig+0x7c4>)
 8003174:	f023 0303 	bic.w	r3, r3, #3
 8003178:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800317a:	4b11      	ldr	r3, [pc, #68]	; (80031c0 <HAL_RCC_OscConfig+0x7c4>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	4a10      	ldr	r2, [pc, #64]	; (80031c0 <HAL_RCC_OscConfig+0x7c4>)
 8003180:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003188:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318a:	f7fd ff69 	bl	8001060 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003192:	f7fd ff65 	bl	8001060 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e009      	b.n	80031b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031a4:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <HAL_RCC_OscConfig+0x7c4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1f0      	bne.n	8003192 <HAL_RCC_OscConfig+0x796>
 80031b0:	e001      	b.n	80031b6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3720      	adds	r7, #32
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40021000 	.word	0x40021000
 80031c4:	f99d808c 	.word	0xf99d808c

080031c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0c8      	b.n	800336e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031dc:	4b66      	ldr	r3, [pc, #408]	; (8003378 <HAL_RCC_ClockConfig+0x1b0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d910      	bls.n	800320c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ea:	4b63      	ldr	r3, [pc, #396]	; (8003378 <HAL_RCC_ClockConfig+0x1b0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 0207 	bic.w	r2, r3, #7
 80031f2:	4961      	ldr	r1, [pc, #388]	; (8003378 <HAL_RCC_ClockConfig+0x1b0>)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fa:	4b5f      	ldr	r3, [pc, #380]	; (8003378 <HAL_RCC_ClockConfig+0x1b0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e0b0      	b.n	800336e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d04c      	beq.n	80032b2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b03      	cmp	r3, #3
 800321e:	d107      	bne.n	8003230 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003220:	4b56      	ldr	r3, [pc, #344]	; (800337c <HAL_RCC_ClockConfig+0x1b4>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d121      	bne.n	8003270 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e09e      	b.n	800336e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b02      	cmp	r3, #2
 8003236:	d107      	bne.n	8003248 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003238:	4b50      	ldr	r3, [pc, #320]	; (800337c <HAL_RCC_ClockConfig+0x1b4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d115      	bne.n	8003270 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e092      	b.n	800336e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d107      	bne.n	8003260 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003250:	4b4a      	ldr	r3, [pc, #296]	; (800337c <HAL_RCC_ClockConfig+0x1b4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d109      	bne.n	8003270 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e086      	b.n	800336e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003260:	4b46      	ldr	r3, [pc, #280]	; (800337c <HAL_RCC_ClockConfig+0x1b4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e07e      	b.n	800336e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003270:	4b42      	ldr	r3, [pc, #264]	; (800337c <HAL_RCC_ClockConfig+0x1b4>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f023 0203 	bic.w	r2, r3, #3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	493f      	ldr	r1, [pc, #252]	; (800337c <HAL_RCC_ClockConfig+0x1b4>)
 800327e:	4313      	orrs	r3, r2
 8003280:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003282:	f7fd feed 	bl	8001060 <HAL_GetTick>
 8003286:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003288:	e00a      	b.n	80032a0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800328a:	f7fd fee9 	bl	8001060 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	f241 3288 	movw	r2, #5000	; 0x1388
 8003298:	4293      	cmp	r3, r2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e066      	b.n	800336e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a0:	4b36      	ldr	r3, [pc, #216]	; (800337c <HAL_RCC_ClockConfig+0x1b4>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 020c 	and.w	r2, r3, #12
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d1eb      	bne.n	800328a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d008      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032be:	4b2f      	ldr	r3, [pc, #188]	; (800337c <HAL_RCC_ClockConfig+0x1b4>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	492c      	ldr	r1, [pc, #176]	; (800337c <HAL_RCC_ClockConfig+0x1b4>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032d0:	4b29      	ldr	r3, [pc, #164]	; (8003378 <HAL_RCC_ClockConfig+0x1b0>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d210      	bcs.n	8003300 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032de:	4b26      	ldr	r3, [pc, #152]	; (8003378 <HAL_RCC_ClockConfig+0x1b0>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f023 0207 	bic.w	r2, r3, #7
 80032e6:	4924      	ldr	r1, [pc, #144]	; (8003378 <HAL_RCC_ClockConfig+0x1b0>)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ee:	4b22      	ldr	r3, [pc, #136]	; (8003378 <HAL_RCC_ClockConfig+0x1b0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d001      	beq.n	8003300 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e036      	b.n	800336e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b00      	cmp	r3, #0
 800330a:	d008      	beq.n	800331e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800330c:	4b1b      	ldr	r3, [pc, #108]	; (800337c <HAL_RCC_ClockConfig+0x1b4>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	4918      	ldr	r1, [pc, #96]	; (800337c <HAL_RCC_ClockConfig+0x1b4>)
 800331a:	4313      	orrs	r3, r2
 800331c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d009      	beq.n	800333e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800332a:	4b14      	ldr	r3, [pc, #80]	; (800337c <HAL_RCC_ClockConfig+0x1b4>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	4910      	ldr	r1, [pc, #64]	; (800337c <HAL_RCC_ClockConfig+0x1b4>)
 800333a:	4313      	orrs	r3, r2
 800333c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800333e:	f000 f825 	bl	800338c <HAL_RCC_GetSysClockFreq>
 8003342:	4601      	mov	r1, r0
 8003344:	4b0d      	ldr	r3, [pc, #52]	; (800337c <HAL_RCC_ClockConfig+0x1b4>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	091b      	lsrs	r3, r3, #4
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	4a0c      	ldr	r2, [pc, #48]	; (8003380 <HAL_RCC_ClockConfig+0x1b8>)
 8003350:	5cd3      	ldrb	r3, [r2, r3]
 8003352:	f003 031f 	and.w	r3, r3, #31
 8003356:	fa21 f303 	lsr.w	r3, r1, r3
 800335a:	4a0a      	ldr	r2, [pc, #40]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 800335c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800335e:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f7fd fe2c 	bl	8000fc0 <HAL_InitTick>
 8003368:	4603      	mov	r3, r0
 800336a:	72fb      	strb	r3, [r7, #11]

  return status;
 800336c:	7afb      	ldrb	r3, [r7, #11]
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40022000 	.word	0x40022000
 800337c:	40021000 	.word	0x40021000
 8003380:	08003f30 	.word	0x08003f30
 8003384:	20000000 	.word	0x20000000
 8003388:	20000004 	.word	0x20000004

0800338c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800338c:	b480      	push	{r7}
 800338e:	b089      	sub	sp, #36	; 0x24
 8003390:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003392:	2300      	movs	r3, #0
 8003394:	61fb      	str	r3, [r7, #28]
 8003396:	2300      	movs	r3, #0
 8003398:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800339a:	4b3d      	ldr	r3, [pc, #244]	; (8003490 <HAL_RCC_GetSysClockFreq+0x104>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 030c 	and.w	r3, r3, #12
 80033a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033a4:	4b3a      	ldr	r3, [pc, #232]	; (8003490 <HAL_RCC_GetSysClockFreq+0x104>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_RCC_GetSysClockFreq+0x34>
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	2b0c      	cmp	r3, #12
 80033b8:	d121      	bne.n	80033fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d11e      	bne.n	80033fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033c0:	4b33      	ldr	r3, [pc, #204]	; (8003490 <HAL_RCC_GetSysClockFreq+0x104>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d107      	bne.n	80033dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033cc:	4b30      	ldr	r3, [pc, #192]	; (8003490 <HAL_RCC_GetSysClockFreq+0x104>)
 80033ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033d2:	0a1b      	lsrs	r3, r3, #8
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	e005      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033dc:	4b2c      	ldr	r3, [pc, #176]	; (8003490 <HAL_RCC_GetSysClockFreq+0x104>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	091b      	lsrs	r3, r3, #4
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033e8:	4a2a      	ldr	r2, [pc, #168]	; (8003494 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10d      	bne.n	8003414 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033fc:	e00a      	b.n	8003414 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	2b04      	cmp	r3, #4
 8003402:	d102      	bne.n	800340a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003404:	4b24      	ldr	r3, [pc, #144]	; (8003498 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003406:	61bb      	str	r3, [r7, #24]
 8003408:	e004      	b.n	8003414 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	2b08      	cmp	r3, #8
 800340e:	d101      	bne.n	8003414 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003410:	4b22      	ldr	r3, [pc, #136]	; (800349c <HAL_RCC_GetSysClockFreq+0x110>)
 8003412:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	2b0c      	cmp	r3, #12
 8003418:	d133      	bne.n	8003482 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800341a:	4b1d      	ldr	r3, [pc, #116]	; (8003490 <HAL_RCC_GetSysClockFreq+0x104>)
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d002      	beq.n	8003430 <HAL_RCC_GetSysClockFreq+0xa4>
 800342a:	2b03      	cmp	r3, #3
 800342c:	d003      	beq.n	8003436 <HAL_RCC_GetSysClockFreq+0xaa>
 800342e:	e005      	b.n	800343c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003430:	4b19      	ldr	r3, [pc, #100]	; (8003498 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003432:	617b      	str	r3, [r7, #20]
      break;
 8003434:	e005      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003436:	4b19      	ldr	r3, [pc, #100]	; (800349c <HAL_RCC_GetSysClockFreq+0x110>)
 8003438:	617b      	str	r3, [r7, #20]
      break;
 800343a:	e002      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	617b      	str	r3, [r7, #20]
      break;
 8003440:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003442:	4b13      	ldr	r3, [pc, #76]	; (8003490 <HAL_RCC_GetSysClockFreq+0x104>)
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	091b      	lsrs	r3, r3, #4
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	3301      	adds	r3, #1
 800344e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003450:	4b0f      	ldr	r3, [pc, #60]	; (8003490 <HAL_RCC_GetSysClockFreq+0x104>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	0a1b      	lsrs	r3, r3, #8
 8003456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	fb02 f203 	mul.w	r2, r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	fbb2 f3f3 	udiv	r3, r2, r3
 8003466:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003468:	4b09      	ldr	r3, [pc, #36]	; (8003490 <HAL_RCC_GetSysClockFreq+0x104>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	0e5b      	lsrs	r3, r3, #25
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	3301      	adds	r3, #1
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003480:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003482:	69bb      	ldr	r3, [r7, #24]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3724      	adds	r7, #36	; 0x24
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	40021000 	.word	0x40021000
 8003494:	08003f40 	.word	0x08003f40
 8003498:	00f42400 	.word	0x00f42400
 800349c:	007a1200 	.word	0x007a1200

080034a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80034a8:	2300      	movs	r3, #0
 80034aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034ac:	4b2a      	ldr	r3, [pc, #168]	; (8003558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d003      	beq.n	80034c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80034b8:	f7ff fa3c 	bl	8002934 <HAL_PWREx_GetVoltageRange>
 80034bc:	6178      	str	r0, [r7, #20]
 80034be:	e014      	b.n	80034ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034c0:	4b25      	ldr	r3, [pc, #148]	; (8003558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c4:	4a24      	ldr	r2, [pc, #144]	; (8003558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ca:	6593      	str	r3, [r2, #88]	; 0x58
 80034cc:	4b22      	ldr	r3, [pc, #136]	; (8003558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034d8:	f7ff fa2c 	bl	8002934 <HAL_PWREx_GetVoltageRange>
 80034dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034de:	4b1e      	ldr	r3, [pc, #120]	; (8003558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e2:	4a1d      	ldr	r2, [pc, #116]	; (8003558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f0:	d10b      	bne.n	800350a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b80      	cmp	r3, #128	; 0x80
 80034f6:	d919      	bls.n	800352c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2ba0      	cmp	r3, #160	; 0xa0
 80034fc:	d902      	bls.n	8003504 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034fe:	2302      	movs	r3, #2
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	e013      	b.n	800352c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003504:	2301      	movs	r3, #1
 8003506:	613b      	str	r3, [r7, #16]
 8003508:	e010      	b.n	800352c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b80      	cmp	r3, #128	; 0x80
 800350e:	d902      	bls.n	8003516 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003510:	2303      	movs	r3, #3
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	e00a      	b.n	800352c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b80      	cmp	r3, #128	; 0x80
 800351a:	d102      	bne.n	8003522 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800351c:	2302      	movs	r3, #2
 800351e:	613b      	str	r3, [r7, #16]
 8003520:	e004      	b.n	800352c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b70      	cmp	r3, #112	; 0x70
 8003526:	d101      	bne.n	800352c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003528:	2301      	movs	r3, #1
 800352a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800352c:	4b0b      	ldr	r3, [pc, #44]	; (800355c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f023 0207 	bic.w	r2, r3, #7
 8003534:	4909      	ldr	r1, [pc, #36]	; (800355c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800353c:	4b07      	ldr	r3, [pc, #28]	; (800355c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	429a      	cmp	r2, r3
 8003548:	d001      	beq.n	800354e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e000      	b.n	8003550 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3718      	adds	r7, #24
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40021000 	.word	0x40021000
 800355c:	40022000 	.word	0x40022000

08003560 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003568:	2300      	movs	r3, #0
 800356a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800356c:	2300      	movs	r3, #0
 800356e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003578:	2b00      	cmp	r3, #0
 800357a:	d03f      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003580:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003584:	d01c      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800358a:	d802      	bhi.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00e      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003590:	e01f      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003592:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003596:	d003      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003598:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800359c:	d01c      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800359e:	e018      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035a0:	4b85      	ldr	r3, [pc, #532]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	4a84      	ldr	r2, [pc, #528]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035ac:	e015      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3304      	adds	r3, #4
 80035b2:	2100      	movs	r1, #0
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fab9 	bl	8003b2c <RCCEx_PLLSAI1_Config>
 80035ba:	4603      	mov	r3, r0
 80035bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035be:	e00c      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3320      	adds	r3, #32
 80035c4:	2100      	movs	r1, #0
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fba0 	bl	8003d0c <RCCEx_PLLSAI2_Config>
 80035cc:	4603      	mov	r3, r0
 80035ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035d0:	e003      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	74fb      	strb	r3, [r7, #19]
      break;
 80035d6:	e000      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80035d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035da:	7cfb      	ldrb	r3, [r7, #19]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10b      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035e0:	4b75      	ldr	r3, [pc, #468]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ee:	4972      	ldr	r1, [pc, #456]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035f6:	e001      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f8:	7cfb      	ldrb	r3, [r7, #19]
 80035fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d03f      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800360c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003610:	d01c      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003612:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003616:	d802      	bhi.n	800361e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00e      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800361c:	e01f      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800361e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003622:	d003      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003624:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003628:	d01c      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800362a:	e018      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800362c:	4b62      	ldr	r3, [pc, #392]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4a61      	ldr	r2, [pc, #388]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003636:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003638:	e015      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3304      	adds	r3, #4
 800363e:	2100      	movs	r1, #0
 8003640:	4618      	mov	r0, r3
 8003642:	f000 fa73 	bl	8003b2c <RCCEx_PLLSAI1_Config>
 8003646:	4603      	mov	r3, r0
 8003648:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800364a:	e00c      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3320      	adds	r3, #32
 8003650:	2100      	movs	r1, #0
 8003652:	4618      	mov	r0, r3
 8003654:	f000 fb5a 	bl	8003d0c <RCCEx_PLLSAI2_Config>
 8003658:	4603      	mov	r3, r0
 800365a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800365c:	e003      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	74fb      	strb	r3, [r7, #19]
      break;
 8003662:	e000      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003664:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003666:	7cfb      	ldrb	r3, [r7, #19]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10b      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800366c:	4b52      	ldr	r3, [pc, #328]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800366e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003672:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800367a:	494f      	ldr	r1, [pc, #316]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003682:	e001      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003684:	7cfb      	ldrb	r3, [r7, #19]
 8003686:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 80a0 	beq.w	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003696:	2300      	movs	r3, #0
 8003698:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800369a:	4b47      	ldr	r3, [pc, #284]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800369c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80036aa:	2300      	movs	r3, #0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00d      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036b0:	4b41      	ldr	r3, [pc, #260]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b4:	4a40      	ldr	r2, [pc, #256]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ba:	6593      	str	r3, [r2, #88]	; 0x58
 80036bc:	4b3e      	ldr	r3, [pc, #248]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c4:	60bb      	str	r3, [r7, #8]
 80036c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036c8:	2301      	movs	r3, #1
 80036ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036cc:	4b3b      	ldr	r3, [pc, #236]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a3a      	ldr	r2, [pc, #232]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80036d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036d8:	f7fd fcc2 	bl	8001060 <HAL_GetTick>
 80036dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036de:	e009      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e0:	f7fd fcbe 	bl	8001060 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d902      	bls.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	74fb      	strb	r3, [r7, #19]
        break;
 80036f2:	e005      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036f4:	4b31      	ldr	r3, [pc, #196]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0ef      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003700:	7cfb      	ldrb	r3, [r7, #19]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d15c      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003706:	4b2c      	ldr	r3, [pc, #176]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003710:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d01f      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	429a      	cmp	r2, r3
 8003722:	d019      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003724:	4b24      	ldr	r3, [pc, #144]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800372e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003730:	4b21      	ldr	r3, [pc, #132]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003736:	4a20      	ldr	r2, [pc, #128]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800373c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003740:	4b1d      	ldr	r3, [pc, #116]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003746:	4a1c      	ldr	r2, [pc, #112]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800374c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003750:	4a19      	ldr	r2, [pc, #100]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d016      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003762:	f7fd fc7d 	bl	8001060 <HAL_GetTick>
 8003766:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003768:	e00b      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800376a:	f7fd fc79 	bl	8001060 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	f241 3288 	movw	r2, #5000	; 0x1388
 8003778:	4293      	cmp	r3, r2
 800377a:	d902      	bls.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	74fb      	strb	r3, [r7, #19]
            break;
 8003780:	e006      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003782:	4b0d      	ldr	r3, [pc, #52]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0ec      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003790:	7cfb      	ldrb	r3, [r7, #19]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10c      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003796:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037a6:	4904      	ldr	r1, [pc, #16]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037ae:	e009      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037b0:	7cfb      	ldrb	r3, [r7, #19]
 80037b2:	74bb      	strb	r3, [r7, #18]
 80037b4:	e006      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80037b6:	bf00      	nop
 80037b8:	40021000 	.word	0x40021000
 80037bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c0:	7cfb      	ldrb	r3, [r7, #19]
 80037c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037c4:	7c7b      	ldrb	r3, [r7, #17]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d105      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ca:	4b9e      	ldr	r3, [pc, #632]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ce:	4a9d      	ldr	r2, [pc, #628]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037e2:	4b98      	ldr	r3, [pc, #608]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e8:	f023 0203 	bic.w	r2, r3, #3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f0:	4994      	ldr	r1, [pc, #592]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003804:	4b8f      	ldr	r3, [pc, #572]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380a:	f023 020c 	bic.w	r2, r3, #12
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003812:	498c      	ldr	r1, [pc, #560]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003826:	4b87      	ldr	r3, [pc, #540]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	4983      	ldr	r1, [pc, #524]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003848:	4b7e      	ldr	r3, [pc, #504]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800384a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	497b      	ldr	r1, [pc, #492]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0310 	and.w	r3, r3, #16
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800386a:	4b76      	ldr	r3, [pc, #472]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800386c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003870:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003878:	4972      	ldr	r1, [pc, #456]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0320 	and.w	r3, r3, #32
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800388c:	4b6d      	ldr	r3, [pc, #436]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800388e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003892:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800389a:	496a      	ldr	r1, [pc, #424]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038ae:	4b65      	ldr	r3, [pc, #404]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038bc:	4961      	ldr	r1, [pc, #388]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038d0:	4b5c      	ldr	r3, [pc, #368]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038de:	4959      	ldr	r1, [pc, #356]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038f2:	4b54      	ldr	r3, [pc, #336]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003900:	4950      	ldr	r1, [pc, #320]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003914:	4b4b      	ldr	r3, [pc, #300]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003922:	4948      	ldr	r1, [pc, #288]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003924:	4313      	orrs	r3, r2
 8003926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003936:	4b43      	ldr	r3, [pc, #268]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003944:	493f      	ldr	r1, [pc, #252]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003946:	4313      	orrs	r3, r2
 8003948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d028      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003958:	4b3a      	ldr	r3, [pc, #232]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800395a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003966:	4937      	ldr	r1, [pc, #220]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003972:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003976:	d106      	bne.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003978:	4b32      	ldr	r3, [pc, #200]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	4a31      	ldr	r2, [pc, #196]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800397e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003982:	60d3      	str	r3, [r2, #12]
 8003984:	e011      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800398a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800398e:	d10c      	bne.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3304      	adds	r3, #4
 8003994:	2101      	movs	r1, #1
 8003996:	4618      	mov	r0, r3
 8003998:	f000 f8c8 	bl	8003b2c <RCCEx_PLLSAI1_Config>
 800399c:	4603      	mov	r3, r0
 800399e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039a0:	7cfb      	ldrb	r3, [r7, #19]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80039a6:	7cfb      	ldrb	r3, [r7, #19]
 80039a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d028      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039b6:	4b23      	ldr	r3, [pc, #140]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c4:	491f      	ldr	r1, [pc, #124]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039d4:	d106      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039d6:	4b1b      	ldr	r3, [pc, #108]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	4a1a      	ldr	r2, [pc, #104]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039e0:	60d3      	str	r3, [r2, #12]
 80039e2:	e011      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039ec:	d10c      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3304      	adds	r3, #4
 80039f2:	2101      	movs	r1, #1
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 f899 	bl	8003b2c <RCCEx_PLLSAI1_Config>
 80039fa:	4603      	mov	r3, r0
 80039fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039fe:	7cfb      	ldrb	r3, [r7, #19]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003a04:	7cfb      	ldrb	r3, [r7, #19]
 8003a06:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d02b      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a14:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a22:	4908      	ldr	r1, [pc, #32]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a32:	d109      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a34:	4b03      	ldr	r3, [pc, #12]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4a02      	ldr	r2, [pc, #8]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a3e:	60d3      	str	r3, [r2, #12]
 8003a40:	e014      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003a42:	bf00      	nop
 8003a44:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a50:	d10c      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3304      	adds	r3, #4
 8003a56:	2101      	movs	r1, #1
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 f867 	bl	8003b2c <RCCEx_PLLSAI1_Config>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a62:	7cfb      	ldrb	r3, [r7, #19]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003a68:	7cfb      	ldrb	r3, [r7, #19]
 8003a6a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d02f      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a78:	4b2b      	ldr	r3, [pc, #172]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a86:	4928      	ldr	r1, [pc, #160]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a96:	d10d      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	2102      	movs	r1, #2
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 f844 	bl	8003b2c <RCCEx_PLLSAI1_Config>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aa8:	7cfb      	ldrb	r3, [r7, #19]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d014      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003aae:	7cfb      	ldrb	r3, [r7, #19]
 8003ab0:	74bb      	strb	r3, [r7, #18]
 8003ab2:	e011      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003abc:	d10c      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3320      	adds	r3, #32
 8003ac2:	2102      	movs	r1, #2
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 f921 	bl	8003d0c <RCCEx_PLLSAI2_Config>
 8003aca:	4603      	mov	r3, r0
 8003acc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ace:	7cfb      	ldrb	r3, [r7, #19]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003ad4:	7cfb      	ldrb	r3, [r7, #19]
 8003ad6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00a      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ae4:	4b10      	ldr	r3, [pc, #64]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003af2:	490d      	ldr	r1, [pc, #52]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00b      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b06:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b16:	4904      	ldr	r1, [pc, #16]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b1e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40021000 	.word	0x40021000

08003b2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b36:	2300      	movs	r3, #0
 8003b38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b3a:	4b73      	ldr	r3, [pc, #460]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d018      	beq.n	8003b78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b46:	4b70      	ldr	r3, [pc, #448]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f003 0203 	and.w	r2, r3, #3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d10d      	bne.n	8003b72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
       ||
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d009      	beq.n	8003b72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b5e:	4b6a      	ldr	r3, [pc, #424]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	091b      	lsrs	r3, r3, #4
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
       ||
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d044      	beq.n	8003bfc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	73fb      	strb	r3, [r7, #15]
 8003b76:	e041      	b.n	8003bfc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d00c      	beq.n	8003b9a <RCCEx_PLLSAI1_Config+0x6e>
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	d013      	beq.n	8003bac <RCCEx_PLLSAI1_Config+0x80>
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d120      	bne.n	8003bca <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b88:	4b5f      	ldr	r3, [pc, #380]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d11d      	bne.n	8003bd0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b98:	e01a      	b.n	8003bd0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b9a:	4b5b      	ldr	r3, [pc, #364]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d116      	bne.n	8003bd4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003baa:	e013      	b.n	8003bd4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bac:	4b56      	ldr	r3, [pc, #344]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10f      	bne.n	8003bd8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bb8:	4b53      	ldr	r3, [pc, #332]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d109      	bne.n	8003bd8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bc8:	e006      	b.n	8003bd8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	73fb      	strb	r3, [r7, #15]
      break;
 8003bce:	e004      	b.n	8003bda <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003bd0:	bf00      	nop
 8003bd2:	e002      	b.n	8003bda <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003bd4:	bf00      	nop
 8003bd6:	e000      	b.n	8003bda <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003bd8:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10d      	bne.n	8003bfc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003be0:	4b49      	ldr	r3, [pc, #292]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6819      	ldr	r1, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	430b      	orrs	r3, r1
 8003bf6:	4944      	ldr	r1, [pc, #272]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d17d      	bne.n	8003cfe <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c02:	4b41      	ldr	r3, [pc, #260]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a40      	ldr	r2, [pc, #256]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c0e:	f7fd fa27 	bl	8001060 <HAL_GetTick>
 8003c12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c14:	e009      	b.n	8003c2a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c16:	f7fd fa23 	bl	8001060 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d902      	bls.n	8003c2a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	73fb      	strb	r3, [r7, #15]
        break;
 8003c28:	e005      	b.n	8003c36 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c2a:	4b37      	ldr	r3, [pc, #220]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1ef      	bne.n	8003c16 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d160      	bne.n	8003cfe <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d111      	bne.n	8003c66 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c42:	4b31      	ldr	r3, [pc, #196]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6892      	ldr	r2, [r2, #8]
 8003c52:	0211      	lsls	r1, r2, #8
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	68d2      	ldr	r2, [r2, #12]
 8003c58:	0912      	lsrs	r2, r2, #4
 8003c5a:	0452      	lsls	r2, r2, #17
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	492a      	ldr	r1, [pc, #168]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	610b      	str	r3, [r1, #16]
 8003c64:	e027      	b.n	8003cb6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d112      	bne.n	8003c92 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c6c:	4b26      	ldr	r3, [pc, #152]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6892      	ldr	r2, [r2, #8]
 8003c7c:	0211      	lsls	r1, r2, #8
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6912      	ldr	r2, [r2, #16]
 8003c82:	0852      	lsrs	r2, r2, #1
 8003c84:	3a01      	subs	r2, #1
 8003c86:	0552      	lsls	r2, r2, #21
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	491f      	ldr	r1, [pc, #124]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	610b      	str	r3, [r1, #16]
 8003c90:	e011      	b.n	8003cb6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c92:	4b1d      	ldr	r3, [pc, #116]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c9a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6892      	ldr	r2, [r2, #8]
 8003ca2:	0211      	lsls	r1, r2, #8
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6952      	ldr	r2, [r2, #20]
 8003ca8:	0852      	lsrs	r2, r2, #1
 8003caa:	3a01      	subs	r2, #1
 8003cac:	0652      	lsls	r2, r2, #25
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	4915      	ldr	r1, [pc, #84]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003cb6:	4b14      	ldr	r3, [pc, #80]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a13      	ldr	r2, [pc, #76]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cc0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc2:	f7fd f9cd 	bl	8001060 <HAL_GetTick>
 8003cc6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cc8:	e009      	b.n	8003cde <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cca:	f7fd f9c9 	bl	8001060 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d902      	bls.n	8003cde <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	73fb      	strb	r3, [r7, #15]
          break;
 8003cdc:	e005      	b.n	8003cea <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cde:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0ef      	beq.n	8003cca <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003cea:	7bfb      	ldrb	r3, [r7, #15]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d106      	bne.n	8003cfe <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003cf0:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cf2:	691a      	ldr	r2, [r3, #16]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	4903      	ldr	r1, [pc, #12]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40021000 	.word	0x40021000

08003d0c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d1a:	4b68      	ldr	r3, [pc, #416]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d018      	beq.n	8003d58 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d26:	4b65      	ldr	r3, [pc, #404]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f003 0203 	and.w	r2, r3, #3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d10d      	bne.n	8003d52 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
       ||
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d009      	beq.n	8003d52 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d3e:	4b5f      	ldr	r3, [pc, #380]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	091b      	lsrs	r3, r3, #4
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
       ||
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d044      	beq.n	8003ddc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	73fb      	strb	r3, [r7, #15]
 8003d56:	e041      	b.n	8003ddc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d00c      	beq.n	8003d7a <RCCEx_PLLSAI2_Config+0x6e>
 8003d60:	2b03      	cmp	r3, #3
 8003d62:	d013      	beq.n	8003d8c <RCCEx_PLLSAI2_Config+0x80>
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d120      	bne.n	8003daa <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d68:	4b54      	ldr	r3, [pc, #336]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d11d      	bne.n	8003db0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d78:	e01a      	b.n	8003db0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d7a:	4b50      	ldr	r3, [pc, #320]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d116      	bne.n	8003db4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d8a:	e013      	b.n	8003db4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d8c:	4b4b      	ldr	r3, [pc, #300]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10f      	bne.n	8003db8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d98:	4b48      	ldr	r3, [pc, #288]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d109      	bne.n	8003db8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003da8:	e006      	b.n	8003db8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	73fb      	strb	r3, [r7, #15]
      break;
 8003dae:	e004      	b.n	8003dba <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003db0:	bf00      	nop
 8003db2:	e002      	b.n	8003dba <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003db4:	bf00      	nop
 8003db6:	e000      	b.n	8003dba <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003db8:	bf00      	nop
    }

    if(status == HAL_OK)
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10d      	bne.n	8003ddc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003dc0:	4b3e      	ldr	r3, [pc, #248]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6819      	ldr	r1, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	430b      	orrs	r3, r1
 8003dd6:	4939      	ldr	r1, [pc, #228]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d167      	bne.n	8003eb2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003de2:	4b36      	ldr	r3, [pc, #216]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a35      	ldr	r2, [pc, #212]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dee:	f7fd f937 	bl	8001060 <HAL_GetTick>
 8003df2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003df4:	e009      	b.n	8003e0a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003df6:	f7fd f933 	bl	8001060 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d902      	bls.n	8003e0a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	73fb      	strb	r3, [r7, #15]
        break;
 8003e08:	e005      	b.n	8003e16 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e0a:	4b2c      	ldr	r3, [pc, #176]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1ef      	bne.n	8003df6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d14a      	bne.n	8003eb2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d111      	bne.n	8003e46 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e22:	4b26      	ldr	r3, [pc, #152]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6892      	ldr	r2, [r2, #8]
 8003e32:	0211      	lsls	r1, r2, #8
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	68d2      	ldr	r2, [r2, #12]
 8003e38:	0912      	lsrs	r2, r2, #4
 8003e3a:	0452      	lsls	r2, r2, #17
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	491f      	ldr	r1, [pc, #124]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	614b      	str	r3, [r1, #20]
 8003e44:	e011      	b.n	8003e6a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e46:	4b1d      	ldr	r3, [pc, #116]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e4e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6892      	ldr	r2, [r2, #8]
 8003e56:	0211      	lsls	r1, r2, #8
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6912      	ldr	r2, [r2, #16]
 8003e5c:	0852      	lsrs	r2, r2, #1
 8003e5e:	3a01      	subs	r2, #1
 8003e60:	0652      	lsls	r2, r2, #25
 8003e62:	430a      	orrs	r2, r1
 8003e64:	4915      	ldr	r1, [pc, #84]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e6a:	4b14      	ldr	r3, [pc, #80]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a13      	ldr	r2, [pc, #76]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e74:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e76:	f7fd f8f3 	bl	8001060 <HAL_GetTick>
 8003e7a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e7c:	e009      	b.n	8003e92 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e7e:	f7fd f8ef 	bl	8001060 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d902      	bls.n	8003e92 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	73fb      	strb	r3, [r7, #15]
          break;
 8003e90:	e005      	b.n	8003e9e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e92:	4b0a      	ldr	r3, [pc, #40]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0ef      	beq.n	8003e7e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d106      	bne.n	8003eb2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ea4:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ea6:	695a      	ldr	r2, [r3, #20]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	4903      	ldr	r1, [pc, #12]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40021000 	.word	0x40021000

08003ec0 <__libc_init_array>:
 8003ec0:	b570      	push	{r4, r5, r6, lr}
 8003ec2:	4e0d      	ldr	r6, [pc, #52]	; (8003ef8 <__libc_init_array+0x38>)
 8003ec4:	4c0d      	ldr	r4, [pc, #52]	; (8003efc <__libc_init_array+0x3c>)
 8003ec6:	1ba4      	subs	r4, r4, r6
 8003ec8:	10a4      	asrs	r4, r4, #2
 8003eca:	2500      	movs	r5, #0
 8003ecc:	42a5      	cmp	r5, r4
 8003ece:	d109      	bne.n	8003ee4 <__libc_init_array+0x24>
 8003ed0:	4e0b      	ldr	r6, [pc, #44]	; (8003f00 <__libc_init_array+0x40>)
 8003ed2:	4c0c      	ldr	r4, [pc, #48]	; (8003f04 <__libc_init_array+0x44>)
 8003ed4:	f000 f820 	bl	8003f18 <_init>
 8003ed8:	1ba4      	subs	r4, r4, r6
 8003eda:	10a4      	asrs	r4, r4, #2
 8003edc:	2500      	movs	r5, #0
 8003ede:	42a5      	cmp	r5, r4
 8003ee0:	d105      	bne.n	8003eee <__libc_init_array+0x2e>
 8003ee2:	bd70      	pop	{r4, r5, r6, pc}
 8003ee4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ee8:	4798      	blx	r3
 8003eea:	3501      	adds	r5, #1
 8003eec:	e7ee      	b.n	8003ecc <__libc_init_array+0xc>
 8003eee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ef2:	4798      	blx	r3
 8003ef4:	3501      	adds	r5, #1
 8003ef6:	e7f2      	b.n	8003ede <__libc_init_array+0x1e>
 8003ef8:	08003f70 	.word	0x08003f70
 8003efc:	08003f70 	.word	0x08003f70
 8003f00:	08003f70 	.word	0x08003f70
 8003f04:	08003f74 	.word	0x08003f74

08003f08 <memset>:
 8003f08:	4402      	add	r2, r0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d100      	bne.n	8003f12 <memset+0xa>
 8003f10:	4770      	bx	lr
 8003f12:	f803 1b01 	strb.w	r1, [r3], #1
 8003f16:	e7f9      	b.n	8003f0c <memset+0x4>

08003f18 <_init>:
 8003f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1a:	bf00      	nop
 8003f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f1e:	bc08      	pop	{r3}
 8003f20:	469e      	mov	lr, r3
 8003f22:	4770      	bx	lr

08003f24 <_fini>:
 8003f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f26:	bf00      	nop
 8003f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f2a:	bc08      	pop	{r3}
 8003f2c:	469e      	mov	lr, r3
 8003f2e:	4770      	bx	lr
